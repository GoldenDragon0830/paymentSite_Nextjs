/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    teams: Team;
    projects: Project;
    deployments: Deployment;
    plans: Plan;
    templates: Template;
    'api-keys': ApiKey;
    'atlas-projects': AtlasProject;
    'atlas-orgs': AtlasOrg;
    jobs: Job;
  };
  globals: {};
}
export interface User {
  id: string;
  name?: string;
  githubID?: string;
  defaultTeam?: string | Team;
  teams?: {
    team: string | Team;
    roles?: ('owner' | 'admin' | 'user')[];
    invitedOn?: string;
    acceptedOn?: string;
    default?: boolean;
    id?: string;
  }[];
  projects?: {
    project?: string | Project;
    roles?: ('owner' | 'admin' | 'user')[];
    invitedOn?: string;
    acceptedOn?: string;
    id?: string;
  }[];
  roles?: ('admin' | 'user')[];
  githubAccessToken?: string;
  githubAccessTokenExpiration?: number;
  githubRefreshToken?: string;
  githubRefreshTokenExpiration?: number;
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  _verified?: boolean;
  _verificationToken?: string;
  loginAttempts?: number;
  lockUntil?: string;
  createdAt: string;
  updatedAt: string;
  password?: string;
}
export interface Team {
  id: string;
  name?: string;
  slug?: string;
  billingEmail?: string;
  stripeCustomerID?: string;
  skipSync?: boolean;
  createdAt: string;
  updatedAt: string;
}
export interface Project {
  id: string;
  slug?: string;
  status?: 'draft' | 'published';
  stripeSubscriptionID?: string;
  stripeSubscriptionStatus?:
    | 'active'
    | 'canceled'
    | 'incomplete'
    | 'incomplete_expired'
    | 'past_due'
    | 'trialing'
    | 'unpaid'
    | 'paused';
  deletedOn?: string;
  name: string;
  team: string | Team;
  plan?: string | Plan;
  source?: 'github';
  repositoryName?: string;
  template?: string | Template;
  makePrivate?: boolean;
  repositoryURL?: string;
  repositoryID?: string;
  installID?: string;
  deploymentBranch?: string;
  outputDirectory?: string;
  buildScript?: string;
  installScript?: string;
  runScript?: string;
  rootDirectory?: string;
  digitalOceanAppID?: string;
  digitalOceanProjectID?: string;
  domains?: {
    domain: string;
    status: 'pending' | 'active' | 'inactive';
    id?: string;
  }[];
  atlasClusterID?: string;
  atlasProjectID?: string;
  atlasDatabaseName?: string;
  atlasDatabaseUser?: string;
  atlasDatabasePassword?: string;
  s3Policy?: 'public' | 'private';
  region?: 'us-east-1' | 'us-west-2' | 'eu-west-1';
  environmentVariables?: {
    key?: string;
    value?: string;
    id?: string;
  }[];
  aws?: {
    user?: string;
  };
  skipSync?: boolean;
  atlasDatabaseType?: 'cluster' | 'serverless';
  cognitoPassword?: string;
  defaultDomain?: string;
  teamProjectName?: string;
  createdAt: string;
  updatedAt: string;
}
export interface Plan {
  id: string;
  name?: string;
  slug?: string;
  stripeProductID?: string;
  priceJSON?: string;
  order?: number;
  createdAt: string;
  updatedAt: string;
}
export interface Template {
  id: string;
  name?: string;
  slug?: string;
  description?: string;
  repositoryURL?: string;
  order?: number;
  createdAt: string;
  updatedAt: string;
}
export interface Deployment {
  id: string;
  name?: string;
  project: string | Project;
  deployedAt?: string;
  deploymentURL?: string;
  deploymentID?: string;
  logs?: {
    timestamp?: string;
    message?: string;
    id?: string;
  }[];
  deploymentStatus?: 'success' | 'error';
  createdAt: string;
  updatedAt: string;
}
export interface ApiKey {
  id: string;
  name?: string;
  roles: ('owner' | 'admin' | 'user')[];
  enableAPIKey?: boolean;
  apiKey?: string;
  apiKeyIndex?: string;
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  createdAt: string;
  updatedAt: string;
  password?: string;
}
export interface AtlasProject {
  id: string;
  atlasProjectID?: string;
  projects?: string[] | Project[];
  projectCount?: number;
  createdAt: string;
  updatedAt: string;
}
export interface AtlasOrg {
  id: string;
  atlasOrgID?: string;
  atlasProjects?: string[] | AtlasProject[];
  projectCount?: number;
  createdAt: string;
  updatedAt: string;
}
export interface Job {
  id: string;
  type: 'deployApp' | 'provisionDNS';
  status?: string;
  deployApp?: {
    project: string | Project;
  };
  provisionDNS?: {
    project: string | Project;
  };
  hasError?: boolean;
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  createdAt: string;
  updatedAt: string;
}
