[
  {
    "title": "How to use .env inside fork tests?",
    "body": "<p dir=\"auto\">I'm trying to contribute to the Payload repo by fixing an issue I reported. I already forked the project but I don't have MongoDB installed on my local machine, I use a remote MongoDB instance for my local development. So when I run <code class=\"notranslate\">yarn dev admin</code> I get an error because it is trying to connect to a local instance of MongoDB.</p>\n<p dir=\"auto\">Is there a way to use a <code class=\"notranslate\">.env</code> file to set the MONGO_URL? I see that the <code class=\"notranslate\">dev.ts</code> does use the <code class=\"notranslate\">process.env.MONGO_URL</code> environment variable but it doesn't load the variables inside my <code class=\"notranslate\">.env</code>, so every time I want to run a test, I have to write the full command:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"MONGO_URL=&quot;my_instance_url&quot; yarn dev admin\"><pre class=\"notranslate\"><code class=\"notranslate\">MONGO_URL=\"my_instance_url\" yarn dev admin\n</code></pre></div>\n<p dir=\"auto\">I know is not a big deal, but I guess it's more convenient to use a <code class=\"notranslate\">.env</code> file for that.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2055",
    "id": "2055",
    "createdAt": "2023-02-10T15:02:49Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "ChrisGV04",
      "avatar": "https://avatars.githubusercontent.com/u/47041342?u=76f483c754eb2506445bb063e3c07c3b5935d384&v=4",
      "url": "https://github.com/ChrisGV04"
    },
    "comments": []
  },
  {
    "title": "prefill field form with default locale content when adding translation",
    "body": "<p dir=\"auto\">Would it be possible to prefill a translatable field with the saved content of the default language? For example:</p>\n<ul dir=\"auto\">\n<li>Create item in default language</li>\n<li>Switch language to fill translatable fields</li>\n<li>Text field will be filled with the content from the default language which is already saved</li>\n<li>Translate the content, hit save, done!</li>\n</ul>\n<p dir=\"auto\">An option would be to use the defaultValue field option and load the content there, but at the moment only locale and user are populated there. Does somebody has a suggestion on how to handle this without custom frontend components? Handling this on a global scope would be even better.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2054",
    "id": "2054",
    "createdAt": "2023-02-10T14:09:08Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "mvdve",
      "avatar": "https://avatars.githubusercontent.com/u/10288383?v=4",
      "url": "https://github.com/mvdve"
    },
    "comments": []
  },
  {
    "title": "Roadmap: Multiple Database Support",
    "body": "<h2 dir=\"auto\">Description</h2>\n<p dir=\"auto\">Support additional databases</p>\n<h2 dir=\"auto\">Implementation Detail</h2>\n<ul dir=\"auto\">\n<li>Implement an adapter in order to support additional databases</li>\n</ul>\n<h2 dir=\"auto\">Potential Breaking Changes</h2>\n<p dir=\"auto\">None</p>\n<h2 dir=\"auto\">Effort</h2>\n<p dir=\"auto\">High</p>",
    "url": "https://github.com/payloadcms/payload/discussions/287",
    "id": "287",
    "createdAt": "2021-08-11T23:45:41Z",
    "upvotes": 61,
    "commentTotal": 13,
    "author": {
      "name": "denolfe",
      "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
      "url": "https://github.com/denolfe"
    },
    "comments": [
      {
        "author": "SushyDev",
        "body": "Not sure if this would be the right place to suggest but I would love for this to integrate with firebase firestore (and going off-topic, it would be cool if payload could integrate with more firebase features natively such as auth)"
      },
      {
        "author": "gnusupport",
        "body": "I would like it integrated with PostgreSQL"
      },
      {
        "author": "gnusupport",
        "body": "I am using table `variables` where I can insert any variable either as global variable or website or page variable. It is not hard to use \"blocks\", but I consider blocks also as variables. I also have `templates`, and template is interpolated with variables and text, what else. One can have small templates for HTML blocks. So one could have table `blocks` that references website domain (web area), including one could reference specific category inside of the web area, or even specific page. That way a block may be either global to area, or more specific to category and pages, so that other categories and pages may have also blocks with same name, but differently placed. Once you start creating first table with help of skeletons you will quickly understand it. I can help when you tell me you need it."
      },
      {
        "author": "t3hmrman",
        "body": "I personally think the idea of *how* to structure the database can/should be punted for now. \r\n\r\nIMHO the hard work here is abstracting your database such that different engines can be shimmed underneath, this enables you to implement *some working version* of Postgres and let the community contribute/suggest improvements over time.\r\n\r\nAre you planning on making a wholesale switch from `mongoose` to `prisma`? Or are you willing to consider supporting both (or at least not disturbing the mongoose code)?\r\n\r\nPersonally I think the least impact way to do this is to:\r\n\r\n1. Build an interface around what is expected of a backing store (this essentially ossifies and elucidates the contract between different parts of the app and the DB) -- lets say `Database` or `Backend`\r\n2. Re-implement (mostly copy/make more references to) the current mongo implementation as the first implementation  -- let's say `MongoBackend`\r\n3. Allow for use of the new mongo backend (vs old straight `mongoose` backend) with an env var\r\n4. Test the new `MongoBackend` with the built in `mongoose` usage side by side (great time to get a good complete DB-side test suite with the old vs/new backends which essentially run the same code)\r\n5. Create RFC for PostgresBackend (architectural discussions, bikeshedding, etc all go in here)\r\n6. Write v1 of the `PostgresBackend`\r\n7. Write a one-time export script from Mongo -> Postgres (maybe even run it automatically if the right ENV is set?)\r\n\r\nIt's quite high-effort but that's how I would do it -- I think getting into the weeds on how to structure the Postgres tables might be a little bit premature.\r\n\r\nThis way, if someone comes along and says they want to support BigQuery or whatever for some reason -- you can easily tell them \"sure, just write an engine and we'll consider including it\", and see if they do it."
      },
      {
        "author": "gnusupport",
        "body": "* James Mikrut ***@***.***> [2022-08-04 18:33]:\n> Hey @gnusupport — I have also been around SQL for over a decade and I understand that storing lots of content in JSON columns is bad design. That is why I wrote what I wrote—describing how it is **_not ideal_**.\n> \n> I think we are saying the exact same thing.\n\nYes, that is same thing I mean.\n\n\n"
      },
      {
        "author": "taismassaro",
        "body": "hey there, I was wondering if there are any updates on this topic. \r\nmy team is working on rewriting the legacy custom CMS (PHP + Postgres) that powers our product (medical content) and I found Payload today while researching headless CMS options. it sounds quite promising, but unfortunately MongoDB as a hard requirement could be seen as a big limitation for us to even try it out. \r\n\r\nwould appreciate if you can share what your timeline looks like so we can consider it. thanks!"
      },
      {
        "author": "bastiW",
        "body": "I really would like to have the functionality of **data migration** in Payloadcms. I am not so much lacking in a wide range of different databases.  I mostly miss an easy way to migrate data.  E. G. There should be a default approach when renaming a field. \r\n\r\nThe lack of this functionality makes it hard to develop an enterprise product aside from POCs. \r\n\r\n- This is what makes Django in the Python world strong. \r\n- Prisma JS also handles this very effectively. \r\n\r\nSo I would love to see that Payload cms go all in for **Prisma**.\r\n"
      },
      {
        "author": "UsVfxArtia",
        "body": "Lol, it's funny that this is second in priority, and upload progress bar is first ))))))))"
      },
      {
        "author": "kaitwalla",
        "body": "Just throwing a note in - totally understand about prioritization but wanted to raise my hand as another \"I love everything about this CMS but MongoDB is a hard pass\" user here!"
      },
      {
        "author": "matthijs166",
        "body": "It is for every project also always a pain in the ass to set up MongoDB especial for junior developers. We have some docker configs for it, but adds more complexity to the project.\r\n\r\nWe are now looking into https://github.com/nodkz/mongodb-memory-server for local development. Maybe an idea to include this standard in payload? This makes the barrier to enter for hobby projects lower and the setup for local development less complex.\r\n\r\nWe also use N8N in a lot of projects (they use Prisma) and there we have the option to use SQLite, it's one command, and you got it a n8n setup running."
      }
    ]
  },
  {
    "title": "payload cms scheduler",
    "body": "<p dir=\"auto\">I would ask if there is a standard approach for automatic, reoccurring actions in Payload? For example, when user is inactive since 7 days, deactivate him or similar things.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2053",
    "id": "2053",
    "createdAt": "2023-02-10T10:40:06Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "dawidmachon",
      "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
      "url": "https://github.com/dawidmachon"
    },
    "comments": [
      {
        "author": "ChrisGV04",
        "body": "I believe there's no built-in way to do that on Payload, however, since it's built on top of express and Node.js you are able to implement cron jobs and use the Payload Local API to achieve what you're looking for.\n\nYou can look into [`node-cron`](https://www.npmjs.com/package/node-cron) for a simple cron job implementation in Node.js.\n\nFor the use case you mentioned, maybe you can run a cron job once at the beginning of every day to check for any inactive users since 7 days or more and suspend them using the Payload Local API."
      },
      {
        "author": "denolfe",
        "body": "We use node-cron in our public demo to clear the database and re-seed data every hour. Might be a good example to look at. https://github.com/payloadcms/public-demo/tree/master/src%2Fcron"
      }
    ]
  },
  {
    "title": "Duplicate \"graphql\" modules cannot be used at the same time since different versions...",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">I'm using payload in a nx monorepo, I met this error after upgrading payload to the newest version.  And I found it <a href=\"https://github.com/payloadcms/payload/commit/57f5f5ec439b5aee1d46bff0bf31aac6148f16b2\">was upgraded</a> in 1.4.0.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nx run seo-payload:serve\n\n &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 283 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 11.7 KiB [entry] [rendered]\nwebpack compiled successfully (1799b20c209ec786)\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:388:27\n[02:01:19] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} &quot;${stringifiedValue}&quot; from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType &quot;DateTime&quot; from another module or realm.\n\nEnsure that there is only one instance of &quot;graphql&quot; in the node_modules\ndirectory. If different versions of &quot;graphql&quot; are the dependencies of other\nrelied on modules, use &quot;resolutions&quot; to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate &quot;graphql&quot; modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:101:23\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:60:38)\n    at registerSchema (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/graphql/registerSchema.js:58:24)\n    at init (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/init.js:79:38)\n^C%\"><pre class=\"notranslate\"><code class=\"notranslate\">nx run seo-payload:serve\n\n &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 283 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 11.7 KiB [entry] [rendered]\nwebpack compiled successfully (1799b20c209ec786)\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:388:27\n[02:01:19] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType \"DateTime\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:101:23\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:60:38)\n    at registerSchema (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/graphql/registerSchema.js:58:24)\n    at init (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/init.js:79:38)\n^C%\n</code></pre></div>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<p dir=\"auto\"><a href=\"https://github.com/Stupidism/nx-payload-demo\">https://github.com/Stupidism/nx-payload-demo</a>.</p>\n\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">git clone git@github.com:Stupidism/nx-payload-demo.git</code></li>\n<li><code class=\"notranslate\">PUPPETEER_SKIP_DOWNLOAD=1 CYPRESS_INSTALL_BINARY=0 npm install</code></li>\n<li><code class=\"notranslate\">nx run seo-payload:serve</code></li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 6.7 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 2.85 KiB [entry] [rendered]\nwebpack compiled successfully (c07d01079b667599)\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:115:27\n[13:36:20] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} &quot;${stringifiedValue}&quot; from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType &quot;DateTime&quot; from another module or realm.\n\nEnsure that there is only one instance of &quot;graphql&quot; in the node_modules\ndirectory. If different versions of &quot;graphql&quot; are the dependencies of other\nrelied on modules, use &quot;resolutions&quot; to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate &quot;graphql&quot; modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:96:15\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:42:36)\n    at registerSchema (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/graphql/registerSchema.ts:36:18)\n    at init (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/init.ts:89:19)\n\"><pre class=\"notranslate\"><code class=\"notranslate\"> &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 6.7 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 2.85 KiB [entry] [rendered]\nwebpack compiled successfully (c07d01079b667599)\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:115:27\n[13:36:20] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType \"DateTime\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:96:15\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:42:36)\n    at registerSchema (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/graphql/registerSchema.ts:36:18)\n    at init (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/init.ts:89:19)\n\n</code></pre></div>\n<h2 dir=\"auto\">Other Details</h2>\n\n",
    "url": "https://github.com/payloadcms/payload/discussions/1856",
    "id": "1856",
    "createdAt": "2023-01-12T02:04:54Z",
    "upvotes": 1,
    "commentTotal": 6,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @Stupidism — this is actually not a bug with Payload and more of a restriction with GraphQL itself.\r\n\r\nI assume that this is related to a custom GraphQL mutation or query that you have written. If you import types directly from a GraphQL dependency, this can arise. \r\n\r\nNotice in our docs how we provide `GraphQL` as an argument to custom queries and mutations - _**this is why.**_  This is literally the same exact GraphQL dependency that Payload uses, so if you use types coming from that GraphQL argument, you will not see this issue.\r\n\r\nOtherwise, if you follow the suggested GraphQL solution in the error message, and specify a `resolutions` to GraphQL in your `package.json`, that should allow you to dodge this issue as well.\r\n\r\nI will convert this to a discussion and we can keep convo going there. But this is expected and there is little that Payload can do to rectify this, unfortunately. Got me a few times myself when having multiple copies / versions of GraphQL installed."
      },
      {
        "author": "sifferhans",
        "body": "I have the same problem. I tried using Payload in a monorepo together with a Nuxt app, and I get this error. I haven't installed or used anything graphql-related in the Nuxt app, so I'm quite confused"
      },
      {
        "author": "Stupidism",
        "body": "@jmikrut Sorry for the late response. Here's the repro repo: https://github.com/Stupidism/nx-payload-demo. Can you take a look? This is purely an empty project but with the dependencies from my real project."
      },
      {
        "author": "crocq1",
        "body": "Do **npm ls graphql** to see the different versions.\r\n\r\nThen try to add overrides in package.json (https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides)\r\n\r\nFor example I did this : \r\n\r\n`\"overrides\": {\r\n  \"graphql@>15.7.0 <16.7.0\": \"^15.8.0\"\r\n}`\r\n"
      },
      {
        "author": "sifferhans",
        "body": "I migrated to [pnpm](https://pnpm.io) and did `pnpm install --shamefully-hoist` and I think that was the solution for me:)"
      },
      {
        "author": "Stupidism",
        "body": "I believe above answers about `yarn` or `pnpm` can solve this. But **I'm in a very huge monorepo, I cannot switch to another package manager**. Can anybody provide a workaround with `npm`?"
      }
    ]
  },
  {
    "title": "About the flexibility of the relationship",
    "body": "<p dir=\"auto\">Let's start with the example in the <a href=\"https://payloadcms.com/docs/fields/relationship\" rel=\"nofollow\">relationship document</a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/217543881-64a2ea55-9213-48b1-bf53-6bd645f8652f.png\"><img width=\"882\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217543881-64a2ea55-9213-48b1-bf53-6bd645f8652f.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">By default, ObjectID is used as the value of relationship, but if I want to use other fields of the owner collection, it is very inconvenient.<br>\nSuppose the owner collection has other fields such as name, desc. How can I get the name and desc conveniently?</p>\n<p dir=\"auto\">For example, through the REST API mentioned in the documentation.</p>\n<p dir=\"auto\">I feel the above process is too cumbersome. Is there an easy way?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2041",
    "id": "2041",
    "createdAt": "2023-02-08T13:36:02Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": "zhounewz",
        "body": "@jmikrut  Do you have any ideas? Thanks"
      },
      {
        "author": "DanRibbens",
        "body": "Are you asking how to query a collection on the fields of a relationship?\r\n\r\nYou can do that with dot notation:\r\n\r\n`/api/cars?where[owner.name][equals]=Dan`\r\n\r\nIf that isn't what you're after, can you explain in more detail what is you're trying to do?\r\n\r\nThanks!\r\n"
      }
    ]
  },
  {
    "title": "Getting Started instructions aren't working",
    "body": "<p dir=\"auto\">I'm hoping someone can help me figure this out.  I can't get the <a href=\"https://payloadcms.com/docs/getting-started/installation#from-scratch\" rel=\"nofollow\">'getting started from scratch' instructions</a> to work.</p>\n<ul dir=\"auto\">\n<li>The instructions use <code class=\"notranslate\">import</code> syntax for <code class=\"notranslate\">payload.config.js</code></li>\n<li>Thus <code class=\"notranslate\">node server.js</code> errors out unless I set <code class=\"notranslate\">type: module</code> in the <code class=\"notranslate\">package.json</code></li>\n<li>The instructions however use <code class=\"notranslate\">require()</code> syntax for <code class=\"notranslate\">server.js</code> - which will then error out</li>\n<li>I updated the <code class=\"notranslate\">server.js</code> to use <code class=\"notranslate\">import</code> syntax despite the instructions but then get</li>\n<li><code class=\"notranslate\">Error [ERR_REQUIRE_ESM]: require()</code> error in <code class=\"notranslate\">node_modules\\payload\\dist\\config\\load.js</code> which is where I give up.</li>\n</ul>\n<p dir=\"auto\">I do want to do this from scratch, but for what it's worth the create-payload-app tool didn't work for me either (constantly failing to find .ts files it didn't generate but still wanted somewhere, and misnaming js files as ts files).</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2013",
    "id": "2013",
    "createdAt": "2023-02-03T18:09:16Z",
    "upvotes": 1,
    "commentTotal": 3,
    "author": {
      "name": "DaveMeade",
      "avatar": "https://avatars.githubusercontent.com/u/674088?u=e972919635d2c292852f2585ebbd73d0ac5b709d&v=4",
      "url": "https://github.com/DaveMeade"
    },
    "comments": [
      {
        "author": "denolfe",
        "body": "We've actually removed the \"from scratch\" instructions in the latest docs that are yet to be deployed because there's now some complex tsconfig configuration to allow for the best DX. I would recommend running create-payload-app and transfering all relevant files.\r\n\r\nIt sounds like you're running into issues that we've tried to mitigate by having create-payload-app. What issues were you facing when going that route?"
      },
      {
        "author": "DaveMeade",
        "body": "Sorry for the delayed response.\r\n\r\nInitially, I couldn't get the create-payload-app to work. (I selected the blank-js option).  This option still doesn't work for me.\r\n\r\nI've done some troubleshooting on my side since then (and before reading your reply), including trying to get ts-node working in general.  I don’t know if what I did matters, but now if I select the \"blank\" option the create-payload-app creates a working project. Selecting the blank-js option still does not work. \r\n\r\nUnfortunately, even with a 'working' install, I find the project that is created very difficult to work with.  I wanted to use payload because it seemed it would be easy to install into an existing express project I'm working on. That doesn't seem to be the case.\r\n\r\nThe created project rather forcibly imposes some very opinionated (and needless) views as to what my devops workflow/tooling should be.  Perhaps it does this to ensure the generated docker-compose file will work, but that too is problematic.  \r\n\r\nWhy include a docker-compose file and not the handful of additional lines required to add a mongo server which is also *required* to run? For that matter, why not docker-ize just mongo but not the payload app? At the very least there are some changes one might want to make here even just for basic 'getting it running'.\r\n\r\nUnfortunately, the project breaks if one does too much customization on this set of docker assumptions. For example, maybe my project would be well suited to have a couple of custom dockerfiles, and perhaps even some startup scripts to initialize a mongo server etc (and, honestly, lord only knows what else one might include in their project).\r\n\r\nNo problem: I'll just create a /build folder drop some docker files in there with the scripts I need, script out the dockerfiles, tweak the docker-compose, and shazam - we're good to go. Right? No, unfortunately, this will break things in the app-generated project.\r\n\r\nThe project's built-in npm commands call some payload build process that ends up copying a whole bunch of USELESS files into the build directory.  I have no idea what else this payload build process might be doing, so I've no idea if I can simply remove it.  \r\n\r\nFundamentally - I don't need or want a CMS to force me to re-code my devops from the ground up. I use gulp, and I have a different set of docker paths/setups. If and when I need a /dist folder, I will script that. \r\n\r\nAll I need from payload is documentation on how payload interacts with express, and the BARE MINIMUM needed to install payload into an EXISTING project with its own existing set of devop tools, workflows, and resources already wired up. \r\n"
      },
      {
        "author": "DaveMeade",
        "body": "Thanks @jmikrut I will try the above to see if I can get it running this weekend perhaps.\r\n\r\n> Now, for the payload build command, that is used to build the Payload admin UI and is absolutely necessary. Those files are not useless—those are the Payload admin files. I think that it's strange to instantly assume that files are useless but that's me.\r\n\r\nI mean that they are useless in the /build directory I created to house dockerfiles.  I have no doubt they are needed somewhere, but they are serving no purpose (being useless) in the /build folder.  The package ships with default commands that have some sort of assumption relating to /dist folders and docker contexts that ended up putting those files someplace useless.  \r\n\r\nI do need some documentation to describe where to place `payload build` output ... but the app-generated project isn't helping by obfuscating that away behind some path assumptions that appear to somehow be related to docker context (?).  My express app would have other endpoints, they might use ejs views, and/or have other middleware pieces. My output folder has some structure to it, and my dockerfiles are in a /build subfolder. The default commands of the app-created project are not cutting it (and frankly putting output in crazy/useless places);  without 'from scratch' instructions I can't workout how to plug it all into my project. "
      }
    ]
  },
  {
    "title": "Access sibling field in an array field from a custom component",
    "body": "<p dir=\"auto\">Hi! Consider I have the following collection Recipes:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { CollectionConfig } from 'payload/types';\nimport IngredientUnit from '../components/IngredientUnit';\n\nconst Recipes: CollectionConfig = {\n  slug: 'recipes',\n  admin: {\n    useAsTitle: 'name',\n  },\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n    },\n    {\n        name: 'ingredients',\n        type: 'array',\n        fields: [\n            {\n                name: 'name',\n                type: 'text'\n            },\n            {\n                name: 'quantity',\n                type: 'text'\n            },\n            {\n                name: 'unit',\n                type: 'text',\n                admin: {\n                    components: {\n                        Field: IngredientUnit\n                    }\n                }\n            }\n        ]\n    }\n  ],\n}\n\nexport default Recipes;\"><pre class=\"notranslate\"><code class=\"notranslate\">import { CollectionConfig } from 'payload/types';\nimport IngredientUnit from '../components/IngredientUnit';\n\nconst Recipes: CollectionConfig = {\n  slug: 'recipes',\n  admin: {\n    useAsTitle: 'name',\n  },\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n    },\n    {\n        name: 'ingredients',\n        type: 'array',\n        fields: [\n            {\n                name: 'name',\n                type: 'text'\n            },\n            {\n                name: 'quantity',\n                type: 'text'\n            },\n            {\n                name: 'unit',\n                type: 'text',\n                admin: {\n                    components: {\n                        Field: IngredientUnit\n                    }\n                }\n            }\n        ]\n    }\n  ],\n}\n\nexport default Recipes;\n</code></pre></div>\n<p dir=\"auto\">How can I access the 'name' field inside the custom component 'IngredientUnit'? Using 'useFormFields' I am able to access the 'title' field, but not 'name'.</p>\n<p dir=\"auto\">Thank you!!!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1900",
    "id": "1900",
    "createdAt": "2023-01-17T09:51:25Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "cerize",
      "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
      "url": "https://github.com/cerize"
    },
    "comments": [
      {
        "author": "JessChowdhury",
        "body": "Hey @cerize - the useForm() function will allow you to access the sibling data. Not sure how your custom field is setup but it would look something like this:\r\n\r\n![Screen Shot 2023-02-09 at 6 05 10 PM](https://user-images.githubusercontent.com/67977755/217899734-ed752024-b426-48e3-880f-172468dcad88.png)\r\n\r\n"
      }
    ]
  },
  {
    "title": "Access control for unpublishing",
    "body": "<p dir=\"auto\">Hello! Maybe I am missing something, but I could not find anything related to access control of the 'unpublish' action. Is it possible?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1996",
    "id": "1996",
    "createdAt": "2023-02-01T21:59:45Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "cerize",
      "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
      "url": "https://github.com/cerize"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "@cerize Hi! You can use the `beforeChange` hook to check the document's `_status`. If it went from `published` to `draft` then you can throw an API error. Something like this (untested):\r\n\r\n```ts\r\nimport APIError from \"payload/dist/errors/APIError\";\r\n\r\nconst beforeChangeHook: GlobalBeforeChangeHook = async ({\r\n  data, // incoming data to update or create with\r\n  req, // full express request\r\n  originalDoc, // original document\r\n}) => {\r\n  if (originalDoc._status === 'published' && data._status !== 'published') throw new APIError('You cannot do this!');\r\n  return data; // Return data to update the document with\r\n}\r\n```\r\n\r\nHere are the docs for this hook: https://payloadcms.com/docs/hooks/globals#beforechange"
      }
    ]
  },
  {
    "title": "Replace Save or Publish Buttons",
    "body": "<p dir=\"auto\">We should make it possible to extend Payload so that users can slot in custom save or publish buttons and tie them to alternate actions as needed —. e.g. <em>Request Review</em> or similar.</p>\n<p dir=\"auto\">Marking as planned and logging here for visibility.</p>\n<p dir=\"auto\">Related:<br>\n<a aria-label=\"Discussion #1009\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4336244\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1009\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1009/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1009\">#1009</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1324",
    "id": "1324",
    "createdAt": "2022-10-31T19:13:53Z",
    "upvotes": 9,
    "commentTotal": 1,
    "author": {
      "name": "zubricks",
      "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
      "url": "https://github.com/zubricks"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "Related: https://github.com/payloadcms/payload/discussions/1996"
      }
    ]
  },
  {
    "title": "Creating a new user without a password",
    "body": "<p dir=\"auto\">It feels a little odd to me that a user requires a password to be set before creating them.</p>\n<p dir=\"auto\">Especially when emails are successfully configured, a password may not need to be set as the user can have a password reset email sent to them instead. Or maybe you want to create a user that can only be accessed via api key based authentication</p>\n<p dir=\"auto\">What are the thoughts on this change?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1340",
    "id": "1340",
    "createdAt": "2022-11-03T17:44:09Z",
    "upvotes": 10,
    "commentTotal": 3,
    "author": {
      "name": "rymate1234",
      "avatar": "https://avatars.githubusercontent.com/u/581104?v=4",
      "url": "https://github.com/rymate1234"
    },
    "comments": [
      {
        "author": "paper-krane",
        "body": "Would also love to see this feature. Would love an option that could be passed in the ```auth``` config of a collection that would make passwords necessary or not. I believe it would expand a lot of opportunities user onboarding."
      },
      {
        "author": "the-digital-anarchist",
        "body": "I guess it would also be possible to change the user collection our self right?\r\nOr is this piece of code under the hood and not adjustable?\r\nI've tried it, but can't find how to do it.\r\n\r\nEdit: found the docs on customizing the user: https://payloadcms.com/docs/admin/overview#the-admin-user-collection\r\nBut not how to create a user without password yet."
      },
      {
        "author": "the-digital-anarchist",
        "body": "Did any one have any luck with this?\r\nPlease share if you found a way"
      }
    ]
  },
  {
    "title": "ratio field Why must one be selected?",
    "body": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/217503227-44698e7f-fa98-4f67-8f58-b2c7a68fd2c5.png\"><img width=\"935\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217503227-44698e7f-fa98-4f67-8f58-b2c7a68fd2c5.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/217503306-fc5667be-dad1-4849-b759-360542fe2893.png\"><img width=\"425\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217503306-fc5667be-dad1-4849-b759-360542fe2893.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">There are cases where neither is selected. This situation cannot be achieved with ratio</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2039",
    "id": "2039",
    "createdAt": "2023-02-08T10:26:48Z",
    "upvotes": 1,
    "commentTotal": 4,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": "zhounewz",
        "body": "It can only be realized by select, but it is inconvenient"
      },
      {
        "author": "zhounewz",
        "body": "Changing from require to required didn't work.\r\n<img width=\"359\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217550395-dad5b363-a8bf-4ffd-a040-e14ff2e33c57.png\">\r\nThere are 3 options for me, unselected, true or false."
      },
      {
        "author": "zhounewz",
        "body": "@JessChowdhury  \"payload\": \"1.2.5\""
      },
      {
        "author": "DanRibbens",
        "body": "The required validation on radios was fixed in a more recent version. Upgrading Payload will help, but not completely fix your problem.\n\nRadio inputs in the browser don't work the way you want.  There is no way to deselect a value without adding a clear button. You need a third option for 'null' in your list it seems."
      }
    ]
  },
  {
    "title": "Payload 1.6 Megathread",
    "body": "<p dir=\"auto\">Version 1.6 has been released <g-emoji class=\"g-emoji\" alias=\"tada\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f389.png\">🎉</g-emoji></p>\n<p dir=\"auto\">This is a very large release that comes with some <g-emoji class=\"g-emoji\" alias=\"rotating_light\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png\">🚨</g-emoji> BREAKING CHANGES <g-emoji class=\"g-emoji\" alias=\"rotating_light\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png\">🚨</g-emoji> , so please read the <a href=\"https://github.com/payloadcms/payload/releases/tag/v1.6.1\">Changelog</a> carefully.</p>\n<p dir=\"auto\">We try our best to avoid breaking changes, but we decided this was the right time to do it as it paves the way for greater things in the future like ongoing TypeScript niceties, serverless support, and additional database support <g-emoji class=\"g-emoji\" alias=\"sunglasses\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png\">😎</g-emoji></p>\n<p dir=\"auto\">If you run into issues after reading the changelog, please reply in this thread, so we can assist.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1992",
    "id": "1992",
    "createdAt": "2023-02-01T16:48:15Z",
    "upvotes": 3,
    "commentTotal": 5,
    "author": {
      "name": "denolfe",
      "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
      "url": "https://github.com/denolfe"
    },
    "comments": [
      {
        "author": "STR1234",
        "body": "After the update and going through the Changelog printSchema.js throws:\r\n`const directives = schema.getDirectives().filter(directiveFilter);`\r\n\r\n`TypeError: Cannot read properties of undefined (reading 'getDirectives')`\r\nwhenever generate:graphQLSchema is invoked.\r\nAny ideas? :) What have I missed? 🤔 "
      },
      {
        "author": "vstarush",
        "body": "Hello! For non-Typescript project in version 1.6.3 the payload.config.js and all collections are throwing an error:\r\n\"SyntaxError: Cannot use import statement outside a module.\"\r\n\r\nNot sure if this is because the payload.init became async or because of any other changes.\r\nA fix like adding 'type: \"module\"' in package.json doesn't work cause it breaks other things and changing payload.config from js to .mjs doesn't either.\r\n\r\nWould appreciate on any ideas on how to fix this, if this is at all possible. Thank you! :)"
      },
      {
        "author": "fabioquarantini",
        "body": "Does \"retainDeleted\" no longer exist?"
      },
      {
        "author": "lksfrn",
        "body": "There was a mention of Vercel deployments. Is there some guide on how to deploy Payload to it?"
      },
      {
        "author": "jakehopking",
        "body": "Hi - I've upgraded to the 1.6.6 and all records in my collections (in the admin ui) are missing.\r\n\r\nI've followed the instructions here: https://github.com/payloadcms/payload/pull/1847\r\n\r\nSo I can confirm that dev runs using `ts-node` despite loading `.js` files which contain `require`.\r\n\r\nI've tried running your migration script, however it fails with this error:\r\n```shell\r\n❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\r\n[10:52:31] INFO (payload): Connected to Mongo server successfully!\r\n[10:52:31] INFO (payload): Starting Payload...\r\n/Users/jake/Development/personal/elkli-and-hart/payload.config.ts:1\r\nimport path from 'path';\r\n^^^^^^\r\n\r\nSyntaxError: Cannot use import statement outside a module\r\n```\r\n\r\n### Type = modules\r\n\r\nIf I set `\"type\": \"module\"` in `package.json` I then get this error:\r\n\r\n```shell\r\n❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for /Users/jake/Development/personal/elkli-and-hart/scripts/payloadMigrateVersions.ts\r\n```\r\n\r\n... and another side effect of the `type: modules` is dev breaks cos I use `require` within `dev.js` and `server.js`.\r\n\r\n### `--esm`\r\n\r\nRunning with the `--esm` flag obviously doesn't work either:\r\n\r\n```shell\r\n❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node --esm -T scripts/payloadMigrateVersions.ts\r\nReferenceError: require is not defined in ES module scope, you can use import instead\r\n```\r\n\r\n### `--swc`\r\n\r\nI have this already in my `tsconfig.json`\r\n\r\n```json\r\n\"ts-node\": {\r\n  \"swc\": true\r\n}\r\n```\r\n\r\nBut trying to run with this flag just to be sure, still results in a fail (albeit slightly different):\r\n\r\n```shell\r\n❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node --swc -T scripts/payloadMigrateVersions.ts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for /Users/jake/Development/personal/elkli-and-hart/scripts/payloadMigrateVersions.ts\r\n```\r\n\r\n\r\n#### My payload config is typescript.\r\n\r\nHere it is for reference:\r\n\r\n```ts\r\nimport path from 'path';\r\nimport dotenv from 'dotenv';\r\nimport { buildConfig } from 'payload/config';\r\nimport {\r\n  Category,\r\n  Collection,\r\n  Essay,\r\n  Media,\r\n  MediaPhotos,\r\n  Page,\r\n  Price,\r\n  Product,\r\n  ReusableContent,\r\n  Tag,\r\n  User,\r\n} from './collections';\r\nimport { SiteNavigation, Footer } from './globals';\r\n\r\ndotenv.config();\r\n\r\nexport default buildConfig({\r\n  serverURL: process.env.PAYLOAD_PUBLIC_SERVER_URL,\r\n  typescript: {\r\n    outputFile: path.resolve(__dirname, './generated-types.ts'),\r\n  },\r\n  // admin: {\r\n  //   user: 'admins',\r\n  // },\r\n  graphQL: {\r\n    disable: true,\r\n  },\r\n  collections: [\r\n    Product,\r\n    Essay,\r\n    Collection,\r\n    Page,\r\n    Media,\r\n    MediaPhotos,\r\n    ReusableContent,\r\n    Price,\r\n    Category,\r\n    Tag,\r\n    User,\r\n  ],\r\n  globals: [Footer, SiteNavigation],\r\n  debug: true,\r\n  // optional customization of routes\r\n  routes: {\r\n    api: '/payload',\r\n    // admin: '/admin',\r\n    // graphQL: '/graphql',\r\n    // graphQLPlayground: '/graphql-playground',\r\n  },\r\n});\r\n\r\n```\r\n\r\nThis release feels rushed and I'm stuck with broken admin dashboard again. It was only a month ago that a payload update broke versions completely for me, and we had to work together to get that fixed. Why are we here again?\r\n\r\nPlease can you provide me with a migration script that works?"
      }
    ]
  },
  {
    "title": "Is it possible to show/hide tabs depending on a condition?",
    "body": "<p dir=\"auto\">Currently, according to the type definition, a tab should support the <code class=\"notranslate\">admin</code> property, but it get's ignored and I couldn't find it in the documentation.</p>\n<p dir=\"auto\">I'm trying to build a table block, that allows the creation of tables.</p>\n<p dir=\"auto\">My idea was the following:<br>\nSpecify a <code class=\"notranslate\">numberOfColumns</code> field that allows numbers between 2 and 10.<br>\nDepending on that number, 2-10 tabs would show up below for each \"row\" in an array of \"rows\" to allow filling the cells.</p>\n<p dir=\"auto\">Is this possible? Do you have any other ideas how to realise a table block with the given fields or what a custom component would look like to achieve this?</p>\n<p dir=\"auto\">Thanks</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1664",
    "id": "1664",
    "createdAt": "2022-12-14T15:18:00Z",
    "upvotes": 2,
    "commentTotal": 1,
    "author": {
      "name": "christian-reichart",
      "avatar": "https://avatars.githubusercontent.com/u/9932248?u=853b1ea4b57e7cbeb5cea9a422df4d61dcee0ece&v=4",
      "url": "https://github.com/christian-reichart"
    },
    "comments": [
      {
        "author": "JessChowdhury",
        "body": "Hi @christian-reichart conditional tabs is on our roadmap here: https://github.com/payloadcms/payload/discussions/1840"
      }
    ]
  },
  {
    "title": "add custom css",
    "body": "<p dir=\"auto\">Hello there,</p>\n<p dir=\"auto\">I've tried to add my custom css according to the <a href=\"https://payloadcms.com/docs/admin/customizing-css#customizing-css-and-scss\" rel=\"nofollow\">docs</a>.<br>\nBut in the end the stylesheet isn't included (neither as inline nor as external). Does it work for you? Is there anything I need to consider?<br>\nIn the docs it looks very simple...</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1514",
    "id": "1514",
    "createdAt": "2022-11-27T13:55:47Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "unonweb",
      "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
      "url": "https://github.com/unonweb"
    },
    "comments": [
      {
        "author": "JessChowdhury",
        "body": "Hi @unonweb,\r\n\r\nThis could be a cache issue - could you try and run `rm -rf node_modules/.cache` then restart your server and let me know how that goes."
      },
      {
        "author": "mvdve",
        "body": "Cache was indeed the issue."
      }
    ]
  },
  {
    "title": "Graphql custom route",
    "body": "<p dir=\"auto\">Is it possible to change the route generation mechanism for graphql? I don't want my graphql url to start with <code class=\"notranslate\">/api</code>.<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/payloadcms/payload/blob/4a49640c3fc22ee74a2666cb90588b03de68644d/src/graphql/initPlayground.ts#L4-L15\">payload/src/graphql/initPlayground.ts</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 4 to 15\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/payloadcms/payload/commit/4a49640c3fc22ee74a2666cb90588b03de68644d\">4a49640</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L4\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"4\"></td>\n          <td id=\"LC4\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">function</span> <span class=\"pl-en\">initPlayground</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span>: <span class=\"pl-smi\">Payload</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\"><span class=\"pl-k\">void</span></span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L5\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"5\"></td>\n          <td id=\"LC5\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">disable</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-c1\">!</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">disablePlaygroundInProduction</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NODE_ENV</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'production'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NODE_ENV</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'production'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L6\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"6\"></td>\n          <td id=\"LC6\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">router</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQLPlayground</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">graphQLPlayground</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L7\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"7\"></td>\n          <td id=\"LC7\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c1\">endpoint</span>: <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">api</span><span class=\"pl-kos\">}</span></span><span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L8\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"8\"></td>\n          <td id=\"LC8\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c\">// eslint-disable-next-line @typescript-eslint/ban-ts-comment</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L9\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"9\"></td>\n          <td id=\"LC9\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c\">// <span class=\"pl-k\">@ts</span>-ignore ISettings interface has all properties required for some reason</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L10\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"10\"></td>\n          <td id=\"LC10\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c1\">settings</span>: <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L11\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"11\"></td>\n          <td id=\"LC11\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-s\">'request.credentials'</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L12\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"12\"></td>\n          <td id=\"LC12\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L13\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"13\"></td>\n          <td id=\"LC13\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L14\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"14\"></td>\n          <td id=\"LC14\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-kos\">}</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L15\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"15\"></td>\n          <td id=\"LC15\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-kos\">}</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2022",
    "id": "2022",
    "createdAt": "2023-02-06T12:58:34Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "guladima",
      "avatar": "https://avatars.githubusercontent.com/u/11425189?v=4",
      "url": "https://github.com/guladima"
    },
    "comments": [
      {
        "author": "DanRibbens",
        "body": "That isn't currently configurable directly. I haven't seen this asked before, but if this is a common thing we could consider how it might be done in the config.\r\n\r\nAlternatively, it may be possible to disable Payload's own graphQL using `graphQL.disable: true` in your config and set it up separately in your app by importing payload's graphql handler and adding it to your express router under your own path.\r\n\r\nPayload sets up routes for the playground and graphql endpoints here:\r\nhttps://github.com/payloadcms/payload/blob/4a49640c3fc22ee74a2666cb90588b03de68644d/src/initHTTP.ts#L56-L70\r\n\r\nDisabling graphql will also skip registering of the schema, which you'll want to call also. I believe it could be done onInit in which you could pass it `payload` instead of `this`.\r\nhttps://github.com/payloadcms/payload/blob/4a49640c3fc22ee74a2666cb90588b03de68644d/src/payload.ts#L194-L196\r\n\r\nSince we don't export some of these files directly, you'll have to import them from 'payload/dist'.\r\n\r\nI haven't tried to do this and honestly, it probably isn't worth the effort unless this is a hard requirement for your project.\r\n\r\nI hope this helps, cheers!"
      },
      {
        "author": "guladima",
        "body": "Finally i solve my problem.\r\n\r\nHere's my working solution:\r\n\r\n### server.ts\r\n```typescript\r\nimport express, { NextFunction, Response } from \"express\";\r\nimport payload from \"payload\";\r\nimport graphQLPlayground from \"graphql-playground-middleware-express\";\r\nimport registerSchema from \"payload/dist/graphql/registerSchema\";\r\nimport identifyAPI from \"payload/dist/express/middleware/identifyAPI\";\r\nimport graphQLHandler from \"payload/dist/graphql/graphQLHandler\";\r\nimport { PayloadRequest } from \"payload/types\";\r\n\r\nrequire(\"dotenv\").config();\r\nconst app = express();\r\n\r\nconst start = async () => {\r\n  await payload.init({\r\n    secret: process.env.PAYLOAD_SECRET,\r\n    mongoURL: process.env.MONGODB_URI,\r\n    express: app,\r\n    onInit: async () => {\r\n      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);\r\n      payload.logger.info(`Payload API URL: ${payload.getAPIURL()}`);\r\n    },\r\n  });\r\n\r\n  app.use(\r\n    payload.config.routes.graphQL,\r\n    (req, res, next) => {\r\n      if (req.method === \"OPTIONS\") {\r\n        res.sendStatus(204);\r\n      } else {\r\n        next();\r\n      }\r\n    },\r\n    (\r\n      req: PayloadRequest & { payload: { schemaRegistered?: boolean } },\r\n      _res: Response,\r\n      next: NextFunction\r\n    ) => {\r\n      if (!req.payload.schemaRegistered) {\r\n        registerSchema(req.payload);\r\n        req.payload.schemaRegistered = true;\r\n      }\r\n\r\n      next();\r\n    },\r\n    identifyAPI(\"GraphQL\"),\r\n    (req: PayloadRequest, res: Response) => graphQLHandler(req, res)(req, res)\r\n  );\r\n\r\n  app.get(\r\n    payload.config.routes.graphQLPlayground,\r\n    graphQLPlayground({\r\n      endpoint: payload.config.routes.graphQL,\r\n      settings: {\r\n        \"request.credentials\": \"include\",\r\n      },\r\n    })\r\n  );\r\n\r\n  app.listen(3000);\r\n};\r\n\r\nstart();\r\n```\r\n\r\n### payload.config.ts\r\n```typescript\r\nroutes: {\r\n  admin: \"/admin\",\r\n  api: \"/api\",\r\n  graphQL: \"/graphql\",\r\n  graphQLPlayground: \"/graphql-playground\",\r\n},\r\ngraphQL: {\r\n  disable: true,\r\n  schemaOutputFile: path.resolve(__dirname, \"generated-schema.graphql\"),\r\n},\r\n```"
      }
    ]
  },
  {
    "title": "Allow Email functionality to be completely disabled",
    "body": "<p dir=\"auto\">Currently, if an email transport isn't specified a mock email handler is used. We should provide a way to disable email functionality completely for testing and security purposes.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1703",
    "id": "1703",
    "createdAt": "2022-12-19T04:38:23Z",
    "upvotes": 3,
    "commentTotal": 2,
    "author": {
      "name": "denolfe",
      "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
      "url": "https://github.com/denolfe"
    },
    "comments": [
      {
        "author": "iakshay",
        "body": "Would be nice not to create mock credentials on every test run, currently I have to use `msw` to prevent API request going to `api.nodemailer.com` 😄"
      },
      {
        "author": "wkillerud",
        "body": "I have a scenario where this feature would have been useful. In my case I want to run Payload in a setting where it doesn't have direct access to the Internet. The database, media storage and server all run in this controlled network setting. For production I'll add an email transport to the setup, but for the dev/test environment at least I'm fine without it.\r\n\r\nFor me, Payload failed to start since the server didn't have network access to register the mock email.\r\n\r\nI ended up patching in [this diff](https://github.com/payloadcms/payload/compare/master...wkillerud:payload:feat/disable-email?expand=1) locally, and it seems to be running OK from my limited testing on a fresh install.\r\n\r\nIf you'd like I can open a PR with the above diff and some documentation. Some feedback on what you'd like to see covered by tests would be helpful :) "
      }
    ]
  },
  {
    "title": "Automatically regenerate media sizes",
    "body": "<p dir=\"auto\">This is a commonly asked topic and it just came up in Discord today, so I figured I would share a quick script that the team and I use for our Payload projects when we need something like WP's \"Regenerate Thumbnails\" plugin. Basically if you update your <code class=\"notranslate\">imageSizes</code> and want to automatically re-run the image transformations for each one of your uploads, this can be super handy.</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const payload = require('payload');\nconst path = require('path');\n\nrequire('dotenv').config();\n\nconst { PAYLOAD_SECRET_KEY, MONGO_URL } = process.env;\n\npayload.init({\n  secret: PAYLOAD_SECRET_KEY,\n  mongoURL: MONGO_URL,\n  local: true,\n});\n\nconst regenerateMediaSizes = async () =&gt; {\n  try {\n    const media = await payload.find({\n      collection: 'media',\n      depth: 0,\n      limit: 300,\n    });\n    await Promise.all(media.docs.map(async (mediaDoc) =&gt; {\n      try {\n        const staticDir = path.resolve(__dirname, '../media');\n\n        await payload.update({\n          collection: 'media',\n          id: mediaDoc.id,\n          data: mediaDoc,\n          filePath: `${staticDir}/${mediaDoc.filename}`,\n          overwriteExistingFiles: true,\n        });\n\n        console.log(`Media ${mediaDoc.alt || mediaDoc.id} regenerated successfully`);\n      } catch (err) {\n        console.error(`Media ${mediaDoc.alt || mediaDoc.id} failed to regenerate`);\n        console.error(err);\n      }\n    }));\n  } catch (err) {\n    console.log('Unable to find documents with payload');\n    console.error(err);\n    process.exit(0);\n  }\n\n  console.log('Media size regeneration completed!');\n  process.exit(0);\n};\n\nregenerateMediaSizes();\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">payload</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'payload'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">path</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'path'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dotenv'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">config</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">PAYLOAD_SECRET_KEY</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">MONGO_URL</span> <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">secret</span>: <span class=\"pl-c1\">PAYLOAD_SECRET_KEY</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">mongoURL</span>: <span class=\"pl-c1\">MONGO_URL</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">local</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">regenerateMediaSizes</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">media</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">find</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">'media'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">depth</span>: <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">limit</span>: <span class=\"pl-c1\">300</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">await</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">all</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">media</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">docs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">staticDir</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">__dirname</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'../media'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n        <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">update</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n          <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">'media'</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">id</span>: <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">data</span>: <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">filePath</span>: <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">staticDir</span><span class=\"pl-kos\">}</span></span>/<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">filename</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">overwriteExistingFiles</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Media <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">alt</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">}</span></span> regenerated successfully`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Media <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">alt</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">}</span></span> failed to regenerate`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Unable to find documents with payload'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exit</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Media size regeneration completed!'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exit</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">regenerateMediaSizes</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">If you save this file as <code class=\"notranslate\">regenerateMediaSizes.js</code>, then all you need to do to run it is <code class=\"notranslate\">node ./regenerateMediaSizes.js</code> and boom.</p>\n<p dir=\"auto\">Related: <a aria-label=\"Discussion #434\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3864145\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/434\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/434/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/434\">#434</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1834",
    "id": "1834",
    "createdAt": "2023-01-09T19:32:34Z",
    "upvotes": 3,
    "commentTotal": 1,
    "author": {
      "name": "jmikrut",
      "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
      "url": "https://github.com/jmikrut"
    },
    "comments": [
      {
        "author": "fabioquarantini",
        "body": "How to delete old unused thumbnails?"
      }
    ]
  },
  {
    "title": "Extending type for GrahQL",
    "body": "<p dir=\"auto\">Hello all,</p>\n<p dir=\"auto\">I read about the \"Adding your own Queries and Mutations\" but I didn't find any explanation about extending an existing type.<br>\nFor example, I have collection called product where I have shopifyId field.<br>\nI would like to be able to update the product query to able to have a node \"shopify\"</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  products {\n    shopifyId\n    shopify {\n      price\n    }\n  }\n}\"><pre lang=\"graqhql\" class=\"notranslate\"><code class=\"notranslate\">{\n  products {\n    shopifyId\n    shopify {\n      price\n    }\n  }\n}\n</code></pre></div>\n<p dir=\"auto\">Do you have way?</p>\n<p dir=\"auto\">I was thinking to override the schema, I found the <a href=\"https://github.com/payloadcms/payload/blob/145e1db05db0e71149ba74e95764970dfdfd8b6b/src/graphql/registerSchema.ts#L75\">code</a> but we should provide a way to merge the schema using for example <a href=\"https://the-guild.dev/graphql/tools/docs/schema-merging\" rel=\"nofollow\">@graphql-tools/merge</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2036",
    "id": "2036",
    "createdAt": "2023-02-07T20:38:10Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "b-barry",
      "avatar": "https://avatars.githubusercontent.com/u/3358788?u=dbf460474df3382f575e67cfad41ba0387d6401b&v=4",
      "url": "https://github.com/b-barry"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @b-barry — you should not directly modify the auto-generated GraphQL types, but what you're doing should be possible by adding a field to your config itself. You can then set `admin.disabled: true` on the field to have it hide from the admin UI entirely. And then you could fill the field's value dynamically with hooks / similar, therefore treating it as a \"virtual field\". We have a demo of this coming out shortly, so keep an eye out!"
      }
    ]
  },
  {
    "title": "Payload doesn't start up",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n\n<p dir=\"auto\">Trying to start the project after using <code class=\"notranslate\">npx create-payload-app</code> inside a docker image (node:18-alpine) is impossible. The project does not start.</p>\n<p dir=\"auto\">this is the docs that I'm using <a href=\"https://payloadcms.com/docs/getting-started/installation\" rel=\"nofollow\">https://payloadcms.com/docs/getting-started/installation</a></p>\n<p dir=\"auto\">Is there something I'm doing wrong?, thanks for your help guys.</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n\n<ol dir=\"auto\">\n<li>Initialize docker container (node:18-alpine)</li>\n<li>Run <code class=\"notranslate\">npx create-payload-app</code></li>\n<li>Install completes successfully</li>\n<li>Run <code class=\"notranslate\">yarn dev</code></li>\n<li>Project doesn't start.</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n\n<p dir=\"auto\">** Log using nodemon: **</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/home/node/app # npx create-payload-app\nNeed to install the following packages:\n  create-payload-app@0.3.24\nOk to proceed? (y) y\n\n  Welcome to Payload. Let's create a project! \n\n✔ Project name? … payload-cms\n✔ Choose project template › blog\n✔ Enter MongoDB connection … mongodb://secret:secretpass@mongodb:27017/payload?authSource=admin \n\n  Creating a new Payload app in /home/node/app/payload-cms\n\n✔ Project directory created\n✔ Dependencies installed\n✔ .env file created\n✔ Payload project successfully created\n\n  ★ Launch Application:\n\n    - cd ./payload-cms\n    - yarn dev\n\n  ★ Documentation:\n\n    - Getting Started: https://payloadcms.com/docs/getting-started/what-is-payload\n    - Configuration: https://payloadcms.com/docs/configuration/overview\n\n\nnpm notice \nnpm notice New minor version of npm available! 9.3.1 -&gt; 9.4.1\nnpm notice Changelog: https://github.com/npm/cli/releases/tag/v9.4.1\nnpm notice Run npm install -g npm@9.4.1 to update!\nnpm notice \n/home/node/app # cd ./payload-cms\n/home/node/app/trnds-cms # yarn dev\nyarn run v1.22.19\n$ cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts nodemon\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: ts\n[nodemon] starting `ts-node src/server.ts`\n[nodemon] app crashed - waiting for file changes before starting...\"><pre class=\"notranslate\"><code class=\"notranslate\">/home/node/app # npx create-payload-app\nNeed to install the following packages:\n  create-payload-app@0.3.24\nOk to proceed? (y) y\n\n  Welcome to Payload. Let's create a project! \n\n✔ Project name? … payload-cms\n✔ Choose project template › blog\n✔ Enter MongoDB connection … mongodb://secret:secretpass@mongodb:27017/payload?authSource=admin \n\n  Creating a new Payload app in /home/node/app/payload-cms\n\n✔ Project directory created\n✔ Dependencies installed\n✔ .env file created\n✔ Payload project successfully created\n\n  ★ Launch Application:\n\n    - cd ./payload-cms\n    - yarn dev\n\n  ★ Documentation:\n\n    - Getting Started: https://payloadcms.com/docs/getting-started/what-is-payload\n    - Configuration: https://payloadcms.com/docs/configuration/overview\n\n\nnpm notice \nnpm notice New minor version of npm available! 9.3.1 -&gt; 9.4.1\nnpm notice Changelog: https://github.com/npm/cli/releases/tag/v9.4.1\nnpm notice Run npm install -g npm@9.4.1 to update!\nnpm notice \n/home/node/app # cd ./payload-cms\n/home/node/app/trnds-cms # yarn dev\nyarn run v1.22.19\n$ cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts nodemon\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: ts\n[nodemon] starting `ts-node src/server.ts`\n[nodemon] app crashed - waiting for file changes before starting...\n</code></pre></div>\n<p dir=\"auto\"><strong>log using: ts-node with npx</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/home/node/app/payload-cms # npx ts-node ./src/server.ts\nIllegal instruction\"><pre class=\"notranslate\"><code class=\"notranslate\">/home/node/app/payload-cms # npx ts-node ./src/server.ts\nIllegal instruction\n</code></pre></div>\n<p dir=\"auto\"><strong>Log using: ts-node without npx</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/home/node/app/payload-cms # ts-node ./src/server.ts\nIllegal instruction\"><pre class=\"notranslate\"><code class=\"notranslate\">/home/node/app/payload-cms # ts-node ./src/server.ts\nIllegal instruction\n</code></pre></div>\n\n<h4 dir=\"auto\">src/server.ts</h4>\n<p dir=\"auto\">After remove payload.init from <code class=\"notranslate\">server.ts</code> the project starts. Which makes me think that the error could be related to the payload npm package. <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">🤔</g-emoji></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import express from 'express';\nimport payload from 'payload';\n\nrequire('dotenv').config();\nconst app = express();\n\n// Redirect root to Admin panel\napp.get('/', (_, res) =&gt; {\n  res.redirect('/admin');\n});\n\nconst start = async () =&gt; {\n  // Initialize Payload\n  // await payload.init({\n  //   secret: process.env.PAYLOAD_SECRET,\n  //   mongoURL: process.env.MONGODB_URI,\n  //   express: app,\n  //   onInit: async () =&gt; {\n  //     payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`)\n  //   },\n  // })\n\n  // Add your own express routes here\n\n  app.listen(3000);\n}\n\nstart();\n\n\"><pre class=\"notranslate\"><code class=\"notranslate\">import express from 'express';\nimport payload from 'payload';\n\nrequire('dotenv').config();\nconst app = express();\n\n// Redirect root to Admin panel\napp.get('/', (_, res) =&gt; {\n  res.redirect('/admin');\n});\n\nconst start = async () =&gt; {\n  // Initialize Payload\n  // await payload.init({\n  //   secret: process.env.PAYLOAD_SECRET,\n  //   mongoURL: process.env.MONGODB_URI,\n  //   express: app,\n  //   onInit: async () =&gt; {\n  //     payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`)\n  //   },\n  // })\n\n  // Add your own express routes here\n\n  app.listen(3000);\n}\n\nstart();\n\n\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2033",
    "id": "2033",
    "createdAt": "2023-02-06T23:47:42Z",
    "upvotes": 1,
    "commentTotal": 3,
    "author": {
      "name": "mauroencinas",
      "avatar": "https://avatars.githubusercontent.com/u/32255583?v=4",
      "url": "https://github.com/mauroencinas"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @mauroencinas — this should be doable. I'd try and start your process manually, outside of `nodemon`, to see if you can get a better error log. Run `ts-node src/server.ts` and see what you get. Let us know!"
      },
      {
        "author": "mauroencinas",
        "body": "> Hey @mauroencinas — this should be doable. I'd try and start your process manually, outside of `nodemon`, to see if you can get a better error log. Run `ts-node src/server.ts` and see what you get. Let us know!\r\n\r\nThank you very much @jmikrut , you are very kind for your recommendation, I tried to do what you told me, and the result is `Illegal Instruction`, I tried the command with and without npx"
      },
      {
        "author": "jmikrut",
        "body": "OK. this is then likely not an issue with Payload and something that you should research regarding your Node 18 Docker image. I bet it has something to do with one of Payload's dependencies. Can you attempt to use another Docker image?\r\n\r\nI will convert this to a discussion as there is likely nothing that Payload can be done to fix this, although I'm happy to continue to help!"
      }
    ]
  },
  {
    "title": "Custom controlled relationship field",
    "body": "<p dir=\"auto\">Hello!</p>\n<p dir=\"auto\">I want to create controlled relationship field with buttons to fill in the data quickly. As I understand I need to use useField() hook and etc.</p>\n<p dir=\"auto\">But...I can't render this code:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n      name: &quot;value&quot;,\n      type: &quot;relationship&quot;,\n      relationTo: &quot;countries&quot;,\n      hasMany: true,\n      admin: {\n        components: {\n          Field: (props) =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField\n                name={props.name}\n                relationTo={props.relationTo}\n                hasMany={props.hasMany}\n              /&gt;\n            );\n          },\n        },\n      },\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n      name: \"value\",\n      type: \"relationship\",\n      relationTo: \"countries\",\n      hasMany: true,\n      admin: {\n        components: {\n          Field: (props) =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField\n                name={props.name}\n                relationTo={props.relationTo}\n                hasMany={props.hasMany}\n              /&gt;\n            );\n          },\n        },\n      },\n    }\n</code></pre></div>\n<p dir=\"auto\">Just getting this error (\"<strong>No suitable field was found for \"Value\"</strong>\"):<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/614922/214333619-43f8a581-42f5-4e0a-b09f-cc8064051321.png\"><img src=\"https://user-images.githubusercontent.com/614922/214333619-43f8a581-42f5-4e0a-b09f-cc8064051321.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">If I change field type to UI:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n      name: &quot;value&quot;,\n      type: &quot;ui&quot;,\n      admin: {\n        components: {\n          Field: () =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField name=&quot;value&quot; relationTo=&quot;countries&quot; hasMany /&gt;\n            );\n          },\n        },\n      },\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n      name: \"value\",\n      type: \"ui\",\n      admin: {\n        components: {\n          Field: () =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField name=\"value\" relationTo=\"countries\" hasMany /&gt;\n            );\n          },\n        },\n      },\n    }\n</code></pre></div>\n<p dir=\"auto\">I can properly render it without errors, but ofc the value isn't stored at DB after update:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/614922/214334387-482e4cf5-73db-4e5f-8af1-2b550f2d101c.png\"><img src=\"https://user-images.githubusercontent.com/614922/214334387-482e4cf5-73db-4e5f-8af1-2b550f2d101c.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Can you please help me with this problem? Thanks in advance!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1944",
    "id": "1944",
    "createdAt": "2023-01-24T15:23:58Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "Kikky",
      "avatar": "https://avatars.githubusercontent.com/u/614922?v=4",
      "url": "https://github.com/Kikky"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "@Kikky what you need to do here is set the field type to `text` and render your custom relationship field as a custom component, similar to your second example but like this:\r\n\r\n```ts\r\n{\r\n  name: \"value\",\r\n  type: \"text\",\r\n  admin: {\r\n    components: {\r\n      Field: () => {\r\n         // render anything you want here, including the Payload relationship component\r\n         // interact with form state as needed using form hooks\r\n         // then, save your relationship ID as a string to this text field using field hooks\r\n      }\r\n    },\r\n  },\r\n}\r\n```\r\n\r\nGive this a shot and let me know how it goes 👍 "
      }
    ]
  },
  {
    "title": "Add the table list component to the relationship field",
    "body": "<p dir=\"auto\">Having the option to display documents in a relationship field in the table list component would be incredibly useful for fields with a large number of relationships, allowing for easy viewing and management (when bulk operations are added) of the contained information.</p>\n<p dir=\"auto\">Now, relationship fields that contain relationships from multiple collections that have different datasets could get messy, so it should be only allowed to be used on relationship fields that pull from one collection, or where the collections share an arbitrary minimum number of fields other than <code class=\"notranslate\">_id</code>. Some relationship fields this could be used on would be wholesale and retail orders, user role based profiles, and products in different categories that share a common parent category.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    {\n      name: 'relationshipField',\n      type: 'relationship',\n      relationTo: 'collectionSlug',\n      required: true,\n      hasMany: true,\n      admin:{\n        **display:'table/relationship',**\n    },\"><pre class=\"notranslate\"><code class=\"notranslate\">    {\n      name: 'relationshipField',\n      type: 'relationship',\n      relationTo: 'collectionSlug',\n      required: true,\n      hasMany: true,\n      admin:{\n        **display:'table/relationship',**\n    },\n</code></pre></div>\n<p dir=\"auto\">The default values of the <code class=\"notranslate\">admin:display</code> option would dynamically change based on the <code class=\"notranslate\">hasMany</code> flag and the type value of the <code class=\"notranslate\">relationTo</code> field. If <code class=\"notranslate\">hasMany</code> is set to <code class=\"notranslate\">true</code>, and <code class=\"notranslate\">relationTo</code> is a <code class=\"notranslate\">string</code> then it should default to the table list, all others should default to the current relationship field. If <code class=\"notranslate\">hasMany</code> is set to <code class=\"notranslate\">true</code> but <code class=\"notranslate\">relationTo</code> is an array, having display set to <code class=\"notranslate\">table</code> should throw an error if the data structure of the collections doesn't match at least X fields other than <code class=\"notranslate\">_id</code>.</p>\n<p dir=\"auto\">If <code class=\"notranslate\">hasMany</code> is set to <code class=\"notranslate\">true</code> and <code class=\"notranslate\">relationTo</code> is an array, the columns that can be shown in the table should be limited to only the fields the two collections have in common.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2023",
    "id": "2023",
    "createdAt": "2023-02-06T16:37:48Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "ToneseekerMusical",
      "avatar": "https://avatars.githubusercontent.com/u/105748910?v=4",
      "url": "https://github.com/ToneseekerMusical"
    },
    "comments": []
  },
  {
    "title": "Allow Rest queries to use Pagination true or false option [Performance] !",
    "body": "<p dir=\"auto\">hi,<br>\ncurrently pagination is always on for rest queries, for queries like these using qs package <a href=\"https://payloadcms.com/docs/queries/overview\" rel=\"nofollow\">https://payloadcms.com/docs/queries/overview</a><br>\ni request that we should be able to send a query with pagination flag on / off like below, this should not run countDocuments.</p>\n<p dir=\"auto\">doing this we can improve the performance multifold for rest queries</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" const stringifiedQuery = qs.stringify(\n    { where: someQuery, limit: 5, pagination: false },\n    { addQueryPrefix: true },\n  )\"><pre class=\"notranslate\"><code class=\"notranslate\"> const stringifiedQuery = qs.stringify(\n    { where: someQuery, limit: 5, pagination: false },\n    { addQueryPrefix: true },\n  )\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2019",
    "id": "2019",
    "createdAt": "2023-02-05T21:28:27Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "geminigeek",
      "avatar": "https://avatars.githubusercontent.com/u/3751322?v=4",
      "url": "https://github.com/geminigeek"
    },
    "comments": []
  },
  {
    "title": "Expose Access Control to control UI elements in Custom Web App",
    "body": "<p dir=\"auto\">The Access Control that payload provides is excellent. And It is only consumed by the Admin UI.</p>\n<p dir=\"auto\">What if i want to consume it on my web app. similar to library like CASL.js or Casbin.js</p>\n<p dir=\"auto\">I don’t want to write access control twice what users can and cannot do.</p>\n<p dir=\"auto\">Define All the Access Control in Payload config and some how access these control policies in the front end eco-system to dynamic show/hide ui element depending on the user access similar to Admin UI of Payload CMS.</p>\n<p dir=\"auto\">Using Payload CMS as backend and use the same config to define what the users of the site can do in the front end.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2017",
    "id": "2017",
    "createdAt": "2023-02-05T07:47:29Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "mohammedmushtaq3",
      "avatar": "https://avatars.githubusercontent.com/u/58843133?u=5c376ec480fb3d8bb94dea3be2e51d1a8885a2cd&v=4",
      "url": "https://github.com/mohammedmushtaq3"
    },
    "comments": []
  },
  {
    "title": "Loading UI Enhancements",
    "body": "<p dir=\"auto\">At the moment, when uploading a file, there is no visual feedback for how long the upload will take, while the screen is locked on the file-upload modal. This is not a pleasant UX.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/10504064/192564510-00d42f8c-819a-43f5-b9be-11558f5d0836.png\"><img src=\"https://user-images.githubusercontent.com/10504064/192564510-00d42f8c-819a-43f5-b9be-11558f5d0836.png\" alt=\"afbeelding\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">I propose to not lock the screen to the model, but to go straight back to the entry-page and make use of those bars at the bottom of the page (like <g-emoji class=\"g-emoji\" alias=\"point_down\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f447.png\">👇</g-emoji>) to communicate the upload-progress.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/10504064/192565003-6841775f-4fe3-4958-98f9-c42d26ba6d23.png\"><img src=\"https://user-images.githubusercontent.com/10504064/192565003-6841775f-4fe3-4958-98f9-c42d26ba6d23.png\" alt=\"afbeelding\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">If you try to leave the page before the file is uploaded, you could give a warning.<br>\nIf you want to prevent bottleneck from uploading too many files at once, you could start queuing them if the amount goes over a certain threshold.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1180",
    "id": "1180",
    "createdAt": "2022-09-27T15:13:42Z",
    "upvotes": 6,
    "commentTotal": 3,
    "author": {
      "name": "bigmistqke",
      "avatar": "https://avatars.githubusercontent.com/u/10504064?u=86bbaba2d5167f72ab97edcbc6933f875b15919e&v=4",
      "url": "https://github.com/bigmistqke"
    },
    "comments": [
      {
        "author": "qivox",
        "body": "Generally having more loading indicators on the admin panel would be great. It sometimes feels a bit clunky changing routes or saving content for example."
      },
      {
        "author": "zubricks",
        "body": "Hey @bigmistqke progress bar for uploads is 100% on our radar, and we'll be marking this feature as `planned` right now."
      },
      {
        "author": "rjdjohnston",
        "body": "+1"
      }
    ]
  },
  {
    "title": "Oauth BeforeLogin hook redirects to `Already Logged In`",
    "body": "<p dir=\"auto\">Hey!</p>\n<p dir=\"auto\">I am not that sure if this is a bug on the side of plugin code or payload, but maybe you will have some hints.</p>\n<p dir=\"auto\">In the plugin code, after successful oAuth I <code class=\"notranslate\">setToken</code> from <code class=\"notranslate\">useAuth</code> hook and then I use <code class=\"notranslate\">useNavigate</code> to navigate to <code class=\"notranslate\">admin</code> page.</p>\n<p dir=\"auto\">What I get is the screen below:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/92296835/199944719-9ed36beb-a892-4051-b7cb-c5a6fdae1016.png\"><img src=\"https://user-images.githubusercontent.com/92296835/199944719-9ed36beb-a892-4051-b7cb-c5a6fdae1016.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">clicking <code class=\"notranslate\">Back to Dashboard</code> works okay, so I am logged in and whole process was successful. However, for some reason the initial redirect kind of recognizes that I am logged in, but still implies that I am trying to do that again.</p>\n<p dir=\"auto\">If you have an idea if this might me my plugin-specific behaviour, or some Payload feature clashing with the hook, I would be very keen to get any type of feedback!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1347",
    "id": "1347",
    "createdAt": "2022-11-04T09:56:47Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "adam-mrozik",
      "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
      "url": "https://github.com/adam-mrozik"
    },
    "comments": [
      {
        "author": "DanRibbens",
        "body": "Were you able to figure out what was going on in your plugin? I don't think it is a Payload specific issue.\r\n\r\nWhat you might be up against is that the user object isn't being updated in Payload. There isn't method on the auth provider to do this. I think what typically would happen is that you have a full redirect or page load to update the user coming from the 3rd party auth provider.\r\n\r\nI hope that helps! "
      }
    ]
  },
  {
    "title": "Collection BeforeChange Hook - acess to auto-generated ID",
    "body": "<p dir=\"auto\">Hi,<br>\nI would ask if there is a smart way to access payload generated <code class=\"notranslate\">ID</code> for collection in <code class=\"notranslate\">CollectionBeforeChangeHook</code>?</p>\n<p dir=\"auto\">Because right now, imagine the situation:</p>\n<ul dir=\"auto\">\n<li>Collection <code class=\"notranslate\">Users</code> has relation to collection <code class=\"notranslate\">BankAccount</code> and in opposite way relation also exist. It is one to one always.</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Users{\n userId: &lt;payloadGenerated&gt;\n bankAccountId: &lt;idFromBankCollection&gt;\n}\n\nBankAccount{\n bankAccoutnId: &lt;payloadGenerated&gt;\n owner: &lt;idFromUserCollection&gt;\n}\"><pre class=\"notranslate\"><span class=\"pl-v\">Users</span><span class=\"pl-kos\">{</span>\n <span class=\"pl-s1\">userId</span>: <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">payloadGenerated</span><span class=\"pl-c1\">&gt;</span>\n bankAccountId: <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">idFromBankCollection</span><span class=\"pl-c1\">&gt;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">BankAccount</span><span class=\"pl-kos\">{</span>\n <span class=\"pl-s1\">bankAccoutnId</span>: <span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">payloadGenerated</span><span class=\"pl-c1\">&gt;</span>\n <span class=\"pl-s1\">owner</span>: <span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">idFromUserCollection</span><span class=\"pl-c1\">&gt;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">For that case, I need two hooks:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">CollectionBeforeChange</code> on <code class=\"notranslate\">Users</code> to create as local API <code class=\"notranslate\">BankAccount document</code> and populate in <code class=\"notranslate\">Users</code> <code class=\"notranslate\">bankAccountId</code>.</li>\n<li><code class=\"notranslate\">CollectionAfterChange</code> on <code class=\"notranslate\">Users</code> to find and update as local API <code class=\"notranslate\">BankAccount document</code> with <code class=\"notranslate\">userId</code>.</li>\n</ul>\n<p dir=\"auto\">That is because in <code class=\"notranslate\">CollectionBeforeChangeHook</code> there is no pre-generated access to ID for not created yet User document. So is there a way to do it in a smarter way? Write own generation for ID on Users, and then use just one hook? But then I need own validations for checking if id is already existing?</p>\n<p dir=\"auto\">Maybe someone has better idea how to proceed with such cases? Or should I avoid bi-directional relations, and simple embedding them on users?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1962",
    "id": "1962",
    "createdAt": "2023-01-28T12:28:18Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "dawidmachon",
      "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
      "url": "https://github.com/dawidmachon"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "@dawidmachon you're right in that if the operation is `create`, there is not yet an ID to use. Your solution looks fine to me, does it work? Just to sum it up:\r\n1. Before a user is created, create a bank account and attach the `bankAccountId` to the user\r\n1. After a user is created, lookup their bank account and update the `owner` with their `userId`\r\n\r\nThis will work for that initial connection but updates on either end of the relationship will also need to be wired in—and this may lead to infinite loops. There are ways around this, like maintaining a hidden `skipHooks` field on the collection, I've done something similar to this in our [Stripe plugin](https://github.com/payloadcms/plugin-stripe/blob/13ed91f0406341cd534e3c15555fe3f3224a7b61/src/hooks/syncExistingWithStripe.ts#L34). Others have run into this same need, though, and there's a community-supported plugin if you want to check it out: https://github.com/TimHal/pcms-backpop. I have not tested this myself but it might work for you 👍 "
      }
    ]
  },
  {
    "title": "BUG! cannot update draft",
    "body": "<h3 dir=\"auto\">The introduction to modifying the draft in the document is too simple, only adding a parameter of draft=true, can you provide a complete code example of modifying the draft?</h3>\n<h3 dir=\"auto\">After the update operation, the document changed from draft state to published, which is not what I expected, I just want to update the fields</h3>\n<p dir=\"auto\"><a href=\"https://payloadcms.com/docs/versions/drafts#database-changes\" rel=\"nofollow\">draft doc</a></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"await payload.update({\n  draft: true,\n  collection: 'articles',\n  id: xxx,\n  data: {\n    migratedFromContentful: false\n  },\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">await payload.update({\n  draft: true,\n  collection: 'articles',\n  id: xxx,\n  data: {\n    migratedFromContentful: false\n  },\n});\n</code></pre></div>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/195586694-a59acc6f-9bb8-48bf-a75c-4b42f8c962b8.png\"><img width=\"1026\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/195586694-a59acc6f-9bb8-48bf-a75c-4b42f8c962b8.png\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1251",
    "id": "1251",
    "createdAt": "2022-10-13T11:40:53Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "Hey @zhounewz is this still an issue for you? Your request looks right to me, I see that you're setting `draft: true` just as the docs indicate. What version of Payload are you on? Try bumping to latest and let me know if this persists."
      }
    ]
  },
  {
    "title": "Can the entry generated by the Duplicate operation be specified as draft state?",
    "body": "<p dir=\"auto\">Can the entry generated by the Duplicate operation be specified as draft state?</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/196084656-cd7fc768-51d0-4374-bd0e-54237954ae84.png\"><img width=\"406\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/196084656-cd7fc768-51d0-4374-bd0e-54237954ae84.png\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1268",
    "id": "1268",
    "createdAt": "2022-10-17T03:43:00Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": "DanRibbens",
        "body": "Hi @zhounewz, this is now possible using the `beforeDuplicate` [admin hook](https://payloadcms.com/docs/configuration/collections#admin-hooks).\r\n\r\nHere is an example of how this would look in your case:\r\n\r\n```ts\r\nconst Posts: CollectionConfig = {\r\n  slug: 'posts',\r\n  admin: {\r\n    hooks: {\r\n      beforeDuplicate: ({ data }) => {\r\n        return {\r\n          ...data,\r\n          _status: 'draft',\r\n        };\r\n      },\r\n    },\r\n  },\r\n  versions: {\r\n    drafts: true,\r\n  },\r\n  fields: [\r\n    // ...\r\n  ],\r\n};\r\n```\r\n\r\nCheers!"
      }
    ]
  },
  {
    "title": "Question: Is there a recommended approach to split deployments?",
    "body": "<p dir=\"auto\">Hi all,</p>\n<p dir=\"auto\">Is there a recommended approach to split deployments, i.e. a separate deployment for Admin and API?</p>\n<p dir=\"auto\"><strong>Approaches we've considered</strong>:</p>\n<ul dir=\"auto\">\n<li>Use the <code class=\"notranslate\">disable</code> properties for Admin and GraphQL (but we weren't sure how to disable the REST API...)</li>\n<li>Disabling <a href=\"https://payloadcms.com/docs/access-control/overview\" rel=\"nofollow\">top level access</a> on internal deployment</li>\n</ul>\n<p dir=\"auto\"><strong>Use case</strong>:<br>\nMy team wants to externally expose the Admin panel, but keep the API internal—because our app hits a service that pulls from the CMS internally (+ Cloud CDN caching).</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1220",
    "id": "1220",
    "createdAt": "2022-10-07T15:16:13Z",
    "upvotes": 2,
    "commentTotal": 1,
    "author": {
      "name": "andwrobs",
      "avatar": "https://avatars.githubusercontent.com/u/101012384?u=056a2c228ce165f05991ca18b9a501c12cc32e9d&v=4",
      "url": "https://github.com/andwrobs"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Yes, you can—Payload's admin UI gets built to the `build` folder, and if you place all of those files on a separate host, you can deploy them separately. Just make sure you have the proper `serverURL` set, pointing at the backend API location, when you build the admin panel files. 👍  "
      }
    ]
  },
  {
    "title": "Can you specify the scope of other Documents, because I don't want to have articles embedded in articles",
    "body": "<h3 dir=\"auto\">Can you specify the scope of other Documents, because I don't want to have articles embedded in articles</h3>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/196903042-040d91bd-8faf-49f2-8122-5ca32642eb93.png\"><img width=\"814\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/196903042-040d91bd-8faf-49f2-8122-5ca32642eb93.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/196903096-93ff4c03-5467-4480-a6d8-36d071ac1e4c.png\"><img width=\"840\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/196903096-93ff4c03-5467-4480-a6d8-36d071ac1e4c.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a href=\"https://payloadcms.com/docs/fields/rich-text#relationship-element\" rel=\"nofollow\">https://payloadcms.com/docs/fields/rich-text#relationship-element</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1281",
    "id": "1281",
    "createdAt": "2022-10-20T09:12:14Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Yes, you can use the `admin.enableRichTextRelationship` property. Set it to false for any collection you don't want to be able to link to.  \r\n\r\nRight now, rich text uploads offer a bit more granularity here, as you can specifically whitelist collections to be able to select from on a field-by-field basis. But in the future we should be able to add more granularity to do this with rich text relationships too. 👍 "
      }
    ]
  },
  {
    "title": "How to construct \"not like\" logic with graphql api?",
    "body": "<p dir=\"auto\">Currently, I only see these operators in the query filter.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/5801015/197687694-bd77de56-af68-4fd2-91d5-24c8b3c48ca9.png\"><img width=\"910\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5801015/197687694-bd77de56-af68-4fd2-91d5-24c8b3c48ca9.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">I'm expecting sth like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"slug: {\n  not: {\n    contains: &quot;demo&quot;\n  }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">slug: {\n  not: {\n    contains: \"demo\"\n  }\n}\n</code></pre></div>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/5801015/197688044-23a5ebc9-8fbc-4a56-a3b7-562c548e7be0.png\"><img width=\"874\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5801015/197688044-23a5ebc9-8fbc-4a56-a3b7-562c548e7be0.png\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1294",
    "id": "1294",
    "createdAt": "2022-10-25T05:13:16Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @Stupidism — we don't currently have an operator that could represent `not like` but it could definitely be built. If you're up for making a PR, we would happily accept it!"
      }
    ]
  },
  {
    "title": "Relationship field and array limit - Errors: 429 (Too Many Requests) and 431 (Request Header Fields Too Large)",
    "body": "<p dir=\"auto\">Hello,</p>\n<p dir=\"auto\">Is there a limit to how many item can be in a Relationship and Array fields?</p>\n<p dir=\"auto\">For 260+ items in a relationship field I am getting the <strong>431 (Request Header Fields Too Large)</strong> error.</p>\n<p dir=\"auto\">And also, if I create an array component with a relationship field as the only field, I am getting the <strong>429 (Too Many Requests)</strong> error.</p>\n<p dir=\"auto\">Is there a way to have 300+ items within a relationship field or in the array component with a single relationship field?</p>\n<p dir=\"auto\">Thank you,<br>\nVitaly</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1977",
    "id": "1977",
    "createdAt": "2023-01-30T20:09:07Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "vstarush",
      "avatar": "https://avatars.githubusercontent.com/u/10617969?v=4",
      "url": "https://github.com/vstarush"
    },
    "comments": [
      {
        "author": "DanRibbens",
        "body": "Hey @vstarush,\r\n\r\nI haven't tested with as many as you're saying so I haven't seen this before. Payload doesn't impose any limits, so what you're seeing must be a browser / http limitation.\r\n\r\nWhat is the endpoint is hitting this header size limit error? Can you share what the request looks like from your browser network tab and we can troubleshoot and possibly optimize how the request is made.\r\n\r\nAlso sharing your payload config or a reproduction repo can also help me understand what you're trying to model and we can come up with a workaround.\r\n\r\nThanks!"
      }
    ]
  },
  {
    "title": "Static options are ignored using plugin-cloud-storage",
    "body": "<p dir=\"auto\">Hi! First of all: thank you very much for this great product!</p>\n<p dir=\"auto\">I am using the <code class=\"notranslate\">plugin-cloud-storage</code> (+ gcp adapter) plugin and I noticed that the static options of my <code class=\"notranslate\">Media</code> model are being ignored. Any idea? (I'm trying to enable the cache headers)</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1486",
    "id": "1486",
    "createdAt": "2022-11-22T16:06:29Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "krthr",
      "avatar": "https://avatars.githubusercontent.com/u/18665740?u=004b6812260918c5e365cc040fcea97ddfa1382b&v=4",
      "url": "https://github.com/krthr"
    },
    "comments": [
      {
        "author": "denolfe",
        "body": "Can you provide your media config?"
      }
    ]
  },
  {
    "title": "Better ordering of groups of globals & collections",
    "body": "<p dir=\"auto\">Really appreciate the recently added feature to set a custom <code class=\"notranslate\">group</code> values on collections and globals! This alone already allows organizing collections &amp; globals into more meaningful &amp; user-friendly groups.</p>\n<p dir=\"auto\">The last piece missing for us to make the overall organization perfect is the sorting order across collections &amp; globals. It looks like the order of groups is currently defined by the order in which collections &amp; globals as passed into the payload config. Where this falls short is if we want e.g. a group of globals at the top.</p>\n<p dir=\"auto\">A practical example:</p>\n<ul dir=\"auto\">\n<li>Layout\n<ul dir=\"auto\">\n<li>Header <em>(global)</em></li>\n<li>Footer <em>(global)</em></li>\n<li>Homepage <em>(global)</em></li>\n</ul>\n</li>\n<li>Catalogs\n<ul dir=\"auto\">\n<li>Catalog Type A <em>(collection)</em></li>\n<li>Catalog Type B <em>(collection)</em></li>\n</ul>\n</li>\n<li>Content\n<ul dir=\"auto\">\n<li>Some Other Global <em>(global)</em></li>\n<li>Some Other Collection <em>(collection)</em></li>\n</ul>\n</li>\n<li>…</li>\n</ul>\n<p dir=\"auto\">This currently does not seem supported, outside of creating a custom navbar component just for this.</p>\n<p dir=\"auto\">Some potential approaches how this could be achieved:</p>\n<ul dir=\"auto\">\n<li>A new global payload config entry, e.g. <code class=\"notranslate\">admin.groups</code> or <code class=\"notranslate\">admin.knownGroups</code> of type <code class=\"notranslate\">string[]</code>\n<ul dir=\"auto\">\n<li>this would specify the primary order of groups; if a group ends up with no collections, it can be skipped.</li>\n<li>if collections are listed with a group not in the list, they get appended</li>\n<li>might be the easiest add, but it does not allow for granular intra-group ordering (e.g. a group with a global, a collection, and then another global, in this order)</li>\n</ul>\n</li>\n<li>A new entry on collections &amp; globals, e.g. <code class=\"notranslate\">admin.sort</code> or <code class=\"notranslate\">admin.order</code> of type <code class=\"notranslate\">number</code>\n<ul dir=\"auto\">\n<li>would allow for perfect, granular control over sorting orders across all types</li>\n<li>would also be a bit ugly to maintain, as weights are spread across collections &amp; globals</li>\n</ul>\n</li>\n<li>Migrating from separate <code class=\"notranslate\">collections</code> vs <code class=\"notranslate\">globals</code> arrays on the payload config into a single  entry, e.g. <code class=\"notranslate\">schemas</code>\n<ul dir=\"auto\">\n<li>this array would then define the order of all collections/entries in a single place</li>\n<li>does break the current schema, but could be done in a backwards-compatible way</li>\n<li>would require some extra <code class=\"notranslate\">global</code> flag on collections vs globals to differentiate the two</li>\n<li>would definitely muddy the water for the payload config while backwards compatibility is maintained</li>\n</ul>\n</li>\n</ul>",
    "url": "https://github.com/payloadcms/payload/discussions/1277",
    "id": "1277",
    "createdAt": "2022-10-19T13:13:57Z",
    "upvotes": 4,
    "commentTotal": 2,
    "author": {
      "name": "echocrow",
      "avatar": "https://avatars.githubusercontent.com/u/5488190?u=2d7f2f58b5cc9d5848cd0e0226f70512ceea6bd8&v=4",
      "url": "https://github.com/echocrow"
    },
    "comments": [
      {
        "author": "echocrow",
        "body": "Happy to help out with this btw! But would like some guidance on the approach first.\r\n\r\nAssuming no refactors along the lines of merging collections and globals are planned, I reckon a simple `admin.groups` `string[]` property on the config might be a simple, incremental feature, and potentially a good first issue?"
      },
      {
        "author": "ChrisGV04",
        "body": "This would be really useful to order the collections and globals in a meaningful way. It's kind of odd in some cases where we can't order the items in a group to match the logical way we would expect to find them in.\r\n\r\nIs there any news on this topic?"
      }
    ]
  },
  {
    "title": "support superjson transformer",
    "body": "<p dir=\"auto\">When serializing data sent from payload, it would be great to add a custom transformer, like <a href=\"https://github.com/blitz-js/superjson\"><code class=\"notranslate\">superjson</code></a>. Is this currently possible?</p>\n<p dir=\"auto\">I think it's possible to pass <code class=\"notranslate\">superjson</code> and the <a href=\"https://expressjs.com/en/api.html\" rel=\"nofollow\">revive argument to JSON.parse</a>, but I'm not sure if payload exposes the stringify method.</p>\n<p dir=\"auto\">Thank you</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2008",
    "id": "2008",
    "createdAt": "2023-02-02T21:39:01Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "charkour",
      "avatar": "https://avatars.githubusercontent.com/u/33156025?u=9a8734e319690ab1a56112fa9414693f5b6adad3&v=4",
      "url": "https://github.com/charkour"
    },
    "comments": []
  },
  {
    "title": "generate:types hangs forever after successly writing into output file",
    "body": "<p dir=\"auto\">It just hangs forever</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n&gt; nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types for Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts\"><pre class=\"notranslate\">PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n<span class=\"pl-k\">&gt;</span> nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types <span class=\"pl-k\">for</span> Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts</pre></div>\n<p dir=\"auto\">I don't know the reason this happened yet. Maybe it's because I'm using ts-node.</p>\n<h1 dir=\"auto\">Workaround</h1>\n<ol dir=\"auto\">\n<li>Open the binary file :</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"code node_modules/payload/dist/bin/generateTypes.js\"><pre class=\"notranslate\"><code class=\"notranslate\">code node_modules/payload/dist/bin/generateTypes.js\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Add an exit command:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\"><pre class=\"notranslate\">        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Use <code class=\"notranslate\">patch-package</code> to persist the change</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npx patch-package payload\"><pre class=\"notranslate\"><code class=\"notranslate\">npx patch-package payload\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>You will get patch file for payload like this:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js\nindex 357e56d..f805a31 100644\n--- a/node_modules/payload/dist/bin/generateTypes.js\n+++ b/node_modules/payload/dist/bin/generateTypes.js\n@@ -393,6 +393,7 @@ function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\n     });\n }\n exports.generateTypes = generateTypes;\"><pre class=\"notranslate\"><span class=\"pl-c1\">diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js</span>\nindex 357e56d..f805a31 100644\n<span class=\"pl-md\">--- a/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mi1\">+++ b/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mdr\">@@ -393,6 +393,7 @@</span> function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span>\n     });\n }\n exports.generateTypes = generateTypes;</pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2003",
    "id": "2003",
    "createdAt": "2023-02-02T16:56:05Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": []
  },
  {
    "title": "generate:types hangs forever after successly writing into output file",
    "body": "<p dir=\"auto\">It just hangs forever</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n&gt; nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types for Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts\"><pre class=\"notranslate\">PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n<span class=\"pl-k\">&gt;</span> nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types <span class=\"pl-k\">for</span> Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts</pre></div>\n<p dir=\"auto\">I don't know the reason this happened yet. Maybe it's because I'm using ts-node.</p>\n<h1 dir=\"auto\">Workaround</h1>\n<ol dir=\"auto\">\n<li>Open the binary file :</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"code node_modules/payload/dist/bin/generateTypes.js\"><pre class=\"notranslate\"><code class=\"notranslate\">code node_modules/payload/dist/bin/generateTypes.js\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Add an exit command:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\"><pre class=\"notranslate\">        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Use <code class=\"notranslate\">patch-package</code> to persist the change</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npx patch-package payload\"><pre class=\"notranslate\"><code class=\"notranslate\">npx patch-package payload\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>You will get patch file for payload like this:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js\nindex 357e56d..f805a31 100644\n--- a/node_modules/payload/dist/bin/generateTypes.js\n+++ b/node_modules/payload/dist/bin/generateTypes.js\n@@ -393,6 +393,7 @@ function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\n     });\n }\n exports.generateTypes = generateTypes;\"><pre class=\"notranslate\"><span class=\"pl-c1\">diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js</span>\nindex 357e56d..f805a31 100644\n<span class=\"pl-md\">--- a/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mi1\">+++ b/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mdr\">@@ -393,6 +393,7 @@</span> function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span>\n     });\n }\n exports.generateTypes = generateTypes;</pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2002",
    "id": "2002",
    "createdAt": "2023-02-02T16:56:04Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": []
  },
  {
    "title": "Support Postgres for DB over MongoDB",
    "body": "<p dir=\"auto\">Postgres also support JSON data type<br>\nPostgres architecture is easy to deploy and maintain instead of clusters.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/654",
    "id": "654",
    "createdAt": "2022-06-14T15:11:07Z",
    "upvotes": 9,
    "commentTotal": 1,
    "author": {
      "name": "kaushalyap",
      "avatar": "https://avatars.githubusercontent.com/u/24698778?v=4",
      "url": "https://github.com/kaushalyap"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @kaushalyap — this is on our radar actually:\r\n\r\nhttps://github.com/payloadcms/payload/discussions/287\r\n\r\nWe are not committing to a timeframe, because it will involve some infrastructural changes, and it would require us to start thinking about things like migrations—but it is certainly on the radar.\r\n\r\nI will try and report back here if / when we have any updates for you!"
      }
    ]
  },
  {
    "title": "Could `upload.staticURL` be an absolute URL?",
    "body": "<p dir=\"auto\">As per code <a href=\"https://github.com/payloadcms/payload/blob/master/src/uploads/getBaseFields.ts\">here</a> and <a href=\"https://github.com/payloadcms/payload/blob/master/src/admin/hooks/useThumbnail.ts\">here</a> the <code class=\"notranslate\">staticURL</code> property is a segment of the final URL.</p>\n<p dir=\"auto\">This means that I cannot declare (in any way) a <code class=\"notranslate\">distribution</code>  URL (maybe behind CDN) where to make my media publicly available.</p>\n<p dir=\"auto\">For example, if I set the staticURL to <a href=\"https://my-media-dam.com\" rel=\"nofollow\">https://my-media-dam.com</a> the result will be <code class=\"notranslate\">http://localhost:3000https://my-media-dam.com/my-media-1.jpg</code> instead of <code class=\"notranslate\">https://my-media-dam.com/my-media-1.jpg</code></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2001",
    "id": "2001",
    "createdAt": "2023-02-02T14:31:16Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "finkinfridom",
      "avatar": "https://avatars.githubusercontent.com/u/6241121?u=4eb3163bccdda63312cce209a93e74364f624ad7&v=4",
      "url": "https://github.com/finkinfridom"
    },
    "comments": []
  },
  {
    "title": "Upload collection should allow providing a description/hint message for the upload field",
    "body": "<p dir=\"auto\">We use several <code class=\"notranslate\">upload</code>- based collections, one of which has a long list of available <code class=\"notranslate\">mimeTypes</code>.<br>\nUnfortunately, the users cannot know in advance which are the allowed types and we cannot provide a meaningful description of them.<br>\nCould be an option to have an <code class=\"notranslate\">hintText</code> or <code class=\"notranslate\">description</code> into <code class=\"notranslate\">admin.upload</code> object?</p>\n<p dir=\"auto\">Thanks</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1998",
    "id": "1998",
    "createdAt": "2023-02-02T10:08:35Z",
    "upvotes": 2,
    "commentTotal": 0,
    "author": {
      "name": "finkinfridom",
      "avatar": "https://avatars.githubusercontent.com/u/6241121?u=4eb3163bccdda63312cce209a93e74364f624ad7&v=4",
      "url": "https://github.com/finkinfridom"
    },
    "comments": []
  },
  {
    "title": "How to use internal links in Rich Text without overloading the client with data?",
    "body": "<p dir=\"auto\">Hello!</p>\n<p dir=\"auto\">I want to use the functionality of internal links to other documents in the project. This is very handy so that I don't lose links when the document slug changes or the URL structure changes, for example. But along with the required fields of the target page (urlSlug, title), I even get the whole Rich-text document on the client ... how can I bypass this to get only the required fields?</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/614922/215115243-9714fd06-d331-4b07-a8b7-56df68eb7a88.png\"><img src=\"https://user-images.githubusercontent.com/614922/215115243-9714fd06-d331-4b07-a8b7-56df68eb7a88.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">how can I exclude text field from getting it? I use GraphQL to get data from server.</p>\n<p dir=\"auto\">Should I filter it on the server? Is it the only solution?</p>\n<p dir=\"auto\">Thank you in advance!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1960",
    "id": "1960",
    "createdAt": "2023-01-27T14:56:33Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "Kikky",
      "avatar": "https://avatars.githubusercontent.com/u/614922?v=4",
      "url": "https://github.com/Kikky"
    },
    "comments": [
      {
        "author": "Kikky",
        "body": "As I understand, I need to sepcify correct value for maxDepth property of the relationship field in link native element? How can I do it? Or I have to override somehow native link element?"
      }
    ]
  },
  {
    "title": "flattenFields doesn't work if field with sub-fields has a Name",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n\n<p dir=\"auto\">If collection config have fields with type:</p>\n<ul dir=\"auto\">\n<li>array</li>\n<li>row</li>\n<li>group</li>\n<li>collapsible</li>\n</ul>\n<p dir=\"auto\">And they have a name, flattenFields will skip sub-fields</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n\n<ol dir=\"auto\">\n<li>Create a colection config with array or group field</li>\n<li>Add name to the field</li>\n<li>Check the result of flattenFields</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">Caused by this <a href=\"https://github.com/payloadcms/payload/blob/master/src/utilities/flattenTopLevelFields.ts#L13\">check</a>, it'd be better to first check if field have a sub-fields despite having a name, then if it doesn't check for a name and return new array</p>\n\n",
    "url": "https://github.com/payloadcms/payload/discussions/1971",
    "id": "1971",
    "createdAt": "2023-01-30T14:24:18Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "HoneySpace",
      "avatar": "https://avatars.githubusercontent.com/u/51043116?v=4",
      "url": "https://github.com/HoneySpace"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @HoneySpace — this is actually working as intended, although the function could be misleading. It does not flatten ALL fields, it only flattens the fields that exist within a non-named field.\r\n\r\nWhat are you looking to do? Can I help? Gonna convert this to a discussion to keep it going."
      }
    ]
  },
  {
    "title": "Improved typescript experience",
    "body": "<p dir=\"auto\">Payload has been a typescript project since it launched and there have been large improvements over time. Now we want to address more typescript sticking points to make working with Payload even better.</p>\n<p dir=\"auto\">Below are some of the items we are interested in:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">create</code> and <code class=\"notranslate\">update</code> local operations do not validate incoming data according to the passed generic type</li>\n<li><code class=\"notranslate\">collection</code> slug is not typed</li>\n<li>The Payload base class does not have types for what collections are available, etc.</li>\n<li>Can we remove the need for generating types and maybe write out a declaration file dynamically that includes all of those types? If not:</li>\n<li>Improve generated types - Right now all of our local APIs are generics, but what if we could assume the types from the passed collection string?</li>\n<li>Generated relationship field <code class=\"notranslate\">string | RelationshipType</code> is not ideal. There are cases where you know that the doc is populated, so we should enforce <code class=\"notranslate\">RelationshipType</code> and disregard <code class=\"notranslate\">string</code></li>\n</ul>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/echocrow/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/echocrow\">@echocrow</a> offered up some great detail for some of these in <a aria-label=\"Discussion #1319\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4522241\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1319\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1319/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1319\">#1319</a>.</p>\n<p dir=\"auto\">Related:</p>\n<ul dir=\"auto\">\n<li><a aria-label=\"Discussion #1851\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4747786\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1851\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1851/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1851\">#1851</a></li>\n</ul>",
    "url": "https://github.com/payloadcms/payload/discussions/1563",
    "id": "1563",
    "createdAt": "2022-12-01T16:12:47Z",
    "upvotes": 16,
    "commentTotal": 4,
    "author": {
      "name": "DanRibbens",
      "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
      "url": "https://github.com/DanRibbens"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Update - progress is going well! New patterns are being defined in the WIP PR below:\r\n\r\nhttps://github.com/payloadcms/payload/pull/1854\r\n\r\nOne of the next things on the radar (if anyone in the community is up for helping) is to create a set of TypeScript utilities that can take in an auto-generated collection / global type and \"flatten\" relationships into only an ID.\r\n\r\nRight now, our exported types are as safe as possible when it comes to relationship fields.\r\n\r\nFor example, let's take the following configs:\r\n\r\n```ts\r\nconst categories: CollectionConfig = {\r\n  slug: 'categories',\r\n  fields: [\r\n    {\r\n      name: 'title',\r\n      type: 'text',\r\n      required: true,\r\n    }\r\n  ]\r\n}\r\n\r\nconst posts: CollectionConfig = {\r\n  slug: 'posts',\r\n  fields: [\r\n    {\r\n      name: 'title',\r\n      type: 'text',\r\n      required: 'true',\r\n    },\r\n    {\r\n      name: 'category',\r\n      type: 'relationship',\r\n      relationTo: 'categories',\r\n      required: true,\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nAuto-generating types for these collections will result in the following:\r\n\r\n```ts\r\nexport interface Category {\r\n  title: string\r\n}\r\n\r\nexport interface Post {\r\n  title: string\r\n  category: string | Category // could be populated, could not be\r\n}\r\n```\r\n\r\nYou'll see that the `category` property of `Post` is set up to be typed for being populated OR not being populated.\r\n\r\n#### The task at hand\r\n\r\nIt would be great to have a TS utility that takes an auto-generated interface and flatten any unions into only the interfaces, or only the \"basic\" types of `string` or `number`.\r\n\r\nThis would be handy for typing the `data` argument of local API functions like `payload.update`, `payload.create`, etc.\r\n\r\nHere's the intended API:\r\n\r\n```ts\r\ntype PostData = CreateData<Post>\r\n\r\n// PostData would be transformed into:\r\n\r\n// {\r\n//   title: string\r\n//   category: string\r\n// }\r\n```\r\n\r\nAdditionally, we could create a utility that would dynamically specify population depth, as such:\r\n\r\n```ts\r\ntype PostData = WithDepth<Post, 2>\r\n\r\n// PostData would be transformed into:\r\n\r\n// {\r\n//   title: string\r\n//   category: WithDepth<Category, 1>\r\n// }\r\n```\r\n\r\nWe are going to be looking into building this stuff over the next few weeks but would love a hand from anyone willing to contribute!"
      },
      {
        "author": "Elliot67",
        "body": "Don't know if it's useful for you, but since my project is using building blocks, I achieved some sort of type safety with the followings :\r\n\r\n### Getting the type of a single block\r\n\r\n```ts\r\n// Where Homepage is a generated payload interface from a global page containing a block\r\n// field called `blocks` where every possible blocks are defined\r\nexport type BlockTypePicker<T> = Extract<Homepage['blocks'][number], { blockType: T }>;\r\n```\r\n\r\n### Force the relation of a field on that block\r\n\r\n```ts\r\nexport type RemoveStringType<T> = T extends string ? never : T;\r\n\r\n// Remove type string of a relation property (MK) in an object (T)\r\nexport type ForceRelationObj<T extends Record<any, any>, MK extends keyof T> = {\r\n  [K in keyof T]: K extends MK\r\n    ? T[MK] extends Array<unknown>\r\n      ? RemoveStringType<T[MK][number]>[]\r\n      : RemoveStringType<T[MK]>\r\n    : T[K];\r\n};\r\n```\r\n\r\nWhich can be used like that\r\n\r\n```ts\r\ntype MyObject = {\r\n  media: Media | string;\r\n  title: string;\r\n};\r\n\r\ntype BetterTypedObject = ForceRelationObj<MyObject , 'media'>;\r\n// {\r\n//   media: Media;\r\n//   title: string;\r\n// }\r\n```\r\n\r\nAnd when combining the utilities together, you get a fully typed block\r\n```ts\r\ntype FullyTypedBlock = ForceRelationObj<BlockTypePicker<'hero-banner'>, 'thumbnail'>\r\n```\r\n\r\nIn my case I have to specify the field name `thumbnail`, but it should be possible to change the  `K extends MK` condition to an array of fields, or even something that detects payload relations."
      },
      {
        "author": "MoSattler",
        "body": "Super excited about this! thank you all so much!"
      },
      {
        "author": "xHomu",
        "body": "Local API type inferences are GOAT!"
      }
    ]
  },
  {
    "title": "required fields not being represented properly in the graphql schema",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">required fields not being represented properly in the graphql schema</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const Landing: GlobalConfig = {\n  slug: &quot;landing&quot;,\n  versions: true,\n  access: {\n    read: (() =&gt; true )\n  },\n  fields: [\n    {\n      name: &quot;title&quot;,\n      type: &quot;text&quot;,\n      required: true,\n      localized: true,\n    },\n  ],\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-smi\">Landing</span>: <span class=\"pl-smi\">GlobalConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">\"landing\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">versions</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">access</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">read</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-c1\">true</span> <span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"title\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"text\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">localized</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h2 dir=\"auto\">Expected Behavior</h2>\n<div class=\"highlight highlight-source-graphql notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type Landing {\n  title: String!\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-c1\">Landing</span> {\n  <span class=\"pl-v\">title</span>: <span class=\"pl-c1\">String</span><span class=\"pl-k\">!</span>\n}</pre></div>\n\n<h2 dir=\"auto\">Current Behavior</h2>\n<div class=\"highlight highlight-source-graphql notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type Landing {\n  title: String\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-c1\">Landing</span> {\n  <span class=\"pl-v\">title</span>: <span class=\"pl-c1\">String</span>\n}</pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/764",
    "id": "764",
    "createdAt": "2022-07-06T22:05:22Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "chaoky",
      "avatar": "https://avatars.githubusercontent.com/u/9826702?v=4",
      "url": "https://github.com/chaoky"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @chaoky — good catch!\r\n\r\nThis is actually working as intended because your field has `localized: true`. You can query documents in a locale where this field is not yet set, and no fallback locale, which means that the field may not have data present.\r\n\r\nIf you do not have `localized: true`, GraphQL will show this field as required properly.\r\n\r\nDoes this make sense? I am going to convert this into a discussion as I don't think there's much we can do here. Let me know what you think."
      },
      {
        "author": "chaoky",
        "body": "another possible issue is\r\n```ts\r\n{\r\n  slug: \"landing\",\r\n  fields: [\r\n    {\r\n      name: \"cards\",\r\n      type: \"blocks\",\r\n      blocks: [cards],\r\n      required: true,\r\n    },\r\n  ],\r\n}\r\n```\r\noutputting \r\n\r\n```\r\ntype Landing {\r\n  cards: [Landing_Cards]\r\n}\r\n```\r\ninstead of \r\n\r\n```\r\ntype Foo {\r\n  cards: [Landing_Cards!]!\r\n}\r\n```"
      }
    ]
  },
  {
    "title": "Improve extensibility of Admin UI search of collection list",
    "body": "<p dir=\"auto\">Prompted from this discussion on <a href=\"https://discord.com/channels/967097582721572934/1068093957499793418\" rel=\"nofollow\">Discord</a>.</p>\n<p dir=\"auto\">The problem is that under certain conditions the built-in search in Payload doesn't run optimally. One option is to have direct extensibility to allow 3rd party search tool handle it.</p>\n<p dir=\"auto\">Another detail to explore is allowing text search indexes that could improve the performance without integrating with another search service.</p>\n<p dir=\"auto\">I looked into improving the MongoBB search functionality but the <code class=\"notranslate\">search</code> index type and <code class=\"notranslate\">$search</code> aggregation isn't supported in all such as with DocumentDB and Cosmos.</p>\n<p dir=\"auto\">In addition to extending the above, some improvements to built-in search:</p>\n<ul dir=\"auto\">\n<li>Cancel outstanding stale search queries on change</li>\n<li>Provide loading feedback when querying in the UI</li>\n<li>Investigate built-in search performance issues of large collections (100k+)</li>\n</ul>",
    "url": "https://github.com/payloadcms/payload/discussions/1974",
    "id": "1974",
    "createdAt": "2023-01-30T16:15:24Z",
    "upvotes": 2,
    "commentTotal": 2,
    "author": {
      "name": "DanRibbens",
      "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
      "url": "https://github.com/DanRibbens"
    },
    "comments": [
      {
        "author": "bcksl",
        "body": "# `search` and `$search`\r\n\r\nFor those using a supported implementation, this would be a great addition. Have you considering doing this by adding a `search` clause to Payload Queries? If so, that functionality could be enabled, and used by the search query builder in the admin panel with a config toggle. Would also suggest having a `searchable: boolean` or flag on `Field` that allows users to instruct Payload to add a `search` index for that field, in the same vein as `unique` and `index`.\r\n\r\n# Hooks\r\n\r\nTo support a variety of different backends, search hooks should support:\r\n\r\n1. A toggle for whether Payload needs to fetch the returned document ids from the database ( see [Partial document support](#partial-document-support)).\r\n2. A toggle for whether or not Payload needs to apply access control logic to the list or if it has already been considered.\r\n3. A hook to reindex a document when it has been modified (see [Reindexing](#reindexing)).\r\n\r\nThe hooks could also interface with the `searchable` toggle on `Field` to enable search.\r\n\r\nIf it's desirable to support multiple search backends, `searchable` could optionally take an object something like the following, where `indexOptions` and `searchOptions` are objects that get passed to their respective hooks whenever used for that field.\r\n\r\n```ts\r\n{\r\n  strategy: string,\r\n  indexOptions: any,\r\n  searchOptions: any,\r\n}\r\n```\r\n\r\nImplementing multiple backends may not be considered worthwhile, because it brings a whole host of problems, like combining search results from disparate search providers. It would be simplest to mandate a single search provider, and have the search API be something like:\r\n\r\n```ts\r\n// `fields` is the record containing the field names (flattened paths for nested fields)\r\n// and their respective `searchOptions` from above\r\ntype SearchHook = ({\r\n  req: PayloadRequest,\r\n  fields: Record<string, any>,\r\n  query: string\r\n}) => Results | Promise<Results>\r\n```\r\n\r\nThe search hook **must** be parameterized over `req` to enable search implementations to provide their own access control, for example using faceted indexes.\r\n\r\n# Partial document support\r\n\r\nMany search providers are also functionally document databases, meaning it would be performant to allow a search to directly return documents from the search engine. Consider adding a flag to the `search` query which would override the hook default preference to either force Payload to fetch complete documents from the db from the returned ids, or return the documents as fetched by the search query. This relates to item (1) from the beginning of [Hooks](#hooks), as the result of any search query can be generally specified to be a list of partial documents **which must *at least* contain an id**.\r\n\r\nAs these documents will most likely retain the shape of the original, if not all the fields, access control may still be applied to the result.\r\n\r\n# Reindexing\r\n\r\nIt would be very useful to be able to instruct Payload to rebuild the search index for an entire collection, either by calling the index hook again for all documents, or optionally providing an additional hook for bulk (re-)indexing of documents. This makes it a lot easier to add an index for a field after the field has been in use, among other things. Consider adding a subcommand to the CLI like `payload search:reindex`, HTTP routes/GraphQL mutations/Local APIs, and components to the admin panel to accomplish same, with associated access control specifiers. Providing informative progress indication for the admin UI is reasonably straightforward, since even bulk reindexing can be chunked."
      },
      {
        "author": "geminigeek",
        "body": "hi,\r\n\r\ni suggest expose a custom endpoint for search and let the custom endpoint do search or whatever is required , show error in UI if the result is not in required format , also kindly look into exposing a debouche for search as you type, or disable it and use button to initiate search, i suggested a similar use case few months back https://github.com/payloadcms/payload/discussions/1030"
      }
    ]
  },
  {
    "title": "PAYLOAD_PUBLIC not propagating to collections?",
    "body": "<p dir=\"auto\">Hey!</p>\n<p dir=\"auto\">Quick question from my side, perhaps I am doing something wrong here.</p>\n<p dir=\"auto\">I have an env var called <code class=\"notranslate\">PAYLOAD_PUBLIC_FRONTEND_URL</code>. I use it in one of my collections for the preview functionality:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    preview: (doc, { locale }) =&gt; {\n            if (doc?.slug) {\n              payload.logger.info(`${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`)\n              return `${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`;\n            }\n\n            return null;\n        },\"><pre class=\"notranslate\"><code class=\"notranslate\">    preview: (doc, { locale }) =&gt; {\n            if (doc?.slug) {\n              payload.logger.info(`${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`)\n              return `${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`;\n            }\n\n            return null;\n        },\n</code></pre></div>\n<p dir=\"auto\">When I run my app locally, environment variable gets propagated, but on PRODUCTION it is undefined. What is even weirder is that other environment vars I pass to my docker container work. What is yet even weirder is that the same variable in payload.init() gets logged with the actual value.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"payload\n  .init({\n    secret: process.env.CMS_SECRET,\n    mongoURL: process.env.MONGODB_URI,\n    express: server,\n    onInit: async () =&gt; {\n      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);\n      payload.logger.info(`Frontend server URL: ${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}`);\"><pre class=\"notranslate\"><code class=\"notranslate\">payload\n  .init({\n    secret: process.env.CMS_SECRET,\n    mongoURL: process.env.MONGODB_URI,\n    express: server,\n    onInit: async () =&gt; {\n      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);\n      payload.logger.info(`Frontend server URL: ${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}`);\n</code></pre></div>\n<p dir=\"auto\">Is there something that might be preventing collections to access process, but not <code class=\"notranslate\">payload.init</code>? I feel I might be missing something here</p>\n<p dir=\"auto\">Thanks for any kind of feedback!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1283",
    "id": "1283",
    "createdAt": "2022-10-20T16:41:29Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "adam-mrozik",
      "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
      "url": "https://github.com/adam-mrozik"
    },
    "comments": [
      {
        "author": "adam-mrozik",
        "body": "Addition:\r\n\r\nIt works correctly if I supply this variable during docker-build. But this seems widely inconsistent, as it works in server.ts without it"
      },
      {
        "author": "jmikrut",
        "body": "Hey @adam-mrozik — I have some thoughts for you.\r\n\r\nAre you using `dotenv`? Make sure that your `dotenv` correctly points to your `.env` file in both dev and production. Often times we've seen it where, for whatever reason, the folder structure differs from `/src` to `/dist` if using TS, and then `dotenv` can no longer find your `.env` file.\r\n\r\n`dotenv` unfortunately won't error if it can't find the `.env`....It just simply won't bind any variables.\r\n\r\nYou can circumvent this problem by specifying a `path` to `dotenv` that you are SURE points to your `.env` file in production cases.\r\n\r\n"
      }
    ]
  },
  {
    "title": "Error:  Cannot find module 'C:\\Users\\......\\payload-cms\\server.js'",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">I followed the quickstart instructions on <a href=\"https://payloadcms.com/docs/getting-started/installation\" rel=\"nofollow\">https://payloadcms.com/docs/getting-started/installation</a><br>\n` npx create-payload-app</p>\n<p dir=\"auto\">cd payload-cms</p>\n<p dir=\"auto\">npm install</p>\n<p dir=\"auto\">node server.js`</p>\n<p dir=\"auto\">where the directory name is payload-cms</p>\n<p dir=\"auto\">but get an error:</p>\n<p dir=\"auto\">`$ node server.js<br>\nnode:internal/modules/cjs/loader:936<br>\nthrow err;<br>\n^</p>\n<p dir=\"auto\">Error: Cannot find module 'C:\\Users.............\\payload-cms\\server.js'<br>\n←[90m    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:933:15)←[39m<br>\n←[90m    at Function.Module._load (node:internal/modules/cjs/loader:778:27)←[39m<br>\n←[90m    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)←[39m<br>\n←[90m    at node:internal/main/run_main_module:17:47←[39m {<br>\ncode: ←[32m'MODULE_NOT_FOUND'←[39m,<br>\nrequireStack: []<br>\n}<br>\n`</p>\n<p dir=\"auto\">node version: v16.16.0</p>\n<p dir=\"auto\">I am on Windows, using powershell or gitbash</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1983",
    "id": "1983",
    "createdAt": "2023-01-30T19:38:20Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "sdomville",
      "avatar": "https://avatars.githubusercontent.com/u/21313034?v=4",
      "url": "https://github.com/sdomville"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "I think you're probably mixing up instructions from `npx create-payload-app` and manual install. If you've used `npx create-payload-app`, you will not need to run `node server.js`, and rather, you should run `npm run dev` or `yarn dev`.\r\n\r\nThe Node error you're seeing is because Node can't find your `server.js` file. It will look in the folder that you're currently in. So for example, `npx create-payload-app` will create a `/src` directory, and your server will actually be in that folder instead—which will explain why Node can't find it in the root folder. Running `yarn dev` or `npm run dev` should resolve this.\r\n\r\nThis is not an issue with Payload though, per se. So I'll convert this to a discussion, but we're happy to continue to help here!"
      }
    ]
  },
  {
    "title": "Is there an Array string in Payload CMS?",
    "body": "<p dir=\"auto\">Hi, I tried to read the documentation, but I couldn't find it. Is there something to save array string to database?<br>\nI just want save array of strings<br>\nEx: <code class=\"notranslate\">[\"a\",\"b\",\"c\"]</code><br>\nI don't want save array of objects like this, just need array of strings here<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/15695252/210272435-2b0022c9-de6e-40ba-99a9-8430686ec1b3.png\"><img src=\"https://user-images.githubusercontent.com/15695252/210272435-2b0022c9-de6e-40ba-99a9-8430686ec1b3.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1791",
    "id": "1791",
    "createdAt": "2023-01-02T19:35:27Z",
    "upvotes": 2,
    "commentTotal": 2,
    "author": {
      "name": "IRediTOTO",
      "avatar": "https://avatars.githubusercontent.com/u/15695252?u=1db36b69ca11c742388f9de00dad6e489916e95e&v=4",
      "url": "https://github.com/IRediTOTO"
    },
    "comments": [
      {
        "author": "JessChowdhury",
        "body": "Hi @IRediTOTO, this isn't currently supported but would definitely be useful in many cases. This question was also discussed on discord [here](https://discord.com/channels/967097582721572934/1050348908729073685/1050348908729073685). A potential workaround solution would be to:\r\n1. Create a hidden `preferences` field\r\n2. On save, map the original array and return as an array of strings \r\n3. Pass this new array to your hidden field\r\n\r\nThere might be more appropriate workarounds too if you want to share more information on what you're looking to achieve, let us know if you need further help here!"
      },
      {
        "author": "jacobsfletch",
        "body": "The`json` field might work for you: https://payloadcms.com/docs/fields/json#json-field"
      }
    ]
  },
  {
    "title": "Global config for Access Control the Local API",
    "body": "<p dir=\"auto\">Following the discussion on Discord, it seems that some people may find it useful to have the default for <code class=\"notranslate\">overrideAccess</code> configurable in the global config of Payload instead of manually doing it per use.</p>\n<p dir=\"auto\">Source in documentation: <a href=\"https://payloadcms.com/docs/local-api/overview\" rel=\"nofollow\">https://payloadcms.com/docs/local-api/overview</a></p>\n<p dir=\"auto\">I'd like to open a PR for this if it makes sense, it seems simple enough for my first PR to get accustomed with the core logic of Payload.</p>\n<p dir=\"auto\">I'd make a new config item for the Local API:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"export type LocalApiConfig = {\n  /** Configures the default access control for the local API. Defaults to 'true'  */\n  overrideAccess?: boolean;\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">export</span> <span class=\"pl-k\">type</span> <span class=\"pl-smi\">LocalApiConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">/** Configures the default access control for the local API. Defaults to 'true'  */</span>\n  <span class=\"pl-c1\">overrideAccess</span>?: <span class=\"pl-smi\">boolean</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">And then in the <code class=\"notranslate\">find-</code> functions I'd add a check for the global config with a default to true.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1965",
    "id": "1965",
    "createdAt": "2023-01-29T06:48:45Z",
    "upvotes": 4,
    "commentTotal": 1,
    "author": {
      "name": "paulpopus",
      "avatar": "https://avatars.githubusercontent.com/u/35137243?v=4",
      "url": "https://github.com/paulpopus"
    },
    "comments": [
      {
        "author": "xHomu",
        "body": "Going through the docs, it wasn't obvious that the default Local API behavior ignores access controls altogether. \r\n\r\nIt's very easy to accidentally forget the prop, and thus exposing data that we didn't intent to. I understand that it might be too late to change overrideAccess to false by default, so global config for Local API would be much appreciated!"
      }
    ]
  },
  {
    "title": "Using different type of editor",
    "body": "<p dir=\"auto\">Hey Guys,</p>\n<p dir=\"auto\">I just wanna ask if there is a possibility that I can use <a href=\"https://ckeditor.com/\" rel=\"nofollow\">ckeditor</a> instead of <a href=\"https://www.slatejs.org/\" rel=\"nofollow\">slatejs</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1956",
    "id": "1956",
    "createdAt": "2023-01-26T07:45:15Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "mark-15",
      "avatar": "https://avatars.githubusercontent.com/u/5755012?v=4",
      "url": "https://github.com/mark-15"
    },
    "comments": [
      {
        "author": "zubricks",
        "body": "Hey @mark-15 anything is possible, though we don't officially support anything other than slate. We have a community member that built a [plugin for Lexical,](https://github.com/payloadcms/payload/discussions/1772) but nothing for ckeditor at this time."
      }
    ]
  },
  {
    "title": "Support MySQL or PostgreSQL?",
    "body": "<p dir=\"auto\">Hello there,</p>\n<p dir=\"auto\">Is there a way to use MySQL/PostgreSQL as a database choice? I am interested in using <a href=\"https://planetscale.com/\" rel=\"nofollow\">https://planetscale.com/</a> as a database.</p>\n<p dir=\"auto\">Thank you</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1941",
    "id": "1941",
    "createdAt": "2023-01-23T21:40:56Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "hhimanshu",
      "avatar": "https://avatars.githubusercontent.com/u/6589036?u=b70e5e0fdb180b058cabddd3480a795d977e06f1&v=4",
      "url": "https://github.com/hhimanshu"
    },
    "comments": [
      {
        "author": "Cpaczek",
        "body": "No"
      },
      {
        "author": "zubricks",
        "body": "Hey @hhimanshu not at the moment, but that is a item on our roadmap (multiple database support). -> https://github.com/payloadcms/payload/discussions/287"
      }
    ]
  },
  {
    "title": "Restore deleted posts with retainDeleted set true",
    "body": "<p dir=\"auto\">Hi guys, it would be awsome if there is a trash button to restore deleted posts.<br>\nThank you!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1968",
    "id": "1968",
    "createdAt": "2023-01-30T09:59:35Z",
    "upvotes": 3,
    "commentTotal": 1,
    "author": {
      "name": "stefanocerri",
      "avatar": "https://avatars.githubusercontent.com/u/22517245?u=fc8a29c37ea1762a9f23e1b92d44ac8f25c4f49d&v=4",
      "url": "https://github.com/stefanocerri"
    },
    "comments": [
      {
        "author": "DanRibbens",
        "body": "I agree Payload should have a complete concept for soft deleting collections. This is going to have an API aspect as well as the admin UI which you're aluding to it seems.\r\n\r\nYou could use `deleted` checkbox  or `deletedAt` date field in your collection in your project or as a plugin. It would be much better to have this as a built-in feature that is easy to enable and use out of the box.\r\n\r\n"
      }
    ]
  },
  {
    "title": "filterOptions doesn't work with async function",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">In relationship, filterOptions doesn't use the returned value of the async function.</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n            name: 'variations',\n            type: 'relationship',\n            relationTo: 'product-variations',\n            hasMany: true,\n            unique: true,\n            filterOptions: async () =&gt; ({\n                myfield: {equals: 'value1'}\n            }),\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n            name: 'variations',\n            type: 'relationship',\n            relationTo: 'product-variations',\n            hasMany: true,\n            unique: true,\n            filterOptions: async () =&gt; ({\n                myfield: {equals: 'value1'}\n            }),\n}\n</code></pre></div>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">Using payload version 1.5.6</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1975",
    "id": "1975",
    "createdAt": "2023-01-12T08:45:40Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "gubarez",
      "avatar": "https://avatars.githubusercontent.com/u/925134?v=4",
      "url": "https://github.com/gubarez"
    },
    "comments": [
      {
        "author": "JarrodMFlesch",
        "body": "@gubarez this is currently not supported. You can see the [type for filterOptions](https://github.com/payloadcms/payload/blob/master/src/fields/config/types.ts#L57) does not return a promise and therefore does not support async.\r\n\r\n[This](https://github.com/payloadcms/payload/blob/master/src/admin/components/forms/field-types/getFilterOptionsQuery.ts#L10) file would need to be updated, and where `getFilterOptionsQuery` is called to support async/await. If you want to throw together a PR for this support let me know! \r\n\r\nFor now I will convert this into a discussion 🙂 \r\n"
      }
    ]
  },
  {
    "title": "url path is not encoded when deep quering",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">The url path is not encoded when deep quering. Somewhere there should be an encodeURI when building the url path.</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<p dir=\"auto\">`<br>\nconst doc = await payload.findByID({<br>\ncollection,<br>\nid: doc.id,<br>\ndepth: 1,<br>\nshowHiddenFields: true<br>\n})</p>\n<p dir=\"auto\">doc.image.url == \"<a href=\"http://localhost:3000/media/test\" rel=\"nofollow\">http://localhost:3000/media/test</a> image.jpg\" //true</p>\n<p dir=\"auto\">`</p>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">Version 1.5.9</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1972",
    "id": "1972",
    "createdAt": "2023-01-24T14:31:10Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "gubarez",
      "avatar": "https://avatars.githubusercontent.com/u/925134?v=4",
      "url": "https://github.com/gubarez"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @gubarez — we are not currently encoding URLs to media but we certainly could. We will slate this into our workload and get them encoded for you. That is a good call. \r\n\r\nIs this preventing you from having something functional? AFAIK you could URL-encode in your frontend where necessary but I actually have never had to do that manually so I'm curious as to what you ran into.\r\n\r\nI will convert this to a feature request and add it to our roadmap. Should be able to get to it fairly quickly!"
      }
    ]
  },
  {
    "title": "How add Google / Facebook login with payloadCMS?",
    "body": "<p dir=\"auto\">Hi, Can you you tell me an idea to add Google login button to <code class=\"notranslate\">login page</code> of payload CMS?<br>\nI am planning let end user login to dashboard.<br>\nIs there any way to do that?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1969",
    "id": "1969",
    "createdAt": "2023-01-30T10:10:07Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "IRediTOTO",
      "avatar": "https://avatars.githubusercontent.com/u/15695252?u=1db36b69ca11c742388f9de00dad6e489916e95e&v=4",
      "url": "https://github.com/IRediTOTO"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": " Hey @IRediTOTO check out this comment: https://github.com/payloadcms/payload/discussions/1555#discussioncomment-4276115"
      }
    ]
  },
  {
    "title": "Do you have plans to introduce a UI for field configuration?",
    "body": "<p dir=\"auto\">Hey! Just spent the weekend kicking the tires on Payload. I'm really impressed by how well thought out the whole project seems. Y'all are obviously working your butts off and making a great product.</p>\n<p dir=\"auto\">So far, most of my time has been spent in the docs, reading about config options...and then trying my best to remember them as I scaffolded out a bunch of collections. The field config definitely reminds me of a much friendlier version of ACF's JSON files, and I fully acknowledge the importance of a file-based data setup within a CMS environment.</p>\n<p dir=\"auto\">However, I couldn't help but think that there should be some sort of tool that helps beginners scaffold out field configs via a UI. I suspect you might be against this sort of thing; after all, it seems that the file-based config is very much a first-class feature of Payload. But...on the off chance that you're not, I'd like to know if you have any plans to incorporate such a thing into Payload.</p>\n<p dir=\"auto\">If so, awesome! If not, would you mind if someone like myself created an ancillary project to do just that? Thanks in advance for your response, and keep up the great work with Payload.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/33",
    "id": "33",
    "createdAt": "2021-01-25T05:14:09Z",
    "upvotes": 3,
    "commentTotal": 4,
    "author": {
      "name": "raybrownco",
      "avatar": "https://avatars.githubusercontent.com/u/190916?v=4",
      "url": "https://github.com/raybrownco"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @bitmanic — thank you for the compliments! We think it's turning out well!\r\n\r\nI can understand your points for sure and we have had internal discussions around this for a while now. Overall, we absolutely welcome the idea and have some thoughts as to how it could best be incorporated. As of right now, we don't have any concrete plans to build something like this but it is definitely on the radar. I'll do my best to flesh out our prior thinking to see if we can maybe spark some synergy here.\r\n\r\n**UX Considerations**\r\n\r\n- Any type of \"collection / global\" UI builder would be most helpful in creating Fields, although it could be used to create entire Collection / Global configs (labels, upload, auth, other admin UI options)\r\n- A UI builder will be most helpful in a user's first X days with Payload, because after that point, fields and their settings are memorizable and the utility of a UI builder diminishes.\r\n- It could likely be built directly into the Admin UI if done right. If it is built-in, its access should be able to be controlled via config so as to be able to hide it from those that don't need it (editors, content people, etc.)\r\n- Alternatively to building it into the Admin UI, due to its universal nature, it could even go right on the Payload website... Thoughts?\r\n- A great UX might be sort of a WYSIWYG builder... where you drag + drop fields, configure, etc. and see a preview of exactly how the Payload Admin UI would look like when using the field config\r\n\r\n**Technical Requirements**\r\n\r\n- Because Payload developers can write their configs anywhere, at any time, this UI builder may be limited to only \"generating\" field configs, which would then be able to be copy-pasted into developers' filesystems where and how they see fit. Kinda like ACF's PHP copy+paste.\r\n- It would be ideal to have a way to automatically write output field configs into the filesystem, but that will come with a lot of technical overhead and complexity. Strapi has a similar pattern there and they have to deal with Node server restarts and all kinds of stuff, which further complexifies the Admin UI which should remain extremely minimal and understandable.\r\n\r\nAnyway, we would WELCOME further contributions to this idea and would be happy to continue its discussion. We may want to mock up a UX prototype as a first step if this feature is commonly requested. We are working on our public Roadmap now, and this feature will absolutely be added to it. \r\n\r\nWhat do you think?\r\n\r\n"
      },
      {
        "author": "raybrownco",
        "body": "@jmikrut and @DanRibbens: thanks for the great feedback. \r\n\r\nI definitely agree that a UI-based field/collection creator feels more like a scaffolding/generative tool rather than something that devs would constantly come back to again and again. As for where that tool could/should exist, my personal opinion would be to _not_ have it live within a Payload CMS instance's admin panel. I think people seeing a GUI for creating collections/fields within the admin panel will instantly expect it to work like WordPress, Craft CMS, Contentful, or whatever other CMS they're used to. \r\n\r\nPayload is decidedly (and intentionally) different from these other CMS options. Maybe some day down the road, a fully-featured GUI for managing fields would be something to consider, but it's quite obvious that the current focus is definitely not in that direction. \r\n\r\nWith that said—and with all due respect—as a new user, I've found it a bit difficult to keep all of the available options in my head when I go to create a new field/collection. A simple [checkbox field](https://payloadcms.com/docs/fields/checkbox) has 12 config attributes, and half of them can't be configured without additional knowledge from other documentation pages. So...to fully understand a checkbox field requires an inquiring developer to visit at least seven documentation pages. And that's just for one of many fields that I'd like to add to any given Collection, which has its own mass of configuration documentation.\r\n\r\nPlease don't take this as a shot at Payload or its documentation. The documentation itself is completely stellar. You've done a wonderful job with it! I'm definitely not trying to complain about it in this space. My intention is to communicate the \"modularity\" of the system, which is complex but necessarily so.\r\n\r\nAt this point, I should note that the types at [`src/fields/config/types.ts`](https://github.com/payloadcms/payload/blob/master/src/fields/config/types.ts) have been so incredibly useful. They communicate so much great information about each of the field types concisely. That file's also been useful in helping me understand which field attributes are global versus specific to that field. The UI I see in my head for field configuration looks quite similar to these type definitions.\r\n\r\nA few remaining thoughts:\r\n\r\n1. A UI builder, as you noted, seems most valuable to devs who are still learning Payload and/or setting up new Collections.\r\n2. A config generator should probably be hosted on the Payload website (or some other resource) instead of within a Payload CMS instance.\r\n3. Something to consider: perhaps let people share their configs with others? Or...have a showcase of config examples, sort of how Tailwind CSS offers style examples via Tailwind UI? They've done a great job of communicating that the components at Tailwind UI are a starting point of sorts - the dev is expected to copy/paste/modify the code as needed. These config objects are shaped similarly. (I see that you've already gathered some 'demo' configs in the repo.)\r\n4. Perhaps another approach worth considering is _not_ a UI, but something like a VS Code Intellisense plugin or something. The reach of such a tool would be narrower, but it would be much closer to the code, which is probably exactly where devs want to be. \r\n\r\nSorry for the delay in response, and also for the lengthy one!"
      },
      {
        "author": "seaj1one",
        "body": "I'm not a dev and looking for a low code CMS that is more powerful than Wordpress. I'd like to see a UI that allows me to manage my content. I use Metabox, which allows me to create custom fields and posts but also shows me the PHP code. As you add and remove components, users can learn as they go. "
      },
      {
        "author": "ToneseekerMusical",
        "body": "@jmikrut \r\nAs someone who's self taught and has never worked in tech a day in my life, I find the current state of Payload incredibly intuitive, extremely well thought out, and beginner friendly, even for those with almost no coding experience, however, in its current state, Payload can be quite daunting for those who don't have the desire to learn to code, and even people who aren't afraid to get their feet wet, but are still new to coding. With that in mind, I'll happily say that I think this feature request would be a huge step in the direction of bringing more Wordpress users into the fold, and if you add in a GUI for access control management, it would be leaps and bounds ahead of any of the other CMS systems I've personally used.\r\n\r\nAs a businessman however, I don't think that forcing your inexperienced users to go to your website every time they want to add a new collection is the right move, especially after they may have possibly struggled to get everything set up. I'm of the mind that this feature should only be accessible in devmode, which would mitigate damage to the site by users without admin control of the box that it is hosted on.\r\n\r\nAdditionally, to address some of the thoughts on Wordpress/Low code/ No Code users, I think that having an executable that installs a clean NodeJS, MongoDBCompass, and Payload instance on the user's local computer and functions similarly to that of XAMPP or OS specific installations such as W/L/Mamp would greatly improve your conversion rate from your competitors. You could have a devmode switch on the application to enable and disable devmode, a gitpush button that would push any changes made to the user's github repository, and a build button to generate a build of the application, ready to be copied to whatever server the user may have."
      }
    ]
  },
  {
    "title": "Make more video on Youtube",
    "body": "<p dir=\"auto\">Hi, I very like PayloadCMS, hope you can do more videos about tips, trick with payload CMS.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1967",
    "id": "1967",
    "createdAt": "2023-01-30T09:48:50Z",
    "upvotes": 3,
    "commentTotal": 0,
    "author": {
      "name": "IRediTOTO",
      "avatar": "https://avatars.githubusercontent.com/u/15695252?u=1db36b69ca11c742388f9de00dad6e489916e95e&v=4",
      "url": "https://github.com/IRediTOTO"
    },
    "comments": []
  },
  {
    "title": "Collection Group Access Control",
    "body": "<p dir=\"auto\">We already have collection and field level access control which is extremely powerful and granular, however I believe that having a wider hierarchy of access control priority can greatly improve developer experience, as when developing a complex implementation of role based access control in payload, the number of access control functions you need to define can quickly grow out of hand. This issue is similar to the one that I lay out in my <a href=\"https://github.com/payloadcms/payload/discussions/1840\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1840/hovercard\">conditional tabs</a> feature request, as the number of access control functions grows quite rapidly as you add user roles to the application, and having to manage a large number of access controls can get quite tedious.</p>\n<p dir=\"auto\">Adding an additional level of access control at the group level would allow for faster development, and decrease the time spent on setting up user permissions in payload, as developers could set rough access control at the group level and refine it further at the collection and field level. It would also allow for easier cleanup of the admin interface, allowing entire collection groups to be omitted from the admin interface with a single access control setup. I propose implementing a simple CollectionsGroupConfig that allows us to set access control rules on all collections contained within that group as below:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { CollectionConfig } from 'payload/types';\nimport { isAdmin } from '../access/isAdmin';\n\nexport const TestConfig1: CollectionConfig = {\n  slug: 'testconfig1',\n  admin:{\n    group: 'testGroup'\n  },\n  access: {\n    create: isEmployee,\n    read: isAdminOrSelf,\n    update: isAdminOrSelf,\n  },\n  fields: [\n    {\n      type:'text',\n      name:'test',\n    },\n  ],\n};\n\nexport const TestConfig2: CollectionConfig = {\n  slug: 'testconfig2',\n  admin:{\n    group: 'testGroup'\n  },\n  access: {\n    create: isCustomer,\n    update: isAdminOrSelf,\n  },\n  fields: [\n    {\n      type:'text',\n      name:'test',\n    },\n  ],\n};\n\nexport const TestConfig2: CollectionConfig = {\n  slug: 'testconfig2',\n  admin:{\n    group: 'testGroup'\n  },\n  fields: [\n    {\n      type:'text',\n      name:'test',\n    },\n  ],\n};\n\nexport const TestGroup: GroupConfig = {\n  slug:'testGroup',\n  access: {\n    create: isAdminEmployeePartnerOrCustomer,\n    read: isAdminEmployeePartnerOrCustomer,\n    update: isAdminEmployeePartnerOrCustomer,\n    delete: () =&gt; false,\n  },\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">import { CollectionConfig } from 'payload/types';\nimport { isAdmin } from '../access/isAdmin';\n\nexport const TestConfig1: CollectionConfig = {\n  slug: 'testconfig1',\n  admin:{\n    group: 'testGroup'\n  },\n  access: {\n    create: isEmployee,\n    read: isAdminOrSelf,\n    update: isAdminOrSelf,\n  },\n  fields: [\n    {\n      type:'text',\n      name:'test',\n    },\n  ],\n};\n\nexport const TestConfig2: CollectionConfig = {\n  slug: 'testconfig2',\n  admin:{\n    group: 'testGroup'\n  },\n  access: {\n    create: isCustomer,\n    update: isAdminOrSelf,\n  },\n  fields: [\n    {\n      type:'text',\n      name:'test',\n    },\n  ],\n};\n\nexport const TestConfig2: CollectionConfig = {\n  slug: 'testconfig2',\n  admin:{\n    group: 'testGroup'\n  },\n  fields: [\n    {\n      type:'text',\n      name:'test',\n    },\n  ],\n};\n\nexport const TestGroup: GroupConfig = {\n  slug:'testGroup',\n  access: {\n    create: isAdminEmployeePartnerOrCustomer,\n    read: isAdminEmployeePartnerOrCustomer,\n    update: isAdminEmployeePartnerOrCustomer,\n    delete: () =&gt; false,\n  },\n}\n</code></pre></div>\n<p dir=\"auto\">I may have a backwards thought process while developing, however, I tend to think big picture first. I know what kinds of data I need; such as Business Management, Partner Management, Shop Products, Application Forms, etc, then the groups of users that need to access those groups of data, then I define the data that is within those groups, and finally what pieces of data each user would need access to. This feature request follows that top down philosophy.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1966",
    "id": "1966",
    "createdAt": "2023-01-30T09:03:20Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "ToneseekerMusical",
      "avatar": "https://avatars.githubusercontent.com/u/105748910?v=4",
      "url": "https://github.com/ToneseekerMusical"
    },
    "comments": []
  },
  {
    "title": "Token based authentication",
    "body": "<p dir=\"auto\">Good afternoon,<br>\nI've started trying out payload in order to test its functionality with a view to replacing strapi. My only question is when using token authentication, why choose to require the Authorization header to be prefixed with \"JWT\" instead of the more conventional \"Bearer\"?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/17",
    "id": "17",
    "createdAt": "2021-01-18T18:33:19Z",
    "upvotes": 3,
    "commentTotal": 1,
    "author": {
      "name": "alexander-chi",
      "avatar": "https://avatars.githubusercontent.com/u/27694723?u=afec65ce1162c69f7f9c4fff3f4ae190f164fc05&v=4",
      "url": "https://github.com/alexander-chi"
    },
    "comments": [
      {
        "author": "DanRibbens",
        "body": "Hey @alexander-chi,\r\nWe had the `JWT` as part of the `authorization` header to differentiate from other auth schemes. Now that I'm reviewing it based on your feedback, it may be something we consider changing. You may be interested in reading our documentation about api keys if you haven't already: https://payloadcms.com/docs/authentication/config#api-keys\r\n\r\nThanks for your interest in Payload and let us know if you have more questions!"
      }
    ]
  },
  {
    "title": "Detect webpack configuration changes and rm -rf node_modules/.cache",
    "body": "<p dir=\"auto\">Sounds possible and would improve DX quite a bit.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1408",
    "id": "1408",
    "createdAt": "2022-11-14T19:26:56Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "thgh",
      "avatar": "https://avatars.githubusercontent.com/u/1109982?u=6cd0299e82d500b4ba200c5ebd1d3134896cb307&v=4",
      "url": "https://github.com/thgh"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Totally. Actually we are about to dive into _**why**_ Webpack is not picking up these changes in the first place. Might be a simple bug. And / or might be solved by ditching Webpack altogether 😈 \r\n\r\nBut in any case I think this needs to be resolved ASAP. We're on it."
      }
    ]
  },
  {
    "title": "Unable to use `access` (does not affect localhost)",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">On localhost, everything works as expected. But once I host my Payload implementation, I get a 403 on any access point that is not <code class=\"notranslate\">() =&gt; true</code>. (hosted on Northflank, <a href=\"https://northflank.com/guides/deploying-payload-cms\" rel=\"nofollow\">tutorial that I followed</a>)</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">npx create-payload-app</code></li>\n<li>copy-paste \"roles\" from <code class=\"notranslate\">Users.ts</code> and the files <code class=\"notranslate\">src/access/isAdmin.ts</code>+<code class=\"notranslate\">src/access/isLoggedIn.ts</code> from <a href=\"https://github.com/payloadcms/access-control-demo\">Payload CMS Access Control Demo</a></li>\n<li>update any Collection to use <code class=\"notranslate\">() =&gt; true</code> for <code class=\"notranslate\">read</code> access, and all other access points to use <code class=\"notranslate\">isAdmin</code></li>\n<li>test on localhost (I used Mongo DB Atlas as my DB)</li>\n<li>see that everything works as expected</li>\n<li>test on hosted environment (I used <a href=\"https://northflank.com/guides/deploying-payload-cms\" rel=\"nofollow\">Northflank</a>)</li>\n<li>see that all non-read events give 403 even though checks pass</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\"><a href=\"https://github.com/Barbacoa08/fighter-advice-cms\">Link to WIP GitHub repo</a>.</p>\n<p dir=\"auto\">Example Access Code:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  access: {\n    create: isAdmin,\n    read: () =&gt; true,\n    update: isAdmin,\n    delete: isAdmin,\n  },\"><pre class=\"notranslate\"><code class=\"notranslate\">  access: {\n    create: isAdmin,\n    read: () =&gt; true,\n    update: isAdmin,\n    delete: isAdmin,\n  },\n</code></pre></div>\n<p dir=\"auto\">Example Access Code with output logs:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    create: isAdmin,\n    read: (args) =&gt; {\n      console.log(`has args: ${Boolean(args)}`);\n      console.log(`is logged in: ${isLoggedIn(args)}`);\n      console.log(`is admin: ${isAdmin(args)}`);\n      console.log(`is editor or admin: ${isEditorOrAdmin(args)}`);\n      console.log(`is admin or self: ${isAdminOrSelf(args)}`);\n\n      return true;\n    },\n    update: isAdmin,\n    delete: isAdmin,\"><pre class=\"notranslate\"><code class=\"notranslate\">    create: isAdmin,\n    read: (args) =&gt; {\n      console.log(`has args: ${Boolean(args)}`);\n      console.log(`is logged in: ${isLoggedIn(args)}`);\n      console.log(`is admin: ${isAdmin(args)}`);\n      console.log(`is editor or admin: ${isEditorOrAdmin(args)}`);\n      console.log(`is admin or self: ${isAdminOrSelf(args)}`);\n\n      return true;\n    },\n    update: isAdmin,\n    delete: isAdmin,\n</code></pre></div>\n<p dir=\"auto\">Example image of container logs from Northflank showing that the check are passing when hitting the <code class=\"notranslate\">read</code> access point, but failing with a 403 when any other point is hit:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/13157284/212972897-384af9af-4c75-4f95-be04-74e021782375.png\"><img src=\"https://user-images.githubusercontent.com/13157284/212972897-384af9af-4c75-4f95-be04-74e021782375.png\" alt=\"northflank-logs-example\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\">other-other details</h3>\n<p dir=\"auto\">I did try setting all of my <code class=\"notranslate\">access</code> CRUD to just <code class=\"notranslate\">() =&gt; true</code>, and that worked in my hosted environment. But then of course anyone can do anything. So I do have a workaround for my editors, but it's pretty inconvenient as I can only allow them to edit for a small time frame.</p>\n<p dir=\"auto\">Finally, this is my first time using PayloadCMS, and I am hoping that I made some very simple mistake somewhere. Thank you in advance for you help!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1904",
    "id": "1904",
    "createdAt": "2023-01-17T17:53:47Z",
    "upvotes": 1,
    "commentTotal": 5,
    "author": {
      "name": "Barbacoa08",
      "avatar": "https://avatars.githubusercontent.com/u/13157284?u=78ff7d31c62732156767ff8d410f571b56008ada&v=4",
      "url": "https://github.com/Barbacoa08"
    },
    "comments": [
      {
        "author": "JarrodMFlesch",
        "body": "@Barbacoa08 did you read the [common issues](https://northflank.com/guides/deploying-payload-cms#common-issues) at the bottom of that article? It sounds very similar to your issue above, let us know and we can go from there 👍 "
      },
      {
        "author": "Barbacoa08",
        "body": "@JarrodMFlesch, I did check the common issues and that wasn't it. I triple checked my DB connection string testing on both my localhost and my docker environment and it's the same in both. "
      },
      {
        "author": "JarrodMFlesch",
        "body": "You have your `serverURL` configured in your payload config right?\r\n\r\nI am going to turn this into a discussion as I don't think this is an issues with payload. Lets continue this convo there!"
      },
      {
        "author": "Barbacoa08",
        "body": "Alternatively, I am not strongly tied to any particular build system, is there a tutorial for setting up Payload CMS end-to-end? The only reason I went with Northflank was because they had a tutorial for how to fully setup Payload CMS including a DB and file storage. But if there is another, recommended, way, I'm happy to try it out. \r\n\r\nI've never setup a CMS before, so this is pretty new territory for me and I'm floundering a bit 😅 "
      },
      {
        "author": "Barbacoa08",
        "body": "The issue I was having was that I wasn't adding `http`/`https` to my URLs in the `csrf` section. [As described by this comment](https://github.com/payloadcms/payload/discussions/1918#discussioncomment-4781784) in a different conversation. "
      }
    ]
  },
  {
    "title": "Extending Upload to have nested folders",
    "body": "<p dir=\"auto\">I have a media collection which I use to save all media files. I want to organize the files into subfolders. Currently, all files are saved in folder: media</p>\n<p dir=\"auto\">How can I save files from collection-1 to media/collection-1 when using media relationship.</p>\n<p dir=\"auto\">Strapi provides media gallery out of the box in which you can create folders to structure your media gallery such as media/products or media/posts. Maybe we can define the folder inside the relationship such as below.</p>\n<p dir=\"auto\"><code class=\"notranslate\">{ name: 'products', type: 'upload', relationTo: 'media', DESTINATION_FOLDER: '../../media/products'   // Example },</code></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1961",
    "id": "1961",
    "createdAt": "2023-01-27T17:15:08Z",
    "upvotes": 5,
    "commentTotal": 0,
    "author": {
      "name": "m90khan",
      "avatar": "https://avatars.githubusercontent.com/u/6104751?u=9829608f0a8526875dff687e833ecff674c9cf1a&v=4",
      "url": "https://github.com/m90khan"
    },
    "comments": []
  },
  {
    "title": "What does a path of a field look like?",
    "body": "<p dir=\"auto\">I might be missing something obvious, but I am unsure what a field path looks like, specially when you have tabs, groups, arrays.<br>\nPlease consider what I am trying to achieve and let me know if any of my assumptions look wrong:</p>\n<ul dir=\"auto\">\n<li>have a custom component to handle selecting ingredients (IngredientSelector)</li>\n<li>depending on the values selected inside this custom component, set the values for the readonly field 'inEach'. I made this field readonly so the user can not change it, its value is only set based on the ingredient selected</li>\n<li>I tried to use 'useField' inside IngredientSelector and call 'setValue' on the handler function when an ingredient is selected to set the value of 'inEach'</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const { value, setValue } = useField&lt;string&gt;('path')\"><pre class=\"notranslate\"><code class=\"notranslate\">const { value, setValue } = useField&lt;string&gt;('path')\n</code></pre></div>\n<p dir=\"auto\">What would be the field path for 'inEach' based on the config below?:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const Recipes: CollectionConfig = {\n  slug: 'recipes',\n  admin: {\n    useAsTitle: 'name',\n  },\n  fields: [\n    {\n        type: 'tabs',\n        tabs: [\n            {\n                label: 'TabA',\n                fields: [\n                    {\n                        name: 'name',\n                        type: 'text',\n                    }\n                ]\n            },\n            {\n                label: 'TabB',\n                fields: [\n                    {\n                        name: 'ingredients',\n                        type: 'array',\n                        fields: [\n                            {\n                                name: 'name',\n                                type: 'text'\n                            },\n                            {\n                                name: 'quantity',\n                                type: 'text'\n                            },\n                            {\n                                name: 'itemId',\n                                type: 'text',\n                                admin: {\n                                    components: {\n                                        Field: IngredientSelector\n                                    }\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        name: 'amount',\n                        label: 'Amount',\n                        type: 'group',\n                        admin: { readOnly: true },\n                        fields: [\n                          { name: 'inG', label: 'Grams', type: 'number' },\n                          { name: 'inMl', label: 'Millilitres', type: 'number' },\n                          { name: 'inEach', label: 'Each', type: 'number' }\n                        ]\n                    },\n                ]\n            }\n    ] }\n  ],\n}\n\nexport default Recipes;\"><pre class=\"notranslate\"><code class=\"notranslate\">const Recipes: CollectionConfig = {\n  slug: 'recipes',\n  admin: {\n    useAsTitle: 'name',\n  },\n  fields: [\n    {\n        type: 'tabs',\n        tabs: [\n            {\n                label: 'TabA',\n                fields: [\n                    {\n                        name: 'name',\n                        type: 'text',\n                    }\n                ]\n            },\n            {\n                label: 'TabB',\n                fields: [\n                    {\n                        name: 'ingredients',\n                        type: 'array',\n                        fields: [\n                            {\n                                name: 'name',\n                                type: 'text'\n                            },\n                            {\n                                name: 'quantity',\n                                type: 'text'\n                            },\n                            {\n                                name: 'itemId',\n                                type: 'text',\n                                admin: {\n                                    components: {\n                                        Field: IngredientSelector\n                                    }\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        name: 'amount',\n                        label: 'Amount',\n                        type: 'group',\n                        admin: { readOnly: true },\n                        fields: [\n                          { name: 'inG', label: 'Grams', type: 'number' },\n                          { name: 'inMl', label: 'Millilitres', type: 'number' },\n                          { name: 'inEach', label: 'Each', type: 'number' }\n                        ]\n                    },\n                ]\n            }\n    ] }\n  ],\n}\n\nexport default Recipes;\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/1910",
    "id": "1910",
    "createdAt": "2023-01-19T03:43:05Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "cerize",
      "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
      "url": "https://github.com/cerize"
    },
    "comments": [
      {
        "author": "JarrodMFlesch",
        "body": "Since your tabs do not have a `name` field, I believe the path would be `amount.inEach`"
      }
    ]
  },
  {
    "title": "What type for monetary values",
    "body": "<p dir=\"auto\">I would like to keep monetary (money/prices) in collections. Which type will be okay, number? But do I not lose precision on arithmetic problems?</p>\n<p dir=\"auto\">Can I create own implementation for field compliant with: <a href=\"https://www.mongodb.com/docs/manual/tutorial/model-monetary-data/\" rel=\"nofollow\">https://www.mongodb.com/docs/manual/tutorial/model-monetary-data/</a> ?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1958",
    "id": "1958",
    "createdAt": "2023-01-26T14:57:01Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "dawidmachon",
      "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
      "url": "https://github.com/dawidmachon"
    },
    "comments": [
      {
        "author": "JarrodMFlesch",
        "body": "@dawidmachon It is generally best practice to store monetary values in the smallest denomination, there are plenty of good articles out there explaining why this is the case.\r\n\r\nSo personally I would opt to use the number field almost always (storing as cents), and then add a description that displays the amount in a dollar amount."
      }
    ]
  },
  {
    "title": "Add \"copy Link\" Function to Preview Button",
    "body": "<p dir=\"auto\">I'm trying to add a \"copy preview link to clipboard\" function to the preview button in the admin dashboard.<br>\nIt would basically be a copy of the functionality, that the api-url link already provides.<br>\nI know, that I could add a ui element to the sidebar, which does what I want, but I was asking myself, if there was a possibility to customize the preview-button directly?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1959",
    "id": "1959",
    "createdAt": "2023-01-26T15:49:11Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "puck3000",
      "avatar": "https://avatars.githubusercontent.com/u/3384941?u=83020fb9ea9d69bd20bac6da9961778b5bb86a38&v=4",
      "url": "https://github.com/puck3000"
    },
    "comments": []
  },
  {
    "title": "Allow admin.readOnly to take in a function",
    "body": "<p dir=\"auto\">I think it would be very useful to allow the admin.readOnly field config take a function with the doc data being passed into it like the hooks, so that we can more easily change if the field is editable dynamically.</p>\n<p dir=\"auto\">Example use case:<br>\nSlug field with a checkbox if it should be editable, if not checked, then the field remains readOnly and the value of the field would be generated, otherwise the editor can easily toggle it on.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1957",
    "id": "1957",
    "createdAt": "2023-01-26T13:46:44Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "paulpopus",
      "avatar": "https://avatars.githubusercontent.com/u/35137243?v=4",
      "url": "https://github.com/paulpopus"
    },
    "comments": []
  },
  {
    "title": "ERROR (payload): Forbidden: You are not allowed to perform this action.",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">Hi, I deployed my payload-cms to docker on a vps, but after the first user registration I don't have access to anything. Everything works fine, no other errors in the container logs, but I can't create any new data in the collection due to <code class=\"notranslate\">\"ERROR (payload): Forbidden: You are not allowed to perform this action\".</code><br>\nThis only happens in a production environment, but running <code class=\"notranslate\">yarn serve</code> on a local machine doesn't present any problems.</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<ol dir=\"auto\">\n<li>Account registration process</li>\n<li>Creation of a new category attempt</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">Payload version: 1.5.9</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1918",
    "id": "1918",
    "createdAt": "2023-01-19T15:52:05Z",
    "upvotes": 3,
    "commentTotal": 3,
    "author": {
      "name": "eduhdev12",
      "avatar": "https://avatars.githubusercontent.com/u/60825949?u=e8f37ef442f135928800cb9e2df51f6c4c6c8f79&v=4",
      "url": "https://github.com/eduhdev12"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @eduhdev12 — this is probably related to one of two things:\r\n\r\n1. your cookie config. You should open your inspector, look at the Network tab, and inspect the auth cookie that is being set. Make sure it doesn't get blocked for any reason. It could be that you have some cookie settings that are conflicting with your live instance. \r\n2. CSRF. Take a look at this link: https://payloadcms.com/docs/authentication/overview#csrf-protection - you may need to whitelist your production domain within your `csrf` settings to allow the cookie to be read while on your production domain.\r\n\r\nI'll convert this to a discussion to keep conversation going as this is not a problem with Payload itself, but I'm more than happy to help!"
      },
      {
        "author": "Barbacoa08",
        "body": "This sounds like the same issue that I'm running into ([link to my discussion](https://github.com/payloadcms/payload/discussions/1904)).\r\n\r\nRelated, the [deployment docs](https://payloadcms.com/docs/deployment#Docker) is 404."
      },
      {
        "author": "eduhdev12",
        "body": "Hello, in my case someone helped me and changed the `csrf` that must follow the prefix connection type if it's `http` or `https` and now seems to work flawlessly!"
      }
    ]
  },
  {
    "title": "Webpack alias workaround stops working on dev and build after build run",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">Webpack alias workaround stops working on dev and build after build run. I think I am going crazy here <g-emoji class=\"g-emoji\" alias=\"clown_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f921.png\">🤡</g-emoji> <a aria-label=\"Discussion #678\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4166018\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/678\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/678/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/678\">#678</a>  <a aria-label=\"Issue #766\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1307826589\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/766\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/766/hovercard\" href=\"https://github.com/payloadcms/payload/issues/766\">#766</a></p>\n<h2 dir=\"auto\">Expected Behavior</h2>\n<p dir=\"auto\">if <code class=\"notranslate\">yarn dev</code> and <code class=\"notranslate\">yarn build</code> works with no errors<br>\nthen<br>\n<code class=\"notranslate\">cd dist</code><br>\n<code class=\"notranslate\">PAYLOAD_SECRET=secret MONGODB_URI=mongo node server.js</code><br>\n<code class=\"notranslate\">^C</code><br>\n<code class=\"notranslate\">cd ..</code><br>\n<code class=\"notranslate\">yarn dev</code><br>\nworks with no errors</p>\n\n<h2 dir=\"auto\">Current Behavior</h2>\n<p dir=\"auto\"><code class=\"notranslate\">yarn dev</code> and <code class=\"notranslate\">yarn build</code> works with no errors<br>\n<code class=\"notranslate\">cd dist</code><br>\n<code class=\"notranslate\">PAYLOAD_SECRET=secret MONGODB_URI=mongo node server.js</code> webpack error<br>\n<code class=\"notranslate\">cd ..</code><br>\n<code class=\"notranslate\">yarn dev</code> webpack error, WTF <g-emoji class=\"g-emoji\" alias=\"clown_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f921.png\">🤡</g-emoji><br>\n<code class=\"notranslate\">rm -rf dist build</code><br>\n<code class=\"notranslate\">yarn dev</code> webpack error, WTF <g-emoji class=\"g-emoji\" alias=\"clown_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f921.png\">🤡</g-emoji><g-emoji class=\"g-emoji\" alias=\"clown_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f921.png\">🤡</g-emoji><g-emoji class=\"g-emoji\" alias=\"clown_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f921.png\">🤡</g-emoji></p>\n<h2 dir=\"auto\">Possible Solution</h2>\n<p dir=\"auto\">In general this webpack alias workaround is driving me crazy and i spent more of time trying to get it work then actually configuring cms, this looks like v0.1 solution, not v1.0.<br>\nPlease help me get this this running with some workaround for now.<br>\nIdeal solution would be to handle this in a more mature way (not sure if this possible or makes sense considering current setup)</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npx create-payload-app\n✔ Project name? … webpack-test\n✔ Choose language › typescript\n✔ Choose project template › blank\ncd webpack-test\nyarn add @google-cloud/storage\"><pre class=\"notranslate\"><code class=\"notranslate\">npx create-payload-app\n✔ Project name? … webpack-test\n✔ Choose language › typescript\n✔ Choose project template › blank\ncd webpack-test\nyarn add @google-cloud/storage\n</code></pre></div>\n<p dir=\"auto\">Add files<br>\n<code class=\"notranslate\">src/server-side/storage.ts</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import {Storage} from '@google-cloud/storage';\n\nconst storage = new Storage();\nexport async function saveToGoogleStorage(){\n    console.log(storage);\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">import {Storage} from '@google-cloud/storage';\n\nconst storage = new Storage();\nexport async function saveToGoogleStorage(){\n    console.log(storage);\n}\n</code></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">src/mocks/empty.ts</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"export default {};\"><pre class=\"notranslate\"><code class=\"notranslate\">export default {};\n</code></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">src/collections/Media.ts</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { CollectionConfig } from 'payload/types';\nimport * as storage from '../server-side/storage';\n\nconst Media: CollectionConfig = {\n  slug: 'media',\n  fields: [],\n  hooks: {\n    beforeChange: [async () =&gt; { await storage.saveToGoogleStorage(); }],\n  }\n}\n\nexport default Media;\"><pre class=\"notranslate\"><code class=\"notranslate\">import { CollectionConfig } from 'payload/types';\nimport * as storage from '../server-side/storage';\n\nconst Media: CollectionConfig = {\n  slug: 'media',\n  fields: [],\n  hooks: {\n    beforeChange: [async () =&gt; { await storage.saveToGoogleStorage(); }],\n  }\n}\n\nexport default Media;\n</code></pre></div>\n<p dir=\"auto\">Edit file <code class=\"notranslate\">src/payload.config.ts</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { buildConfig } from 'payload/config';\nimport path from 'path';\n// import Examples from './collections/Examples';\nimport Users from './collections/Users';\nimport Media from './collections/Media';\n\nconst serverCodePath = path.resolve(__dirname, 'server-side/storage.ts');\nconst mockModulePath = path.resolve(__dirname, 'mocks/empty.ts');\n\nexport default buildConfig({\n  serverURL: 'http://localhost:3000',\n  admin: {\n    user: Users.slug,\n    webpack: (config) =&gt; ({\n      ...config,\n      resolve: {\n          ...config.resolve,\n          alias: {\n              ...config.resolve.alias,\n              [serverCodePath]: mockModulePath,\n          }\n      }\n    })\n  },\n  collections: [\n    Users, Media,\n    // Add Collections here\n    // Examples,\n  ],\n  typescript: {\n    outputFile: path.resolve(__dirname, 'payload-types.ts')\n  },\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">import { buildConfig } from 'payload/config';\nimport path from 'path';\n// import Examples from './collections/Examples';\nimport Users from './collections/Users';\nimport Media from './collections/Media';\n\nconst serverCodePath = path.resolve(__dirname, 'server-side/storage.ts');\nconst mockModulePath = path.resolve(__dirname, 'mocks/empty.ts');\n\nexport default buildConfig({\n  serverURL: 'http://localhost:3000',\n  admin: {\n    user: Users.slug,\n    webpack: (config) =&gt; ({\n      ...config,\n      resolve: {\n          ...config.resolve,\n          alias: {\n              ...config.resolve.alias,\n              [serverCodePath]: mockModulePath,\n          }\n      }\n    })\n  },\n  collections: [\n    Users, Media,\n    // Add Collections here\n    // Examples,\n  ],\n  typescript: {\n    outputFile: path.resolve(__dirname, 'payload-types.ts')\n  },\n});\n</code></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">yarn dev</code> - success<br>\n<code class=\"notranslate\">yarn build</code> - success<br>\n<code class=\"notranslate\">cd dist</code><br>\n<code class=\"notranslate\">PAYLOAD_SECRET=secret MONGODB_URI=mongo node server.js</code> <code class=\"notranslate\">webpack compiled with 45 errors and 1 warning</code><br>\n<code class=\"notranslate\">cd ..</code><br>\n<code class=\"notranslate\">yarn dev</code> <code class=\"notranslate\">webpack compiled with 45 errors and 1 warning</code><br>\n<code class=\"notranslate\">rm -rf dist build</code><br>\n<code class=\"notranslate\">yarn dev</code> <code class=\"notranslate\">webpack compiled with 45 errors and 1 warning</code></p>",
    "url": "https://github.com/payloadcms/payload/discussions/794",
    "id": "794",
    "createdAt": "2022-07-21T15:34:43Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "old-zoomer",
      "avatar": "https://avatars.githubusercontent.com/u/39236497?u=58af8ea8a2fab8adf53d6566314bd4865dc5ff40&v=4",
      "url": "https://github.com/old-zoomer"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @old-zoomer — we try and keep our issues strictly limited to bugs, but here, this is just a problem with your configuration. I'm going to move this to a discussion.\r\n\r\nBut, we do understand that this aliasing is not ideal, and we have longer-term plans to fix it similarly to how NextJS eliminates server-side code, but this is quite complex. It's nearing the top of our list of priorities.\r\n\r\nIn the interim, I am 100% confident that there is just a small issue somewhere.\r\n\r\n**Question**\r\n\r\nWhat are the errors that you are seeing? \r\n\r\n**Potential Fix 1**\r\n\r\nEnsure that your mock files are also present and copied over to your `/dist` folder. They are probably `.js` files at that point, and you are specifying that in their paths, they are `.ts`. That is probably the problem. They are `.ts` in dev, but `.js` in dist. To fix this, we usually just use `.js` mocks, so they don't have their filenames changed. 👍 \r\n\r\n**Potential Fix 2**\r\n\r\nThis is more of a best practice than anything, but if you are mocking a module for webpack, the mock should represent the same shape of data that the actual file contains. So, your mock is an empty object, but your actual file is a function. I don't think this is an issue, but it could be.\r\n\r\n**Potential Fix 3**\r\n\r\nTry and delete your `node_modules/.cache` folder. Webpack caches to filesystem for speed, and you might be having a weird webpack caching issue.\r\n\r\nGive those a shot! We'll get it sorted and thanks for hanging in there. A more permanent solution is on the way. \r\n \r\n"
      },
      {
        "author": "old-zoomer",
        "body": "I'll try the fixes.\r\n\r\nRegarding Fix 2 - I don't think that's the problem, because everything is working fine until I do a build\r\n\r\nHere is the error I see\r\n```\r\nyarn dev\r\nyarn run v1.22.17\r\n$ cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts GOOGLE_APPLICATION_CREDENTIALS=noty-ai-fcbaf76ce2fa.json nodemon\r\n[nodemon] 2.0.19\r\n[nodemon] to restart at any time, enter `rs`\r\n[nodemon] watching path(s): *.*\r\n[nodemon] watching extensions: ts\r\n[nodemon] starting `ts-node src/server.ts`\r\n[16:07:04] INFO (payload): Starting Payload...\r\n[16:07:05] INFO (payload): Payload Admin URL: http://localhost:3000/admin\r\n[16:07:05] INFO (payload): Connected to Mongo server successfully!\r\nwebpack built 1fb48cd84ed7be7c5fc8 in 1428ms\r\nWARNING in ./node_modules/retry-request/index.js 76:21-39\r\nModule not found: Error: Can't resolve 'request' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/retry-request'\r\n\r\nERROR in ./node_modules/@google-cloud/paginator/build/src/resource-stream.js 19:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/paginator/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/projectify/build/src/index.js 4:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/projectify/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/bucket.js 22:11-24\r\nModule not found: Error: Can't resolve 'fs' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/bucket.js 26:15-30\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\nDid you mean './util'?\r\nRequests that should resolve in the current directory need to start with './'.\r\nRequests that start with a name are treated as module requests and resolve within module directories (node_modules, /Users/mykola/naughty/noty_monorepo/cms/node_modules/payload/node_modules).\r\nIf changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/bucket.js 35:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/bucket.js 36:14-28\r\nModule not found: Error: Can't resolve 'url' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"url\": require.resolve(\"url/\") }'\r\n        - install 'url'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"url\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/file.js 22:11-24\r\nModule not found: Error: Can't resolve 'fs' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/file.js 27:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/file.js 29:13-28\r\nModule not found: Error: Can't resolve 'zlib' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"zlib\": require.resolve(\"browserify-zlib\") }'\r\n        - install 'browserify-zlib'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"zlib\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/hash-stream-validator.js 30:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/nodejs-common/util.js 27:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src/nodejs-common'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/resumable-upload.js 22:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/signer.js 18:12-26\r\nModule not found: Error: Can't resolve 'url' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"url\": require.resolve(\"url/\") }'\r\n        - install 'url'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"url\": false }\r\n\r\nERROR in ./node_modules/@google-cloud/storage/build/src/storage.js 21:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/@google-cloud/storage/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/gaxios/build/src/gaxios.js 24:14-28\r\nModule not found: Error: Can't resolve 'url' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/gaxios/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"url\": require.resolve(\"url/\") }'\r\n        - install 'url'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"url\": false }\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/baseexternalclient.js 17:15-32\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/downscopedclient.js 17:15-32\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/googleauth.js 17:24-48\r\nModule not found: Error: Can't resolve 'child_process' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/googleauth.js 18:11-24\r\nModule not found: Error: Can't resolve 'fs' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/googleauth.js 20:11-24\r\nModule not found: Error: Can't resolve 'os' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"os\": require.resolve(\"os-browserify/browser\") }'\r\n        - install 'os-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"os\": false }\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/identitypoolclient.js 18:11-24\r\nModule not found: Error: Can't resolve 'fs' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/identitypoolclient.js 19:15-30\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/google-auth-library/build/src/auth/oauth2client.js 18:15-32\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-auth-library/build/src/auth'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/google-p12-pem/build/src/index.js 10:11-24\r\nModule not found: Error: Can't resolve 'fs' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-p12-pem/build/src'\r\n\r\nERROR in ./node_modules/google-p12-pem/build/src/index.js 12:15-30\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/google-p12-pem/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/gtoken/build/src/index.js 17:11-24\r\nModule not found: Error: Can't resolve 'fs' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/gtoken/build/src'\r\n\r\nERROR in ./node_modules/gtoken/build/src/index.js 21:15-30\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/gtoken/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/gtoken/node_modules/gaxios/build/src/gaxios.js 24:14-28\r\nModule not found: Error: Can't resolve 'url' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/gtoken/node_modules/gaxios/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"url\": require.resolve(\"url/\") }'\r\n        - install 'url'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"url\": false }\r\n\r\nERROR in ./node_modules/http-proxy-agent/dist/agent.js 15:30-44\r\nModule not found: Error: Can't resolve 'net' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/http-proxy-agent/dist'\r\n\r\nERROR in ./node_modules/http-proxy-agent/dist/agent.js 16:30-44\r\nModule not found: Error: Can't resolve 'tls' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/http-proxy-agent/dist'\r\n\r\nERROR in ./node_modules/http-proxy-agent/dist/agent.js 17:30-44\r\nModule not found: Error: Can't resolve 'url' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/http-proxy-agent/dist'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"url\": require.resolve(\"url/\") }'\r\n        - install 'url'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"url\": false }\r\n\r\nERROR in ./node_modules/https-proxy-agent/dist/agent.js 15:30-44\r\nModule not found: Error: Can't resolve 'net' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/https-proxy-agent/dist'\r\n\r\nERROR in ./node_modules/https-proxy-agent/dist/agent.js 16:30-44\r\nModule not found: Error: Can't resolve 'tls' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/https-proxy-agent/dist'\r\n\r\nERROR in ./node_modules/https-proxy-agent/dist/agent.js 17:30-44\r\nModule not found: Error: Can't resolve 'url' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/https-proxy-agent/dist'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"url\": require.resolve(\"url/\") }'\r\n        - install 'url'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"url\": false }\r\n\r\nERROR in ./node_modules/https-proxy-agent/dist/agent.js 18:33-50\r\nModule not found: Error: Can't resolve 'assert' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/https-proxy-agent/dist'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"assert\": require.resolve(\"assert/\") }'\r\n        - install 'assert'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"assert\": false }\r\n\r\nERROR in ./node_modules/jwa/index.js 5:11-26\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/jwa'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/jws/lib/data-stream.js 3:13-30\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/jws/lib'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/jws/lib/data-stream.js 4:11-26\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/jws/lib'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/jws/lib/sign-stream.js 5:13-30\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/jws/lib'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/jws/lib/sign-stream.js 7:11-26\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/jws/lib'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/jws/lib/verify-stream.js 5:13-30\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/jws/lib'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/jws/lib/verify-stream.js 7:11-26\r\nModule not found: Error: Can't resolve 'util' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/jws/lib'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"util\": require.resolve(\"util/\") }'\r\n        - install 'util'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"util\": false }\r\n\r\nERROR in ./node_modules/retry-request/index.js 3:22-39\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/retry-request'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nERROR in ./node_modules/teeny-request/build/src/agents.js 23:14-28\r\nModule not found: Error: Can't resolve 'url' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/teeny-request/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"url\": require.resolve(\"url/\") }'\r\n        - install 'url'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"url\": false }\r\n\r\nERROR in ./node_modules/teeny-request/build/src/index.js 21:17-34\r\nModule not found: Error: Can't resolve 'stream' in '/Users/mykola/naughty/noty_monorepo/cms/node_modules/teeny-request/build/src'\r\n\r\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\r\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\r\n\r\nIf you want to include a polyfill, you need to:\r\n        - add a fallback 'resolve.fallback: { \"stream\": require.resolve(\"stream-browserify\") }'\r\n        - install 'stream-browserify'\r\nIf you don't want to include a polyfill, you can use an empty module like this:\r\n        resolve.fallback: { \"stream\": false }\r\n\r\nwebpack compiled with 45 errors and 1 warning\r\n```"
      }
    ]
  },
  {
    "title": "DX Split config for node vs browser environment",
    "body": "<p dir=\"auto\">I've been writing my DX about env var and Payload config here <a aria-label=\"Issue #1654\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1493863882\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1654\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/1654/hovercard?comment_id=1403957386&amp;comment_type=issue_comment\" href=\"https://github.com/payloadcms/payload/issues/1654#issuecomment-1403957386\">#1654 (comment)</a> It is a small thing but the env context cause some confusions I've seen in some issues.</p>\n<p dir=\"auto\">In a bigger picture config env and imported collections supposed to be easier to deal with env.</p>\n<p dir=\"auto\">A: If we were to let config isomorphic/browser friendly like the current config, consider:</p>\n<ol dir=\"auto\">\n<li>Limit the API not to let developer leak node related packages to browser env until we can make it clear about it.<br>\nE.g. exposing webpack config seems like to give ability to fully customize it but we can't even add webpack plugins in <code class=\"notranslate\">payload.config.ts</code> because those are require different env. So if it is just for webpack alias, just provide a way to make alias instead of all webpack config but we can simplify further, see no 2.</li>\n<li>We can avoid to create empty mock file when importing a node library from our collections. E.g. we can supply an array of paths so that Payload will automatically mock and webpack alias it.</li>\n<li>Have to look for possibility to show meaningful error instead of long error like <a href=\"https://github.com/payloadcms/payload/discussions/794#discussioncomment-3199770\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/794/hovercard?comment_id=3199770\">this</a></li>\n<li>Doc need to be clear about the config and all imported collections can't have node specific environment.<br>\nAdding a comments in generated <code class=\"notranslate\">payload.config.ts</code> from <code class=\"notranslate\">create-payload-app</code> could be helpful but consider an alternative below.</li>\n</ol>\n<p dir=\"auto\">B: Consider to split the config based on env like GatsbyJS is using <code class=\"notranslate\">gatsby-browser.tsx</code> and <code class=\"notranslate\">gatsby-node.ts</code> files independently. We can make one of it or another file like <code class=\"notranslate\">gatsby-config.ts</code> for the common config.</p>\n<ol dir=\"auto\">\n<li>A lot less confusion and mistake from developer since the API for each env is different. E.g. collection metadata is common, hooks is node, etc.</li>\n<li>We can configure TypeScript not to add node global in browser env.</li>\n<li>All of the above is clear and we can expose bundler API on node env.</li>\n</ol>",
    "url": "https://github.com/payloadcms/payload/discussions/1954",
    "id": "1954",
    "createdAt": "2023-01-25T17:19:35Z",
    "upvotes": 2,
    "commentTotal": 0,
    "author": {
      "name": "CallMeLaNN",
      "avatar": "https://avatars.githubusercontent.com/u/272218?v=4",
      "url": "https://github.com/CallMeLaNN"
    },
    "comments": []
  },
  {
    "title": "Make config.onInit hooks like array of functions",
    "body": "<p dir=\"auto\">config.onInit is a function, but plugins may need to hook on this lifecycle event. Perhaps the best thing is to have lifecycle event system, but ATM it would be easier to implement onInit to be an array of functions.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1953",
    "id": "1953",
    "createdAt": "2023-01-25T15:44:23Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "gubarez",
      "avatar": "https://avatars.githubusercontent.com/u/925134?v=4",
      "url": "https://github.com/gubarez"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @gubarez — you can still use the pattern with plugins - you'll just have to _**call any incoming**_ `onInit` method first in your own custom `onInit`. Then you could perform whatever logic you need afterward. Does that make sense?\r\n\r\nBut I would certainly not be opposed to modifying that config property to accept an array as well!"
      }
    ]
  },
  {
    "title": "How to add composite unique condition",
    "body": "<p dir=\"auto\">How can I add a composite unique condition on two fields (author, slug)</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  name: 'slug',\n  type: 'text',\n},\n{\n  name: 'author',\n  type: 'relationship',\n  relationTo: 'creators',\n},\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n  name: 'slug',\n  type: 'text',\n},\n{\n  name: 'author',\n  type: 'relationship',\n  relationTo: 'creators',\n},\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/1946",
    "id": "1946",
    "createdAt": "2023-01-24T16:23:45Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "rednithin",
      "avatar": "https://avatars.githubusercontent.com/u/14135943?u=87aedd143bb0210bcc2bac89522b5f7ff981410e&v=4",
      "url": "https://github.com/rednithin"
    },
    "comments": [
      {
        "author": "JarrodMFlesch",
        "body": "@rednithin you could make a third field that concatenates these two (with a hook), and mark that field as unique."
      }
    ]
  },
  {
    "title": "How can I trigger a Github Action with the `afterChange` hook? - HTTP webhooks?",
    "body": "<p dir=\"auto\">Would it make sense to add a Setting in the Menu to easily add a URL to add a <a href=\"https://en.wikipedia.org/wiki/Webhook\" rel=\"nofollow\">Webhook</a>?</p>\n<p dir=\"auto\">Or should I hardcode the URL when I make the API call using the GitHub API to trigger a webhook event?</p>\n<ul dir=\"auto\">\n<li><a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#repository_dispatch\">https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#repository_dispatch</a></li>\n<li><a href=\"https://blog.knoldus.com/manual-trigger-in-github-actions/\" rel=\"nofollow\">https://blog.knoldus.com/manual-trigger-in-github-actions/</a></li>\n</ul>\n<p dir=\"auto\">Context: I'm researching using this CMS to be able to trigger a static build of a Next.JS website made for SEO purposes.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1942",
    "id": "1942",
    "createdAt": "2023-01-24T12:18:03Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "gianpaj",
      "avatar": "https://avatars.githubusercontent.com/u/899175?u=ba16b0886f5925ec34d35124490168fb465798cd&v=4",
      "url": "https://github.com/gianpaj"
    },
    "comments": [
      {
        "author": "denolfe",
        "body": "All configuration is typically done in the payload config and/or an .env file. This is where you would configure the URL and any other values.\r\n\r\nFor GitHub API, the way to interact programmatically would be to use [Octokit](https://github.com/octokit/octokit.js). So within your hook, you would instantiate Octokit, then use whatever methods they have available - likely something to do with a workflow run."
      }
    ]
  },
  {
    "title": "Getting req.user as null after logging in via GraphQL from client.",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">I'm currently logging in on a collection using graphql. Right now the collection setup looks like this.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  auth: true, // Auth is enabled,\n\n  access: {\n    read: () =&gt; true,\n    create: () =&gt; true\n  },\"><pre lang=\"´ts\" class=\"notranslate\"><code class=\"notranslate\">  auth: true, // Auth is enabled,\n\n  access: {\n    read: () =&gt; true,\n    create: () =&gt; true\n  },\n</code></pre></div>\n<p dir=\"auto\">I'm using an Authorization header on the graphql requests that looks like</p>\n<p dir=\"auto\"><code class=\"notranslate\">{\"Authorization\": \"JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpb(...)\"}</code></p>\n<p dir=\"auto\">Using the token that I got back from logging in via graphql.</p>\n<p dir=\"auto\">When testing it in the graphql playground I'm getting null response on token and user. It seems like req.user is null when I debug the <code class=\"notranslate\">me</code>-operation. Any ideas what I'm doing wrong?</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;data&quot;: {\n    &quot;mePublicUser&quot;: {\n      &quot;token&quot;: null,\n      &quot;user&quot;: null\n    }\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-s\">\"data\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"mePublicUser\"</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s\">\"token\"</span>: <span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"user\"</span>: <span class=\"pl-c1\">null</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/1881",
    "id": "1881",
    "createdAt": "2023-01-14T11:05:40Z",
    "upvotes": 1,
    "commentTotal": 3,
    "author": {
      "name": "itzaks",
      "avatar": "https://avatars.githubusercontent.com/u/1019364?v=4",
      "url": "https://github.com/itzaks"
    },
    "comments": [
      {
        "author": "itzaks",
        "body": "After some digging I thought it had to do with the response cookie not being set from the server, since I hadn't configured `credentials: 'include'` on my cors-graphql request, and then I configured the auth to look like this:\r\n\r\n````ts\r\n  auth: {\r\n    cookies: {\r\n      secure: true,\r\n      sameSite: 'none'\r\n    }\r\n  },\r\n````\r\n\r\nI now see the cookie `payload-token` in my response cookies, but still I'm getting null in the me-queries. What am I missing here?"
      },
      {
        "author": "jmikrut",
        "body": "HEy @itzaks —\r\n\r\nCouple clarifying things for ya quick:\r\n\r\nI believe you should only need to specify `credentials: 'include'` on fetches if you are relying on Payload's HTTP-only cookie to authenticate. \r\n\r\nBut if you are specifying the `Authorization` header directly, that will override the HTTP cookie.  So it seems to me like you might be trying to do both here.\r\n\r\nAnyway, that's just background info.\r\n\r\nI just tried to recreate your issue on the Payload demo (https://demo.payloadcms.com/api/graphql-playground) but I can't. I even used Postman to run a `meUser` directly from the demo's GraphQL endpoint.\r\n\r\nI expect something else is amiss here, and it's just a small issue with your setup. If you can create a minimally reproducible repo, I am happy to help diagnose further! Let's keep the convo going in a discussion."
      },
      {
        "author": "jacobsfletch",
        "body": "Related: https://github.com/payloadcms/payload/discussions/1902"
      }
    ]
  },
  {
    "title": "Here's how to authenticate a React or Next.js app using REST or GraphQL",
    "body": "<p dir=\"auto\">Authenticating with Payload from a React or Next.js app is extremely powerful. To do this, wrap your entire app with this <code class=\"notranslate\">AuthProvider</code>. It will provide the <code class=\"notranslate\">useAuth</code> hook that you can use to easily perform any auth operation from anywhere in your app:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import React, { useState, createContext, useContext, useEffect, useCallback } from 'react';\nimport { User } from '../../payload-types'; // point this to the auth-enabled collection of your locally generated types\n\ntype Login = (args: { email: string; password: string }) =&gt; Promise&lt;void&gt;;\n\ntype Logout = () =&gt; Promise&lt;void&gt;;\n\ntype AuthContext = {\n  user?: User | null;\n  setUser: (user: User | null) =&gt; void;\n  logout: Logout;\n  login: Login;\n};\n\nconst Context = createContext({} as AuthContext);\n\nexport const AuthProvider: React.FC&lt;{ children: React.ReactNode }&gt; = ({ children }) =&gt; {\n  const [user, setUser] = useState&lt;User | null&gt;();\n\n  const login = useCallback&lt;Login&gt;(async (args) =&gt; {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/users/login`, {\n      method: 'POST',\n      body: JSON.stringify(args),\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (res.ok) {\n      const json = await res.json();\n      setUser(json.user);\n    } else {\n      throw new Error('Invalid login');\n    }\n  }, []);\n\n  const logout = useCallback&lt;Logout&gt;(async () =&gt; {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/users/logout`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    if (res.ok) {\n      setUser(null);\n    } else {\n      throw new Error('There was a problem while logging out.');\n    }\n\n  }, []);\n\n  useEffect(() =&gt; {\n    const fetchMe = async () =&gt; {\n      const result = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/users/me`, {\n        credentials: 'include',\n      }).then((req) =&gt; req.json());\n      setUser(result.user || null);\n    };\n\n    fetchMe();\n  }, []);\n\n  return (\n    &lt;Context.Provider\n      value={{\n        user,\n        setUser,\n        login,\n        logout,\n      }}\n    &gt;\n      {children}\n    &lt;/Context.Provider&gt;\n  );\n};\n\ntype UseAuth&lt;T = User&gt; = () =&gt; AuthContext;\n\nexport const useAuth: UseAuth = () =&gt; useContext(Context);\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useState</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">createContext</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useContext</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useEffect</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useCallback</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'react'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">User</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../../payload-types'</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// point this to the auth-enabled collection of your locally generated types</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">Login</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">email</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">;</span> <span class=\"pl-c1\">password</span>: <span class=\"pl-smi\">string</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">Logout</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">AuthContext</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">user</span>?: <span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">setUser</span>: <span class=\"pl-kos\">(</span><span class=\"pl-s1\">user</span>: <span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">logout</span>: <span class=\"pl-smi\">Logout</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">login</span>: <span class=\"pl-smi\">Login</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-smi\">Context</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">createContext</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">AuthContext</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">AuthProvider</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">FC</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">children</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">ReactNode</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> children <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setUser</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">login</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Login</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/users/login`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">'POST'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">body</span>: <span class=\"pl-smi\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">'Content-Type'</span>: <span class=\"pl-s\">'application/json'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ok</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">json</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">json</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">user</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Invalid login'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">logout</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Logout</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/users/logout`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">'POST'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ok</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'There was a problem while logging out.'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-en\">useEffect</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">fetchMe</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/users/me`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">user</span> <span class=\"pl-c1\">||</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-en\">fetchMe</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">Context</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">Provider</span>\n      <span class=\"pl-smi\">value</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">user</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">setUser</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">login</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">logout</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-kos\">{</span>children<span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>Context.Provider&gt;</span><span class=\"pl-c1\"></span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">UseAuth</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">T</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">User</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">AuthContext</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-en\">useAuth</span>: <span class=\"pl-smi\">UseAuth</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">useContext</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">Context</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Initialize the provider by wrapping your entire app like this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { AuthProvider } from '../providers/Auth'; // point this to the path of your provider\nexport const PayloadNextApp: React.FC = () =&gt; {\n  return (\n    &lt;AuthProvider&gt;\n      ...\n    &lt;/AuthProvider&gt;\n  )\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">AuthProvider</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../providers/Auth'</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// point this to the path of your provider</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">PayloadNextApp</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">FC</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">AuthProvider</span><span class=\"pl-c1\">&gt;</span>\n      ...\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-smi\">AuthProvider</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Now you can fire the <code class=\"notranslate\">useAuth</code> hook in any component of your app. Logging in, for instance, might look like this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const LoginPage: React.FC = () =&gt; {\n  import { useAuth } from '../../providers/Auth';\n  \n  const { login } = useAuth();\n  \n  const onSubmit = useCallback(\n    async (data: FormData) =&gt; {\n      try {\n        await login(data);\n        // redirect to `/account` here\n      } catch (_) {\n        setError('There was an error with the credentials provided. Please try again.');\n      }\n    }, [login]);\n\n  return (\n    ... // render a login form here\n  )\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-smi\">LoginPage</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">FC</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useAuth</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../../providers/Auth'</span><span class=\"pl-kos\">;</span>\n  \n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> login <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useAuth</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  \n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">onSubmit</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span>: <span class=\"pl-smi\">FormData</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">await</span> <span class=\"pl-en\">login</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-c\">// redirect to `/account` here</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">setError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'There was an error with the credentials provided. Please try again.'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">login</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    ... <span class=\"pl-c\">// render a login form here</span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Once authenticated, the <code class=\"notranslate\">user</code> property will be populated in the auth context.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1902",
    "id": "1902",
    "createdAt": "2023-01-17T15:01:46Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "jacobsfletch",
      "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
      "url": "https://github.com/jacobsfletch"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "Related: https://github.com/payloadcms/next-auth-frontend"
      },
      {
        "author": "jacobsfletch",
        "body": "If you are using the GraphQL API, here's the same `AuthProvider` but using the GraphQL API instead:\r\n\r\n```ts\r\nimport React, { useState, createContext, useContext, useEffect, useCallback } from 'react'\r\nimport { User } from '../../payload-types'\r\n\r\ntype Login = (args: { email: string; password: string }) => Promise<void>\r\n\r\ntype Logout = () => Promise<void>\r\n\r\ntype AuthContext = {\r\n  user?: User | null\r\n  setUser: (user: User | null) => void\r\n  logout: Logout\r\n  login: Login\r\n}\r\n\r\nconst Context = createContext({} as AuthContext)\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>()\r\n\r\n  const login = useCallback<Login>(async args => {\r\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/graphql`, {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        query: `mutation {\r\n            loginUser(email: \"${args.email}\", password: \"${args.password}\") {\r\n              user {\r\n                email\r\n              }\r\n              exp\r\n            }\r\n          }`,\r\n      }),\r\n    })\r\n\r\n    if (res.ok) {\r\n      const { data, errors } = await res.json()\r\n      if (errors) throw new Error(errors[0].message)\r\n      setUser(data?.loginUser?.user)\r\n    } else {\r\n      throw new Error('Invalid login')\r\n    }\r\n  }, [])\r\n\r\n  const logout = useCallback<Logout>(async () => {\r\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/graphql`, {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        query: `mutation {\r\n            logoutUser\r\n          }`,\r\n      }),\r\n    })\r\n\r\n    if (res.ok) {\r\n      setUser(null)\r\n    } else {\r\n      throw new Error('There was a problem while logging out.')\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchMe = async () => {\r\n      const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/graphql`, {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          query: `query {\r\n            meUser {\r\n              user {\r\n                email\r\n              }\r\n              exp\r\n            }\r\n          }`,\r\n        }),\r\n      })\r\n\r\n      if (res.ok) {\r\n        const { data } = await res.json()\r\n        setUser(data?.meUser?.user || null)\r\n      } else {\r\n        throw new Error('There was a problem while logging out.')\r\n      }\r\n    }\r\n\r\n    fetchMe()\r\n  }, [])\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        user,\r\n        setUser,\r\n        login,\r\n        logout,\r\n      }}\r\n    >\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\ntype UseAuth<T = User> = () => AuthContext\r\n\r\nexport const useAuth: UseAuth = () => useContext(Context)\r\n```"
      }
    ]
  },
  {
    "title": "Can't set fileSize limit to Upload collection",
    "body": "<p dir=\"auto\">I'm a bit confused about the docs. I understand how to set a global limit but I want different limits in different upload collections: ie I have an images collection and a videos collection. In my videos collection I tried adding both <code class=\"notranslate\">filesize</code> and <code class=\"notranslate\">fileSize</code> (different case in the docs) in upload but it throws errors. Then there is an example in the global config in which it's inside a limit object, it also throws errors.</p>\n<p dir=\"auto\"><strong>Videos.js</strong></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"...\naccess: {},\nupload: {\n  mimeTypes: ['video/mp4'],\n  fileSize: 5000000, // 5MB, written in bytes\n}\"><pre class=\"notranslate\">...\naccess: <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-s1\">upload</span>: <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">mimeTypes</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'video/mp4'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fileSize</span>: <span class=\"pl-c1\">5000000</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// 5MB, written in bytes</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Throws <code class=\"notranslate\">Collection \"videos\" &gt; \"upload.fileSize\" is not allowed</code></p>\n<p dir=\"auto\"><strong>Videos.js</strong></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"...\naccess: {},\nupload: {\n  mimeTypes: ['video/mp4'],\n  limits: {\n    fileSize: 5000000, // 5MB, written in bytes\n  }\n}\"><pre class=\"notranslate\">...\naccess: <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-s1\">upload</span>: <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">mimeTypes</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'video/mp4'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">limits</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">fileSize</span>: <span class=\"pl-c1\">5000000</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// 5MB, written in bytes</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Also throws <code class=\"notranslate\">Collection \"videos\" &gt; \"upload.limits\" is not allowed</code></p>\n<p dir=\"auto\">What would the correct way to declare this be? Thanks in advance, <g-emoji class=\"g-emoji\" alias=\"sparkling_heart\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f496.png\">💖</g-emoji> payload</p>",
    "url": "https://github.com/payloadcms/payload/discussions/682",
    "id": "682",
    "createdAt": "2022-06-24T15:24:14Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "gonzam88",
      "avatar": "https://avatars.githubusercontent.com/u/6289953?u=964dbaf32492efedc92230ee51de16ffac6a9684&v=4",
      "url": "https://github.com/gonzam88"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Hey @gonzam88 — I see what you're looking to do. And I think this is a totally reasonable request. \r\n\r\nAs you've noticed, you can only specify _**global**_ upload filesize limitations, but you can extend the built-in `filesize` field with a `filesize` field of your own, complete with a custom validation function that will enforce max upload sizes for you.\r\n\r\nHere's the built-in `filesize` field:\r\n\r\n```js\r\nconst filesize = {\r\n    name: 'filesize',\r\n    label: 'File Size',\r\n    type: 'number',\r\n    admin: {\r\n      readOnly: true,\r\n      disabled: true,\r\n    },\r\n  };\r\n``` \r\n\r\nJust add that to your collection's base level with a custom validation function and then you're off to the races!"
      }
    ]
  },
  {
    "title": "A minimum and maximum for hasMany in relationship",
    "body": "<p dir=\"auto\">When you have a relationship to staffmembers and you want a minimum then you cant do that at the moment.<br>\nMaybe add a feature so you can like this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  slug: 'staff-collection',\n  fields: [\n    {\n      name: 'staff',\n      type: 'relationship',\n      relationTo: 'members',\n      hasMany: true,\n      admin: {\n          // option 1\n          minItems: 1,\n          maxItems: 3,\n\n          // option 2\n          min: 1,\n          max: 3\n      }\n    }\n  ]\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">'staff-collection'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'staff'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'relationship'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">relationTo</span>: <span class=\"pl-s\">'members'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">hasMany</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">admin</span>: <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c\">// option 1</span>\n          <span class=\"pl-c1\">minItems</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">maxItems</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span>\n\n          <span class=\"pl-c\">// option 2</span>\n          <span class=\"pl-c1\">min</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">max</span>: <span class=\"pl-c1\">3</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/1938",
    "id": "1938",
    "createdAt": "2023-01-23T13:42:59Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "Chrinsieboy",
      "avatar": "https://avatars.githubusercontent.com/u/50674927?u=998045b3461c897f8f7291f58dfd3a40319229fc&v=4",
      "url": "https://github.com/Chrinsieboy"
    },
    "comments": []
  },
  {
    "title": "Best way to \"reupload\" all images in a collection to trigger hooks and new sizes?",
    "body": "<p dir=\"auto\">I've added new sizes, an \"filename renaming\" beforeOperation hook and a \"base64 placeholder string\" beforeChange hook to one of my upload collections.</p>\n<p dir=\"auto\">What's the best way to \"recreate\" all the existing files to generate new images, a new filename and the base64 placeholder?</p>\n<p dir=\"auto\">Thanks for any hints!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1934",
    "id": "1934",
    "createdAt": "2023-01-22T19:22:18Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "christian-reichart",
      "avatar": "https://avatars.githubusercontent.com/u/9932248?u=853b1ea4b57e7cbeb5cea9a422df4d61dcee0ece&v=4",
      "url": "https://github.com/christian-reichart"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "@christian-reichart check out https://github.com/payloadcms/payload/discussions/1834"
      }
    ]
  },
  {
    "title": "Allow images Upscaling at upload",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">Image are not upscaled at upload even with <code class=\"notranslate\">config.upload.resizeOptions.withoutEnlargement</code> explicitly <code class=\"notranslate\">false</code></p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<ol dir=\"auto\">\n<li>Set imageSizes in a Media collection</li>\n<li>Upload an image smaller than one of an imageSizes format</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">It may cause problems if the editor doesn't upload an image big enough and you use it on your frontend or as admin thumbnail.</p>\n<p dir=\"auto\">This may be solved here : <a href=\"https://github.com/payloadcms/payload/blob/master/src/uploads/imageResizer.ts\">https://github.com/payloadcms/payload/blob/master/src/uploads/imageResizer.ts</a><br>\nLine 57 :</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const sizes = imageSizes\n.filter((desiredSize) =&gt; needsResize(desiredSize, dimensions))\n    .map(async (desiredSize) =&gt; {\n    let resized = sharp(file).resize(desiredSize);\"><pre class=\"notranslate\"><code class=\"notranslate\">const sizes = imageSizes\n.filter((desiredSize) =&gt; needsResize(desiredSize, dimensions))\n    .map(async (desiredSize) =&gt; {\n    let resized = sharp(file).resize(desiredSize);\n</code></pre></div>\n<p dir=\"auto\">changed with :</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const sizes = imageSizes\n.filter((desiredSize) =&gt; !config.upload.resizeOptions?.withoutEnlargement || needsResize(desiredSize, dimensions))\n    .map(async (desiredSize) =&gt; {\n    let resized = sharp(file).resize(desiredSize);\"><pre class=\"notranslate\"><code class=\"notranslate\">const sizes = imageSizes\n.filter((desiredSize) =&gt; !config.upload.resizeOptions?.withoutEnlargement || needsResize(desiredSize, dimensions))\n    .map(async (desiredSize) =&gt; {\n    let resized = sharp(file).resize(desiredSize);\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/1638",
    "id": "1638",
    "createdAt": "2022-12-08T09:57:37Z",
    "upvotes": 6,
    "commentTotal": 6,
    "author": {
      "name": "anthonyivol",
      "avatar": "https://avatars.githubusercontent.com/u/19983700?u=6b73458f64f0d8a5d838ec138d4ee5c895e7cc07&v=4",
      "url": "https://github.com/anthonyivol"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "Thanks for the report @anthonyivol! Others have been asking for this as well, we probably should support this. Looks like your solution could work. If you want to open a PR with your changes, we can get have it reviewed pretty quick. We may want to expose other Sharp options while were at it though."
      },
      {
        "author": "jmikrut",
        "body": "For now, because this is a new feature request, I'm going to convert it to a discussion, because it's technically functioning as intended at this time. But let's keep the conversation going!"
      },
      {
        "author": "anthonyivol",
        "body": "Thanks for your replies. \r\nI've made a fork [here](https://github.com/anthonyivol/payload/tree/anthonyivol-uploads-with-enlargement) with the changes. I do not have enough time for now to make a PR with tests and everything but hope that this functionality will be added soon !"
      },
      {
        "author": "anthonyivol",
        "body": "To complete, I thought it was a bug as `config.resizeOptions.withoutEnlargement` is part of sharp options and proposed by typescript when editing the payload config : \r\n\r\n<img width=\"496\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19983700/207389677-849dc16d-63e3-40e1-acb7-22a6e0b477ee.png\">\r\n\r\nReading the doc (\"More\" link to https://sharp.pixelplumbing.com/api-resize) I thought that this option was available : \r\n\r\n<img width=\"820\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19983700/207392797-e6276706-ac48-469d-8350-2ec5ce6811f1.png\">\r\n\r\nThat way I think, sharp.resize should also get the resizeOptions from the config :\r\nhttps://github.com/anthonyivol/payload/blob/7a66337cd650a17fea67cd849cf4f861ab566375/src/uploads/imageResizer.ts#L59\r\n```\r\nlet resized = sharp(file).resize({ ...desiredSize, options: config.upload.resizeOptions });\r\n```\r\n"
      },
      {
        "author": "SwenVogel",
        "body": "Hi, i have the same requirement. It is often required to create an larger version of an image. For example for hero banners on websites. In my opinion, the needsResize check is unnecessary and should be removed completely. Because when i configure clear image dimensions like:\r\n\r\n` imageSizes: [\r\n      {\r\n        name: \"thumbnail\",\r\n        width: 480,\r\n        height: 320,\r\n      },\r\n      {\r\n        name: \"portrait\",\r\n        width: 768,\r\n        height: 1024,\r\n      },\r\n      {\r\n        name: \"hero\",\r\n        width: 1920,\r\n        height: null,\r\n        fit: \"contain\",\r\n      },\r\n    ]`\r\n\r\nI expect that there are three images with exact this dimensions.\r\n "
      },
      {
        "author": "rymate1234",
        "body": "I'm having the same issue -- there definitely could be a better fallback at the very least for when an image size isn't generated"
      }
    ]
  },
  {
    "title": "Are prefix / suffix & formating for field number supported?",
    "body": "<p dir=\"auto\">I like to use number fields and like to display prefix like € and suffix for kg so the user just needs to enter a number</p>\n<p dir=\"auto\">Is this  possible incl. location formating?</p>\n<p dir=\"auto\">Like 1.000,00</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1222",
    "id": "1222",
    "createdAt": "2022-10-07T19:49:22Z",
    "upvotes": 4,
    "commentTotal": 3,
    "author": {
      "name": "Rar9",
      "avatar": "https://avatars.githubusercontent.com/u/2239608?u=50ed805eec791a83af932905fe5bfc752aef971f&v=4",
      "url": "https://github.com/Rar9"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Right now it's not, but this would be a great thing that we should add!\r\n\r\nWe would happily accept a PR to do so as well. Could be really good to have. I'll mark this as `planned`."
      },
      {
        "author": "phillipmalboeuf",
        "body": "Hi @jmikrut @Rar9, I'm thinking of starting a PR for this that's using javascript's [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat). It could also make use of Payload's admin I18n. Sounds good?"
      },
      {
        "author": "phillipmalboeuf",
        "body": "Hey gang @jmikrut @Rar9 @jacobsfletch, I've opened a PR here: https://github.com/payloadcms/payload/pull/1924\r\nIt's my second attempt at a PR for it (https://github.com/payloadcms/payload/pull/1510), this one is cleaner and the first one was closed because it made unwarranted use of FieldDescription."
      }
    ]
  },
  {
    "title": "separate servers for graphql, rest, admin",
    "body": "<p dir=\"auto\">As I was setting up things I was thinking it might be very handy if each of the services could be set up as different servers rather than all under the one express app.</p>\n<p dir=\"auto\">This would allow, potentially for putting the containers on different hosts to handle the calling capacities differently or add different authentication permissions.</p>\n<p dir=\"auto\">Optimally could be to expose the graphql schema/resolvers so they could be used inside an Apollo server instance which would allow for serverless setup (AWS lambda).</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1916",
    "id": "1916",
    "createdAt": "2023-01-19T15:48:33Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "rogueturnip",
      "avatar": "https://avatars.githubusercontent.com/u/7782364?u=0740e704dd152b5d24dbeeb36fd9f23ec5f31203&v=4",
      "url": "https://github.com/rogueturnip"
    },
    "comments": [
      {
        "author": "rogueturnip",
        "body": "I think one thing that would have to happen for this to work would the api servers would have to learn the configuration from the administration server."
      }
    ]
  },
  {
    "title": "Add a query string parameter to AdminRoute",
    "body": "<p dir=\"auto\">How could I add query string parameter when using AdminRoute and use that in AdminView type component? I need to do something like that: admin/edit/mymodel or admin/mymodel/edit/. I will invoke that route from another module.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/19178208/213310178-33840cd6-50bf-4d9c-b869-4f6e1fe3b784.png\"><img src=\"https://user-images.githubusercontent.com/19178208/213310178-33840cd6-50bf-4d9c-b869-4f6e1fe3b784.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Same as you are doing here: admin/collections/localizations/create when localizations is just our own collection.</p>\n<p dir=\"auto\">Also, how I could get this parameter in CustomRouteWithDefaultTemplate for example?</p>\n<p dir=\"auto\">Currently, I am just using localStorage, but it should be better way.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1908",
    "id": "1908",
    "createdAt": "2023-01-18T21:18:49Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "agolovan",
      "avatar": "https://avatars.githubusercontent.com/u/19178208?u=4b6cac5243033547bbca1726801275034e63109d&v=4",
      "url": "https://github.com/agolovan"
    },
    "comments": [
      {
        "author": "agolovan",
        "body": "I figured out like that:\r\n  const openEditor = (name: string) => {\r\n    history.push({\r\n      pathname: `${adminRoute}/models/edit`,\r\n      state: {\r\n        section: name,\r\n      },\r\n    });\r\n  };\r\n\r\nAnd \r\nconst location = useLocation();\r\n  const model = (location.state as any).section;"
      }
    ]
  },
  {
    "title": "Replace dynamic values in content",
    "body": "<p dir=\"auto\">I want to implement dynamic values in Payload to add support for text like:</p>\n<blockquote>\n<p dir=\"auto\">We currently have <code class=\"notranslate\">{{ users_count }}</code> number of users.</p>\n</blockquote>\n<p dir=\"auto\">From my understanding, I have to use the <a href=\"https://payloadcms.com/docs/hooks/collections#afterread\" rel=\"nofollow\"><code class=\"notranslate\">afterRead</code> collection hook</a>. However, I need some sort of check to see if the read comes from the admin or not.</p>\n<p dir=\"auto\">If you're editing the field in the admin, the value <strong>should not</strong> be substituted, so that you can edit the variable. However, if you directly call the REST or GraphQL API from the front-end, the value <strong>should</strong> be substituted.</p>\n<p dir=\"auto\">How do I check if the value comes from the admin? Alternatively, is there another way to implement this altogether?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1810",
    "id": "1810",
    "createdAt": "2023-01-05T15:28:04Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "hdodov",
      "avatar": "https://avatars.githubusercontent.com/u/5570098?u=99fa010aba0ab1241292d2c35ba4c5c30699291b&v=4",
      "url": "https://github.com/hdodov"
    },
    "comments": [
      {
        "author": "JarrodMFlesch",
        "body": "Hey @hdodov I would love to help here, I think there are a couple ways to solve this. \r\n\r\n1. Create a new `readOnly` field, use the afterRead hook to populate the value and use that on the frontend\r\n2. Create a virtual field, the afterRead hook would add the virtual field to the response (only issue is you will have to adjust types on the frontend, since this field will not live in the config)\r\n3. I believe you could check the req.host (assuming cms and frontend are split on subdomains) to see where the request was made from, if it was from the frontend domain, generate the string, else use the value\r\n\r\nAm I understanding your question correctly? Let me know!"
      },
      {
        "author": "christian-reichart",
        "body": "You can check the API via\r\n\r\n`req.payloadAPI !== 'local'`"
      }
    ]
  },
  {
    "title": "Suggestion: Allow the \"options\" field property to be a function similar to hooks",
    "body": "<p dir=\"auto\">As mentioned in Discord ( <a href=\"https://discord.com/channels/967097582721572934/1064471608833609728\" rel=\"nofollow\">https://discord.com/channels/967097582721572934/1064471608833609728</a> )</p>\n<p dir=\"auto\">My idea here is that, for example with \"select\" fields, if the \"options\" property were to accept a function, and that function could access the data of other fields in the current collection/global, then it would become possible to have fields whose available options are dynamic based on the other values in the content item.</p>\n<p dir=\"auto\">My thoughts on this so far are that it might also need some additional properties to reduce the amount of re-rendering going on. Example definition below:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { CollectionConfig } from 'payload/types';\n\nconst Orders: CollectionConfig = {\n\tslug: 'orders',\n\tfields: [\n\t\t{\n\t\t\tname: 'productType',\n\t\t\ttype: 'select',\n\t\t\trequired: true,\n\t\t\toptions: [\n\t\t\t\t'One',\n\t\t\t\t'Two'\n\t\t\t\t'Three'\n\t\t\t],\n\t\t\thasDependingFields: true, // this tells Payload that when this field's value changes it should look for other fields that depend on this one and re-render them\n\t\t},\n\t\t{\n\t\t\tname: 'productSubType',\n\t\t\ttype: 'select',\n\t\t\trequired: true,\n\t\t\tdependsOnFields: [ 'productType' ]\n\t\t\toptions: ({data}) =&gt; { // To be safer here this could be passed an object containing only the fields listed in `dependsOnFields` above\n\t\t\t\tif(data.productType === 'One') {\n\t\t\t\t\treturn ['One A', 'One B'];\n\t\t\t\t}\n\t\t\t\tif(data.productType === 'Two') {\n\t\t\t\t\treturn ['Two A', 'Two B'];\n\t\t\t\t}\n\t\t\t\tif(data.productType === 'Three') {\n\t\t\t\t\treturn ['Three A', 'Three B'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-v\">CollectionConfig</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'payload/types'</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-v\">Orders</span>: <span class=\"pl-v\">CollectionConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">'orders'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n\t\t<span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'productType'</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'select'</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-c1\">options</span>: <span class=\"pl-kos\">[</span>\n\t\t\t\t<span class=\"pl-s\">'One'</span><span class=\"pl-kos\">,</span>\n\t\t\t\t<span class=\"pl-s\">'Two'</span>\n\t\t\t\t<span class=\"pl-s\">'Three'</span>\n\t\t\t<span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-c1\">hasDependingFields</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// this tells Payload that when this field's value changes it should look for other fields that depend on this one and re-render them</span>\n\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n\t\t<span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'productSubType'</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'select'</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-c1\">dependsOnFields</span>: <span class=\"pl-kos\">[</span> <span class=\"pl-s\">'productType'</span> <span class=\"pl-kos\">]</span>\n\t\t\t<span class=\"pl-s1\">options</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>data<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c\">// To be safer here this could be passed an object containing only the fields listed in `dependsOnFields` above</span>\n\t\t\t\t<span class=\"pl-c1\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">productType</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'One'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">'One A'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'One B'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t\t\t\t<span class=\"pl-kos\">}</span>\n\t\t\t\t<span class=\"pl-s1\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">productType</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Two'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">'Two A'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Two B'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t\t\t\t<span class=\"pl-kos\">}</span>\n\t\t\t\t<span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">productType</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Three'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">'Three A'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Three B'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t\t\t\t<span class=\"pl-kos\">}</span>\n\t\t\t<span class=\"pl-kos\">}</span>\n\t\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">I've made a couple of assumptions here:</p>\n<ol dir=\"auto\">\n<li>Payload is capable of re-rendering a field control in the admin based on changes in another field. This seems to already be possible with the conditional fields feature.</li>\n<li>The re-rendering of a field would be able to call the passed function again</li>\n</ol>",
    "url": "https://github.com/payloadcms/payload/discussions/1899",
    "id": "1899",
    "createdAt": "2023-01-17T08:43:05Z",
    "upvotes": 4,
    "commentTotal": 0,
    "author": {
      "name": "hades200082",
      "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
      "url": "https://github.com/hades200082"
    },
    "comments": []
  },
  {
    "title": "parent/child content modelling",
    "body": "<p dir=\"auto\">hi all. i've got a content modelling question - thanks in advance!</p>\n<p dir=\"auto\">i'm building a site which is a knowledge-base for our design system. i'm trying to create a type of page called a <code class=\"notranslate\">Foundations</code> page. A <code class=\"notranslate\">Foundations</code> page has no content of its own, but will have a number of child pages displayed as tabs. the tabs will have their own urls, so e.g.</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">foundations/typography/introduction</code></li>\n<li><code class=\"notranslate\">foundations/typography/patterns</code></li>\n<li>etc</li>\n</ul>\n<p dir=\"auto\">the url for the foundations page will redirect to the first tab, i.e. <code class=\"notranslate\">foundations/typography</code> will redirect to <code class=\"notranslate\">foundations/typography/introduction</code>.</p>\n<p dir=\"auto\">my question is, how to model this.</p>\n<p dir=\"auto\">i've tried creating a <code class=\"notranslate\">Foundations</code> collection with a <code class=\"notranslate\">relationship</code> field with a <code class=\"notranslate\">hasMany</code> <code class=\"notranslate\">relationTo</code> a <code class=\"notranslate\">Pages</code> collection, which contains the sub-pages. the problem with this is that the pages then are re-usable, and it becomes possible to have a sub page sitting underneath multiple <code class=\"notranslate\">Foundations</code> pages, which i'd like to disallow. it's also not possible to see from the child page what its parent is - potentially confusing to an editor if we have multiple pages with a title of \"Introduction\" say.</p>\n<p dir=\"auto\">i can do it the other way round - a <code class=\"notranslate\">Pages</code> document could have a <code class=\"notranslate\">relationship</code> field with a <code class=\"notranslate\">relationTo</code> the <code class=\"notranslate\">Foundations</code> collection, but then the <code class=\"notranslate\">Foundations</code> document doesn't know what its children are, and there's no way to order the children from the <code class=\"notranslate\">Foundations</code> document.</p>\n<p dir=\"auto\">the third thing i tried was to have a <code class=\"notranslate\">blocks</code> field on the <code class=\"notranslate\">Foundations</code> collection allowing the user to add the content for each tabbed page as a separate block directly on the <code class=\"notranslate\">Foundations</code> document. this solves the above problems, but it means that the UI becomes unwieldy - the content for multiple (possibly quite long) pages will all be displayed on the same page. the blocks seem to be collapsed by default which makes it better, but if an editor un-collapses more than one it gets a bit confusing. considering everything though, i think this is the best option i've come up with.</p>\n<p dir=\"auto\">are there any better ways of doing this? any thoughts gratefully received</p>\n<p dir=\"auto\">(i did see this <a href=\"https://github.com/payloadcms/plugin-nested-docs\">nested docs plugin</a> which looks interesting, but i don't think fits my use case because i only want to allow one level of parent-child relation, and because the parent and child wouldn't fit into the same collection)</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1888",
    "id": "1888",
    "createdAt": "2023-01-16T14:37:35Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "Hives",
      "avatar": "https://avatars.githubusercontent.com/u/847307?u=e42ec05a8904510358c4d1a6572f80869c5dce02&v=4",
      "url": "https://github.com/Hives"
    },
    "comments": [
      {
        "author": "JessChowdhury",
        "body": "Hi @Hives,\r\n\r\nI would recommend using / reading more on the [nested docs plugin](https://github.com/payloadcms/plugin-nested-docs).\r\n\r\nWith this plugin, you would create your content structure using just a Pages collection. You would create a **Foundation** page, add no content. Create a **Typography** page, and select **Foundation** as the Parent Page. You can then create pages for Introduction, Patterns etc and assign their Parent Page to **Typography**.\r\n\r\nThis plugin will satisfy many of the issues you listed above:\r\n- Each page will know it's parent / child relations\r\n- Content is separated out into different documents, so you don't end up with one unwieldy page\r\n- You'll be able to use the parent / child data to set more readable titles like `Foundation > Typography > Introduction`\r\n\r\nI think this would be suitable for your use case but if I have missed something or you see a reason this wouldn't work for you - let me know and we can continue to discuss."
      },
      {
        "author": "Hives",
        "body": "thanks! will take a look tomorrow and see how i get on"
      }
    ]
  },
  {
    "title": "document data in groups not accessible in conditional statements in other groups",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">When using conditional statements on fields within a group, data from other groups returns undefined causing the application to crash on page load.</p>\n<p dir=\"auto\">an example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { CollectionConfig } from &quot;payload/types&quot;;\n\nexport const TestConfig: CollectionConfig = {\n    slug: 'testconfig',\n    fields: [\n      {\n        name: 'testGroup1',\n        type: 'group',\n        fields: [\n          {\n            name: 'testField1',\n            type: 'text',\n          }\n        ]\n      },\n      {\n        name: 'testGroup2',\n        type: 'group',\n        fields: [\n          {\n            name: 'testField2',\n            type: 'text',\n            admin:{\n              condition: (data) =&gt; {\n                if (\n                  data.testGroup1.testField1\n                ) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            }\n          }\n        ]\n      },\n    ]\n  }\"><pre class=\"notranslate\"><code class=\"notranslate\">import { CollectionConfig } from \"payload/types\";\n\nexport const TestConfig: CollectionConfig = {\n    slug: 'testconfig',\n    fields: [\n      {\n        name: 'testGroup1',\n        type: 'group',\n        fields: [\n          {\n            name: 'testField1',\n            type: 'text',\n          }\n        ]\n      },\n      {\n        name: 'testGroup2',\n        type: 'group',\n        fields: [\n          {\n            name: 'testField2',\n            type: 'text',\n            admin:{\n              condition: (data) =&gt; {\n                if (\n                  data.testGroup1.testField1\n                ) {\n                  return true;\n                } else {\n                  return false;\n                }\n              },\n            }\n          }\n        ]\n      },\n    ]\n  }\n</code></pre></div>\n<p dir=\"auto\">The conditional statement on the testField2 field does not evaluate correctly when creating a new document. The conditional statement can access the data when editing existing documents where testField1 is already populated, while it crashes the page when creating a new document</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<ol dir=\"auto\">\n<li>Create a collection with two top level groups.</li>\n<li>Define a field in the first group.</li>\n<li>Define a field in the second group with a conditional statement dependent on the field in the first group.</li>\n<li>Create a new document in the collection.</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">I'm currently running Payload 1.5.8</p>\n<p dir=\"auto\">New document error stack trace:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"TestConfig.ts:48 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'testField1')\n    at Object.condition (TestConfig.ts:48:51)\n    at iterateFields.js:12:1\n    at Array.forEach (&lt;anonymous&gt;)\n    at iterateFields (iterateFields.js:8:1)\n    at addFieldStatePromise (addFieldStatePromise.js:142:1)\n    at async Promise.all (index 0)\n    at async iterateFields (iterateFields.js:28:1)\n    at async Promise.all (index 1)\n    at async addFieldStatePromise (addFieldStatePromise.js:196:1)\n    at async Promise.all (index 0)\"><pre class=\"notranslate\"><code class=\"notranslate\">TestConfig.ts:48 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'testField1')\n    at Object.condition (TestConfig.ts:48:51)\n    at iterateFields.js:12:1\n    at Array.forEach (&lt;anonymous&gt;)\n    at iterateFields (iterateFields.js:8:1)\n    at addFieldStatePromise (addFieldStatePromise.js:142:1)\n    at async Promise.all (index 0)\n    at async iterateFields (iterateFields.js:28:1)\n    at async Promise.all (index 1)\n    at async addFieldStatePromise (addFieldStatePromise.js:196:1)\n    at async Promise.all (index 0)\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/1891",
    "id": "1891",
    "createdAt": "2023-01-14T23:44:03Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "ToneseekerMusical",
      "avatar": "https://avatars.githubusercontent.com/u/105748910?v=4",
      "url": "https://github.com/ToneseekerMusical"
    },
    "comments": [
      {
        "author": "ToneseekerMusical",
        "body": "Additionally, the following code crashes the application on editing existing documents, even if it has the `roles` field set:\r\n```\r\nexport const Users: CollectionConfig = {\r\n  slug: 'users',\r\n  auth: true,\r\n  admin: {\r\n    useAsTitle: 'email',\r\n    disableDuplicate: true,\r\n  },\r\n  access: {\r\n    create: () => true,\r\n    read: isAdminOrPartnerAdmin,\r\n    update: isAdminPartnerAdminOrSelf,\r\n    delete: isAdminPartnerAdminOrSelf,\r\n  },\r\n  fields: [\r\n    {\r\n      type: 'tabs',\r\n      tabs: [\r\n        {\r\n          label: 'User Info',\r\n          fields: [\r\n            {\r\n              type: 'group',\r\n              name: 'userInfo',\r\n              label: ' ',\r\n              fields: [\r\n                {\r\n                  type: 'row',\r\n                  fields: [\r\n                    {\r\n                      name: 'roles',\r\n                      type: 'select',\r\n                      required: true,\r\n                      hasMany: true,\r\n                      access: {\r\n                        read: () => true,\r\n                        create: isAdminOrPartnerAdminFieldLevel,\r\n                        update: isAdminOrPartnerAdminFieldLevel,\r\n                      },\r\n                      defaultValue: 'customer',\r\n                      options: [\r\n                        {\r\n                          label: 'Admin',\r\n                          value: 'admin',\r\n                        },\r\n                        {\r\n                          label: 'Employee',\r\n                          value: 'employee',\r\n                        },\r\n                        {\r\n                          label: 'Customer',\r\n                          value: 'customer',\r\n                        },\r\n                      ],\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            },\r\n          ]\r\n        },\r\n        {\r\n          label: 'Instruments',\r\n          fields: [\r\n            {\r\n              name: 'instrumentInfo',\r\n              type: 'group',\r\n              label: ' ',\r\n              admin: {\r\n                condition: (data, siblingData) => {\r\n                  if (\r\n                    data.userInfo.roles &&\r\n                    (data.userInfo.roles.includes('employee') ||\r\n                      data.userInfo.roles.includes('customer'))\r\n                  ) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                },\r\n              },\r\n              fields: [\r\n                {\r\n                  name: 'instruments',\r\n                  type: 'relationship',\r\n                  relationTo: 'instrument',\r\n                  hasMany: true,\r\n                  required: false,\r\n                  access: {\r\n                    read: () => true,\r\n                    create: isAdminFieldLevel,\r\n                    update: isAdminFieldLevel,\r\n                  },\r\n                },\r\n                {\r\n                  name: 'registerInstrument',\r\n                  type: 'text',\r\n                  admin: {\r\n                    condition: (data, siblingData) => {\r\n                      console.log(data.userInfo.roles)\r\n                      if (data.userInfo.roles  &&\r\n                      data.userInfo.roles.includes('customer') {\r\n                        return true;\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    },\r\n                  },\r\n                },\r\n              ],\r\n            }\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n```\r\nthe field that is causing the crash is `registerInstrument`, when the conditional statement is removed, you can edit existing and create new users, and when the conditional statement is present, you cannot edit existing or create new users. The `console.log` however, returns the value of the `roles` field when attempting to edit existing users."
      },
      {
        "author": "jmikrut",
        "body": "Hey @ToneseekerMusical — this is actually intended behavior, because when you create a document, _**there is no data yet**_. You should write your conditions so that you access those nested properties safely, in case there is no data. For example:\r\n\r\n```\r\n          {\r\n            name: 'testField2',\r\n            type: 'text',\r\n            admin:{\r\n              condition: (data) => {\r\n                if (\r\n                  data.testGroup1?.testField1 // added ?. instead of . \r\n                ) {\r\n                  return true;\r\n                } else {\r\n                  return false;\r\n                }\r\n              },\r\n            }\r\n          }\r\n```\r\n\r\nDoes that make sense? I will convert this to a discussion so we can keep conversation going. \r\n\r\nOverall though it's a good practice to safely access nested data in conditions, because of the exact thing you're running into. The data structure might not be there yet!"
      }
    ]
  },
  {
    "title": "\"Fallback to default locale\" checkbox in block field",
    "body": "<p dir=\"auto\">Hi there,</p>\n<p dir=\"auto\">this checkbox shown below appeared suddenly, I don't know why.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/79059627/212304919-3e21a362-9fd4-416f-9e3a-23160d031b28.png\"><img src=\"https://user-images.githubusercontent.com/79059627/212304919-3e21a362-9fd4-416f-9e3a-23160d031b28.png\" alt=\"Screenshot at 2023-01-13 11-07-25\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">My payload.config.js:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"localization: {\n\tlocales: [\n\t\t'de',\n\t\t'en',\n\t],\n\tdefaultLocale: 'de',\n\tfallback: true, \n}\"><pre class=\"notranslate\">localization: <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-c1\">locales</span>: <span class=\"pl-kos\">[</span>\n\t\t<span class=\"pl-s\">'de'</span><span class=\"pl-kos\">,</span>\n\t\t<span class=\"pl-s\">'en'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">defaultLocale</span>: <span class=\"pl-s\">'de'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">fallback</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span> \n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">But the checkbox doesn't react to <code class=\"notranslate\">fallback: false</code> anyway.</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n\ttype: 'blocks',\n\tname: 'blocksMain',\n\tlabel: 'Main Layout',\n\tlocalized: false,\n\tblocks: [\n\t\tlayoutFlexColumns\n\t]\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n\t<span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'blocks'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'blocksMain'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">label</span>: <span class=\"pl-s\">'Main Layout'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">localized</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">blocks</span>: <span class=\"pl-kos\">[</span>\n\t\t<span class=\"pl-s1\">layoutFlexColumns</span>\n\t<span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">No change if I set <code class=\"notranslate\">localized: true</code></p>\n<p dir=\"auto\">Apparently it only shows up in <strong>block</strong> field type.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1868",
    "id": "1868",
    "createdAt": "2023-01-13T11:10:29Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "unonweb",
      "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
      "url": "https://github.com/unonweb"
    },
    "comments": [
      {
        "author": "JessChowdhury",
        "body": "Hi @unonweb - the 'Fallback to default locale' checkbox was added in a recent release, you can see the PR and issue that brought about this change here: https://github.com/payloadcms/payload/pull/1719\r\n\r\nThe checkbox will only appear when there are no items your array, so if you click 'Add main layout' you should see it disappear and this is expected behavior.\r\n\r\nHowever, if you have `localized: false` it would make sense to me that this checkbox is hidden - I will take this to the team and get back to you."
      }
    ]
  },
  {
    "title": "More control over array items' labels",
    "body": "<p dir=\"auto\">It'd be great to have more control over the labels of an array field's items.</p>\n<p dir=\"auto\">Consider the following screenshot, please.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/2481018/211521103-510c5398-b216-4a40-a988-a960457b2210.png\"><img src=\"https://user-images.githubusercontent.com/2481018/211521103-510c5398-b216-4a40-a988-a960457b2210.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">UX would be so much better if there were a way to replace <code class=\"notranslate\">Question 01</code> with the actual question title. Or maybe such a mechanism already exists and I just failed to find it?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1843",
    "id": "1843",
    "createdAt": "2023-01-10T10:05:16Z",
    "upvotes": 6,
    "commentTotal": 2,
    "author": {
      "name": "grundiss",
      "avatar": "https://avatars.githubusercontent.com/u/2481018?u=bd235b1ddfdf20541ec50447a9220beb9a37a852&v=4",
      "url": "https://github.com/grundiss"
    },
    "comments": [
      {
        "author": "viktorbezdek",
        "body": "👍🏻 If you don't plan to implement this, getting pointers on how to implement it would be helpful as well."
      },
      {
        "author": "grundiss",
        "body": "There's a labels `option` there, but it doesn't really do the job I want. In theory, I might have put a React element there, but that would count as cheating the type check and therefore can easily turn broken on the next upgrade"
      }
    ]
  },
  {
    "title": "Internal Labels for Array Items too (not just Blocks)",
    "body": "<p dir=\"auto\">Just like with blocks, it would be helpful to assign a label to each entry in an array list.</p>\n<p dir=\"auto\">Blocks:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/9932248/212637298-8d19c08f-4fc2-4f64-9552-d3d9c3f16caa.png\"><img src=\"https://user-images.githubusercontent.com/9932248/212637298-8d19c08f-4fc2-4f64-9552-d3d9c3f16caa.png\" alt=\"grafik\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Arrays:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/9932248/212637394-897a756a-b144-49cd-a7e5-5047c1a308f5.png\"><img src=\"https://user-images.githubusercontent.com/9932248/212637394-897a756a-b144-49cd-a7e5-5047c1a308f5.png\" alt=\"grafik\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1884",
    "id": "1884",
    "createdAt": "2023-01-16T08:56:24Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "christian-reichart",
      "avatar": "https://avatars.githubusercontent.com/u/9932248?u=853b1ea4b57e7cbeb5cea9a422df4d61dcee0ece&v=4",
      "url": "https://github.com/christian-reichart"
    },
    "comments": []
  },
  {
    "title": "Typescript Types for Blocks",
    "body": "<p dir=\"auto\">Currently the <code class=\"notranslate\">generate:types</code> creates named types for all my collections, with blocks being typed inline.<br>\nBecause I have many components that just handle rendering a single Block, I have to manually add named Block types in order to have a clean Typescript Interface.</p>\n<p dir=\"auto\">It would be really helpful if the type generation could include blocks and also the general types of a block and a collection, to have a more complete interface in the client.</p>\n<p dir=\"auto\">Example:<br>\nMy collections:</p>\n<ul dir=\"auto\">\n<li>ContentPages</li>\n<li>Icons</li>\n</ul>\n<p dir=\"auto\">My blocks:</p>\n<ul dir=\"auto\">\n<li>IconUspList</li>\n<li>Accordion</li>\n<li>Headline</li>\n</ul>\n<p dir=\"auto\">Current output includes only the types:<br>\n<code class=\"notranslate\">ContentPage, Icon</code></p>\n<p dir=\"auto\">but should ideally include:<br>\n<code class=\"notranslate\">Collection, ContentPage, Icon, Block, IconUspList, Accordion, Headline</code></p>\n<p dir=\"auto\">Is this something you think could be included? Or is it already possible and I just haven't figured out how?<br>\nThanks &amp; Cheers</p>",
    "url": "https://github.com/payloadcms/payload/discussions/988",
    "id": "988",
    "createdAt": "2022-08-23T12:48:51Z",
    "upvotes": 6,
    "commentTotal": 3,
    "author": {
      "name": "christian-reichart",
      "avatar": "https://avatars.githubusercontent.com/u/9932248?u=853b1ea4b57e7cbeb5cea9a422df4d61dcee0ece&v=4",
      "url": "https://github.com/christian-reichart"
    },
    "comments": [
      {
        "author": "dotellie",
        "body": "I was kind of surprised to see this isn't a thing already considering it's needed for almost every project using blocks. Even Payloads own website [has a sort of hacky way to accomplish this](https://github.com/payloadcms/website/blob/main/src/components/RenderBlocks/index.tsx#L54) though that kind of breaks if you don't have all blocks within one collection. So yeah, BIG +1 on this issue from me!"
      },
      {
        "author": "bcksl",
        "body": "Would love to see this as well. Currently writing the interface definitions by hand alongside my blocks."
      },
      {
        "author": "Elliot67",
        "body": "Not an optimal solution, but it's possible to access a block type by picking it from a generated globals/collection, you can see an example here: https://github.com/payloadcms/payload/discussions/1563#discussioncomment-4682294. If each payload's block correspond to a component in your app, you can also make a mapping and auto bind the types."
      }
    ]
  },
  {
    "title": "Recursive Blocks",
    "body": "<p dir=\"auto\">I'm basically building a page builder of all my react components and loving it so far.</p>\n<p dir=\"auto\">I iterate all my react components, and create a 'block' of each one. However the only problem is react components allow children, and I'd love for each block to have its own field which has additional blocks (which are components of that same library). However, then I would enter this weird recursive case where I continously iterate and hit no stopping point.</p>\n<p dir=\"auto\">Does anyone of a solution for how to accomplish such a thing? Does my problem make sense?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1275",
    "id": "1275",
    "createdAt": "2022-10-19T02:34:46Z",
    "upvotes": 2,
    "commentTotal": 2,
    "author": {
      "name": "joecaraccio",
      "avatar": "https://avatars.githubusercontent.com/u/966352?u=7926efde25b0e9eb7a77fc259ed1ab737c32ed78&v=4",
      "url": "https://github.com/joecaraccio"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "HELL yes I have a solution for you.\r\n\r\nYou need to import all of your React block components _**only at the top level where the first \"blocks\" are rendered,**_ and then pass them through each additional layer of blocks as either props or with context. But the trick is to only import them once, at the top level, and then needle them through the rest of the way. So say you have a `RenderBlocks` component or similar. _**THAT**_ component needs to accept your block components as props or retrieve them via context.\r\n\r\nWe had to do this internally in Payload with our field components themselves, because fields can render other fields and then boom - recursion. It's a common problem with programming in general!\r\n\r\n\r\n\r\n"
      },
      {
        "author": "jmikrut",
        "body": "I was talking about the React side. But if this is an issue in your Payload config and that is what you are referring to, the same principles would apply there too. "
      }
    ]
  },
  {
    "title": "Is there a working example of the preview button?",
    "body": "<p dir=\"auto\">I'm having some difficulty understanding how the preview button works.</p>\n<p dir=\"auto\">I usually reference the current Payload website for how things are done, but the preview functionality is currently broken on it. None of the examples seem to use preview either.</p>\n<p dir=\"auto\">At one time it seems that preview did work on the Payload website:<br>\n<a href=\"https://github.com/payloadcms/website/search?q=preview&amp;type=commits\">https://github.com/payloadcms/website/search?q=preview&amp;type=commits</a></p>\n<p dir=\"auto\">These commits got me most of the way there. I'm successfully passing the JWT token to the static props, it redirects me to the slug's page, but I continue to see the published content.</p>\n<p dir=\"auto\">I'm not using GraphQL, just plain ol' REST.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const pageQuery = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/pages?where[slug][equals]=${slug}`, {\n    headers: {\n      ...preview ? {\n        Authorization: `JWT ${payloadToken}` // when previewing, send the payload token to bypass draft access control\n      } : {}\n    }\n  }).then(\n    (res) =&gt; res.json(),\n  );\"><pre class=\"notranslate\"><code class=\"notranslate\">const pageQuery = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/pages?where[slug][equals]=${slug}`, {\n    headers: {\n      ...preview ? {\n        Authorization: `JWT ${payloadToken}` // when previewing, send the payload token to bypass draft access control\n      } : {}\n    }\n  }).then(\n    (res) =&gt; res.json(),\n  );\n</code></pre></div>\n<p dir=\"auto\">Any ideas? Been working on this for days.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1875",
    "id": "1875",
    "createdAt": "2023-01-14T02:19:32Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "samtietjen",
      "avatar": "https://avatars.githubusercontent.com/u/4971280?u=9ff035a29d294e47b3109f00e6a9eec46f32fa8c&v=4",
      "url": "https://github.com/samtietjen"
    },
    "comments": [
      {
        "author": "jmikrut",
        "body": "Ahhh yeah the payload site is on next 13’s app folder, which doesn’t support preview yet… Or at least it didn’t when we built the site. I haven’t checked into it lately. Regardless I think you are pointing to a good example that we need to make and we can do it with good old Next’s pages folder.\r\n\r\nI think we could probably get started on this first thing next week because I think it’s super necessary. Give us a bit here and I’ll get back to you!"
      },
      {
        "author": "iamprompt",
        "body": "I think you might need draft=true parameters in the url to show the draft content alongside with JWT token"
      }
    ]
  },
  {
    "title": "Stricter Typing in Local API",
    "body": "<p dir=\"auto\">Currently, the Local API has <a href=\"https://payloadcms.com/docs/local-api/overview#typescript\" rel=\"nofollow\">some interoperability</a> with generated types, but the current state comes with a couple drawbacks.</p>\n<p dir=\"auto\">With some stricter type-checking, and earlier type \"injection\", the following could be achievable:</p>\n<ul dir=\"auto\">\n<li>Auto-complete of global and collection slugs.</li>\n<li>Warning when e.g. a slug was misspelled, or a collection name was passed into a globals query (or vice versa).</li>\n<li>Type inference based on the global or collection slug.</li>\n<li>Not needing to pass in the (hopefully correct) global/collection type into every API call.</li>\n<li>Automatic resolving of relationship fields, collapsing them to either <code class=\"notranslate\">string</code> or whatever the type of the reference entity is, based on the <code class=\"notranslate\">depth</code> provided.</li>\n<li>Probably more?</li>\n</ul>\n<p dir=\"auto\">(Waterfall ahead - warning &amp; apologies in advance!)</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1319",
    "id": "1319",
    "createdAt": "2022-10-30T17:36:27Z",
    "upvotes": 8,
    "commentTotal": 5,
    "author": {
      "name": "echocrow",
      "avatar": "https://avatars.githubusercontent.com/u/5488190?u=2d7f2f58b5cc9d5848cd0e0226f70512ceea6bd8&v=4",
      "url": "https://github.com/echocrow"
    },
    "comments": [
      {
        "author": "echocrow",
        "body": "To reflect, here are some current-state vs preferred behaviors:\r\n\r\n## Globals & Collections\r\n\r\n### Current Behavior\r\n\r\nFor example, roughly from the docs, this works fine:\r\n```typescript\r\nimport { Post } from './payload-types'\r\n\r\nconst posts = await payload.find<Post>({\r\n  collection: 'posts',\r\n})\r\n// ✅ Typed as PaginatedDocs<Post>\r\n```\r\nHowever, so does this:\r\n```typescript\r\nconst posts = await payload.find<Post>({\r\n  collection: 'users',\r\n})\r\n// ❌ Typed as PaginatedDocs<Post>, but will actually be PaginatedDocs<User>.\r\n// No warning about the casting error.\r\n```\r\nand also:\r\n```typescript\r\nconst post = await payload.find<Post>({\r\n  collection: 'whatever-does-not-exist',\r\n})\r\n// ❌ Typed as PaginatedDocs<Post>, but will never work.\r\n// No warning about the invalid collection slug.\r\n```\r\n\r\n### Preferred Behavior\r\n\r\n```typescript\r\nconst posts = await localApi.find({ collection: 'posts' })\r\n// ✅ Automatically typed as PaginatedDocs<Post>.\r\n\r\nconst users = await localApi.find({ collection: 'users' })\r\n// ✅ Automatically typed as PaginatedDocs<User>.\r\n\r\nconst foobar = await localApi.find({ collection: 'does-not-exist' })\r\n// ⚠️ TS warning: \"does-not-exist\" does not satisfy \"posts\" | \"users\" | \"...\".\r\n\r\nconst wip = await localApi.find({ collection: 'po|' })\r\n// ✅ Auto-completion suggestion for \"posts\" (and other collections starting with \"po\").\r\n```\r\n\r\n## Depths & Relationships\r\n\r\n### Current Behavior\r\n\r\nTaking this a step further, imagine posts have a field `image`, that is a reference to a Media entity:\r\n```typescript\r\nconst post = await payload.findByID<Post>({\r\n  collection: 'posts',\r\n  id: '...',\r\n  depth: 2,\r\n})\r\n\r\nconst { image } = post\r\n// ❌ Typed as string | Media\r\n// We know this will be a Media entity due to \"depth: 2\".\r\n```\r\n\r\n### Preferred Behavior\r\n\r\n```typescript\r\nconst postA = await localApi.findByID({ collection: 'posts', id: '...', depth: 2 })\r\nconst { image } = postA\r\n// ✅ Automatically typed as Media.\r\n\r\nconst postB = await localApi.findByID({ collection: 'posts', id: '...', depth: 1 })\r\nconst { image } = postB\r\n// ✅ Automatically typed as string.\r\n```"
      },
      {
        "author": "echocrow",
        "body": "There are probably different ways go to about this. \r\n\r\nSpoiling one way that has worked for us was done in three steps:\r\n1. Generate a single Schemas interface that groups collections and globals keyed by their slug\r\n2. Wrap the Local API functions in a basic wrapper that can receive this Schemas interface\r\n    - Using that generic, the API wrapper can reduce options to valid global slugs and collection slugs (based on the function), and automatically type the returned result\r\n3. Going further, the `depth` option can be typed, and the resulting interface can be recursively scanned for relation field types, and be collapsed to string or the actual type, based on the remaining depth\r\n\r\nThe extra Schemas during type generation may look something like this:\r\n```typescript\r\n\r\nexport default interface Schemas {\r\n  globals: {\r\n    header: Header;\r\n    footer: Footer;\r\n    // ...\r\n  };\r\n  collections: {\r\n    media: Media;\r\n    posts: Post;\r\n    users: User;\r\n    // ...\r\n  };\r\n}\r\n```\r\n(maybe the name `Schemas` can be customized, to let people avoid name collections, should they have a custom collection called \"Schemas\"? or maybe this should be prefixed as PayloadSchemas?)\r\n\r\nThe setup then might look something like:\r\n```typescript\r\nimport type Schemas from './payload-types'\r\n\r\nconst localApi = new payload.LocalApi<Schemas>()\r\n\r\nexport default localApi\r\n```\r\n(This particular setup is similar to how type definitions are fed into [Directus' SDK](https://docs.directus.io/reference/sdk.html#typescript).)\r\n\r\nFrom here, this `localApi` can be imported and used anywhere on the backend, e.g.\r\n```typescript\r\nimport localApi from './localApi'\r\n\r\nconst post = await localApi.findByID({ collection: 'post's, id: '...', depth: 2 })\r\n// ✅ \"posts\" got auto-completed.\r\n// ✅ Automatically typed as Post.\r\n\r\nconst { image } = post\r\n// ✅ Automatically typed as Media.\r\n```\r\n\r\nIs there any interest in this?\r\n\r\nIf so, happy to help get this implemented, and/or share the code we've used to wrap the existing local API functions as proof of concept.\r\n\r\nWe also got helper types that resolve the various relation field types based on the `depth`, but the types currently required here are not exactly pretty.\r\nI'm talking something like:\r\n```typescript\r\ntype ResolveNested<V, D extends Depth> =\r\n  // Relation (Many/Single)\r\n  [IsRelationManySingle<V>] extends [true]\r\n    ? D extends 0\r\n      ? string[]\r\n      : ResolveNested<ArrayItem<Exclude<V, string[]>>, NextDepths[D]>[]\r\n    :\r\n  // Relation (Single/Single)\r\n  [IsRelationSingleSingle<V>] extends [true]\r\n  // ...\r\n```\r\n(Though there may be better solutions to resolving nested relation fields.)"
      },
      {
        "author": "echocrow",
        "body": "(apologies for the ~~triple~~ quadruple post - what's a better format to share and present this?)"
      },
      {
        "author": "DanRibbens",
        "body": "We added a roadmap item for improving typescript support overall https://github.com/payloadcms/payload/discussions/1563 that covers these improvements."
      },
      {
        "author": "thekip",
        "body": "\"where\" could be also typed (similarly how it's typed in mongo driver)\r\n\r\n```ts\r\ninterface FindOptions<T> {\r\n  where: Where<T>\r\n}\r\n```"
      }
    ]
  },
  {
    "title": "Conditional Tabs",
    "body": "<h3 dir=\"auto\">Issue</h3>\n<p dir=\"auto\">The ability to conditionally display tabs in a tab component would be incredibly helpful for certain implementations and provide for much cleaner and more concise code. In my implementation I have a role based user system that organizes user data into tabs to improve the readability of the data for end users. There are multiple tabs that are used across multiple user roles necessitating the use of multiple tab fields with conditional logic on each field. This works for 90% of users, however, if users have multiple roles things get convoluted when writing the conditional statements in order to prevent multiple tab rows from being displayed.</p>\n<p dir=\"auto\">Below is a simple implementation of the tabs, with only two roles for brevity.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  type: 'tabs',\n  admin: {\n    condition: ( data, siblingData ) =&gt; {\n      roleCheck( data, siblingData, 'customer' );\n  },\n  tabs: [\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Customer Info',\n      fields: [ customerInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n    {\n      label: 'Orders',\n      fields: [ orderInfo ],\n    },\n  ],\n},\n{\n  type: 'tabs',\n  admin: {\n    condition: (data, siblingData) =&gt; {\n      roleCheck( data, siblingData, 'employee');\n  },\n  tabs: [\n    {\n      label: 'Profile Info',\n      fields: [ userInfo, profileInfo ],\n    },\n    {\n      label: 'Employee Info',\n      fields: [ employeeInfo ],\n    },\n    {\n      label: 'Employer Info',\n      fields: [ employerInfo ],\n    },\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n  ],\n},\n{\n  type: 'tabs',\n  admin: {\n    condition: ( data, siblingData ) =&gt; {\n      roleCheck( data, siblingData, [ 'employee', 'customer' ] );\n  },\n  tabs: [\n    {\n      label: 'Profile Info',\n      fields: [ userInfo, profileInfo ],\n    },\n    {\n      label: 'Customer Info',\n      fields: [ customerInfo ],\n    },\n    {\n      label: 'Employer Info',\n      fields: [ employerInfo ],\n    },\n    {\n      label: 'Employee Info',\n      fields: [ employeeInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Orders',\n      fields: [ orderInfo ],\n    },\n  ],\n},\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n  type: 'tabs',\n  admin: {\n    condition: ( data, siblingData ) =&gt; {\n      roleCheck( data, siblingData, 'customer' );\n  },\n  tabs: [\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Customer Info',\n      fields: [ customerInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n    {\n      label: 'Orders',\n      fields: [ orderInfo ],\n    },\n  ],\n},\n{\n  type: 'tabs',\n  admin: {\n    condition: (data, siblingData) =&gt; {\n      roleCheck( data, siblingData, 'employee');\n  },\n  tabs: [\n    {\n      label: 'Profile Info',\n      fields: [ userInfo, profileInfo ],\n    },\n    {\n      label: 'Employee Info',\n      fields: [ employeeInfo ],\n    },\n    {\n      label: 'Employer Info',\n      fields: [ employerInfo ],\n    },\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n  ],\n},\n{\n  type: 'tabs',\n  admin: {\n    condition: ( data, siblingData ) =&gt; {\n      roleCheck( data, siblingData, [ 'employee', 'customer' ] );\n  },\n  tabs: [\n    {\n      label: 'Profile Info',\n      fields: [ userInfo, profileInfo ],\n    },\n    {\n      label: 'Customer Info',\n      fields: [ customerInfo ],\n    },\n    {\n      label: 'Employer Info',\n      fields: [ employerInfo ],\n    },\n    {\n      label: 'Employee Info',\n      fields: [ employeeInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Orders',\n      fields: [ orderInfo ],\n    },\n  ],\n},\n</code></pre></div>\n<h3 dir=\"auto\">Proposed Change</h3>\n<p dir=\"auto\">In a role system where users can have multiple roles, a user with both the customer and employee roles will have two tab rows displayed with duplicated tabs in each unless a third tab field is created to cover the edge case where both roles are present. This only gets more complicated with each role added to the available user roles. Ideally, the tab field would accept conditional statements for each tab, consolidating the multitude of edge cases that require their own field into a single field as shown below:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  type: 'tabs',\n  tabs: [\n    {\n      label: 'Profile Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'employee' );\n      },\n      fields: [ userInfo, profileInfo ],\n    },\n    {\n      label: 'Customer Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'customer' );\n      },\n      fields: [ customerInfo ],\n    },\n    {\n      label: 'Employer Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'employee' );\n      },\n      fields: [ employerInfo ],\n    },\n    {\n      label: 'Employee Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'employee' );\n      },\n      fields: [ employeeInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Orders',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'customer' );\n      fields: [ orderInfo ],\n    },\n  ],\n},\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n  type: 'tabs',\n  tabs: [\n    {\n      label: 'Profile Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'employee' );\n      },\n      fields: [ userInfo, profileInfo ],\n    },\n    {\n      label: 'Customer Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'customer' );\n      },\n      fields: [ customerInfo ],\n    },\n    {\n      label: 'Employer Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'employee' );\n      },\n      fields: [ employerInfo ],\n    },\n    {\n      label: 'Employee Info',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'employee' );\n      },\n      fields: [ employeeInfo ],\n    },\n    {\n      label: 'Instruments',\n      fields: [ instrumentInfo ],\n    },\n    {\n      label: 'Appointments',\n      fields: [ appointmentInfo ],\n    },\n    {\n      label: 'Reviews',\n      fields: [ reviewInfo ],\n    },\n    {\n      label: 'Orders',\n      condition: ( data, siblingData ) =&gt; {\n        roleCheck( data, siblingData, 'customer' );\n      fields: [ orderInfo ],\n    },\n  ],\n},\n</code></pre></div>\n<h3 dir=\"auto\">Closing Thoughts</h3>\n<p dir=\"auto\">This is only an example of a single use case, but it can be used in E-commerce implementations for products based on product types, blogs based on post categories, etc. This wouldn't affect the structure of the data, simply improve the way the data would be displayed in the browser.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1840",
    "id": "1840",
    "createdAt": "2023-01-10T07:26:28Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "ToneseekerMusical",
      "avatar": "https://avatars.githubusercontent.com/u/105748910?v=4",
      "url": "https://github.com/ToneseekerMusical"
    },
    "comments": [
      {
        "author": "ToneseekerMusical",
        "body": "Here's a screenshot of the current behavior of the field without handling of edge cases\r\n![image](https://user-images.githubusercontent.com/105748910/211564841-2e6f37db-3712-4149-9237-504bffdbeb31.png)"
      },
      {
        "author": "christian-reichart",
        "body": "This would be helpful for me too, as I currently use tabs to realize a table component.\r\n\r\nI have a max of 10 columns and each tab represents a column.\r\n\r\nNow all of these are always visible, with a condition I could add a \"numberOfColumns\" select, that let's the user decide how many columns they need to make it clearer.\r\n\r\nTo my understanding this is currently not possible"
      }
    ]
  },
  {
    "title": "Thumbnails/Icons for Collections/Globals",
    "body": "<p dir=\"auto\">I have a Payload project that has gotten pretty complex with many globals and collections.<br>\nFor a better UX I've been thinking about adding some sort of thumbnails like it's possible with blocks.</p>\n<p dir=\"auto\">I have two main ideas here:</p>\n<h3 dir=\"auto\">Adding the option to upload a thumbnail picture (similar to blocks) that shows on the dashboard</h3>\n<p dir=\"auto\">Something like this for collections &amp; globals:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"imageURL: '/path/img.png',\nimageAltText: 'alt',\"><pre class=\"notranslate\"><span class=\"pl-s1\">imageURL</span>: <span class=\"pl-s\">'/path/img.png'</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-s1\">imageAltText</span>: <span class=\"pl-s\">'alt'</span><span class=\"pl-kos\">,</span></pre></div>\n<h3 dir=\"auto\">Adding the option to choose a predefined icon that comes from an icon system provided by Payload</h3>\n<p dir=\"auto\">Some single colored SVG icons that work with dark mode. They could then also be shown in the sidebar, which doesn't make sense for thumbnail images i think.</p>\n<p dir=\"auto\">Could be an option like:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"icon: 'document',\"><pre class=\"notranslate\"><span class=\"pl-s1\">icon</span>: <span class=\"pl-s\">'document'</span><span class=\"pl-kos\">,</span></pre></div>\n<p dir=\"auto\">where it allows predefined, enum like strings.</p>\n<p dir=\"auto\">Maybe it could also be a combination of the two? Option two would definitely add some more work. We could also think about allowing own SVG uploads but would have to assure some way to make them fit for dark mode. We could inject CSS variables or 'currentColor' in some sort of pipeline I think (something along the lines of what I did <a href=\"https://github.com/christian-reichart/svg-chameleon\">here</a>).</p>\n<p dir=\"auto\">What do you think about this?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1871",
    "id": "1871",
    "createdAt": "2023-01-13T14:27:09Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "christian-reichart",
      "avatar": "https://avatars.githubusercontent.com/u/9932248?u=853b1ea4b57e7cbeb5cea9a422df4d61dcee0ece&v=4",
      "url": "https://github.com/christian-reichart"
    },
    "comments": []
  },
  {
    "title": "Rename File On Upload? Not Overwriting Other Uploads",
    "body": "<p dir=\"auto\">To prevent uploads from overwriting each other in our media folder, is there a way to generate a unique name for a file upon upload?</p>\n<blockquote>\n<p dir=\"auto\">Example:<br>\nUploading <code class=\"notranslate\">unknown.jpg</code> (again) would be renamed to <code class=\"notranslate\">[random-hash].jpg</code> on the server</p>\n</blockquote>\n<p dir=\"auto\">Would this be accomplished by means of a middleware or something I'm missing?</p>\n<p dir=\"auto\">Aka: <code class=\"notranslate\">handlers</code> in the Upload Options described here: <a href=\"https://payloadcms.com/docs/upload/overview#enabling-uploads\" rel=\"nofollow\">https://payloadcms.com/docs/upload/overview#enabling-uploads</a></p>\n<p dir=\"auto\">Thank you for responses / feedback!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1153",
    "id": "1153",
    "createdAt": "2022-09-21T14:03:50Z",
    "upvotes": 2,
    "commentTotal": 3,
    "author": {
      "name": "andrewstanton",
      "avatar": "https://avatars.githubusercontent.com/u/1765624?u=f8c6dc460c7614a8e79a913caaf919ef414bcd55&v=4",
      "url": "https://github.com/andrewstanton"
    },
    "comments": [
      {
        "author": "DanRibbens",
        "body": "Uploaded files having the same name as something already in storage will be renamed with a `-n` suffix for uniqueness such that `unknown.jpg` uploaded a 2nd time is saved as `unknown-1.jpg`. This should be happening automatically for you. If that is not the case you can open a bug for this issue.\r\n\r\nIf you prefer to have a unique hash instead, you'd need to do a bit of work which I can go into some detail if you want.\r\n\r\nLet me know what you think!"
      },
      {
        "author": "SimonVreman",
        "body": "Adding to this, it looks like a [`beforeOperation`](https://payloadcms.com/docs/hooks/collections#beforeoperation) hook on the collection is also suitable for this. A quick and dirty example:\r\n```js\r\nbeforeOperation: [async ({ args }) => {\r\n  const files = args.req?.files;\r\n  if (files && files.file && files.file.name) {\r\n    const parts = files.file.name.split('.');\r\n    files.file.name = `${(Math.random() + 1).toString(36).substring(2)}.${parts[parts.length - 1]}`;\r\n  }\r\n}]\r\n```\r\nIt just replaces the filename in the request before anything is saved. Note that this does not at all guarantee that the filename is unique, although depending on usage collision are probably rare anyway and in case they do happen we can rely on the built-in functionality of adding the `-n` suffix as Dan pointed out.\r\n\r\nUsing `handlers` on the upload might be 'better', but I prefer using a hook to stay consistent with the rest of my application."
      },
      {
        "author": "christian-reichart",
        "body": "I found this thread because I want to sanitize filenames to not include spaces.\r\nSince uploads always have a URL attached, should this maybe be a core functionality?\r\n\r\nsomething like `sanitizeFilename: true`?\r\n\r\nSolved it like this if anyone cares:\r\n\r\n```javascript\r\nimport { CollectionBeforeOperationHook } from 'payload/types'\r\n\r\n/**\r\n * Sanitizes the filename for upload collections to not include spaces or special characters\r\n */\r\nexport const sanitizeFileName: CollectionBeforeOperationHook = async ({\r\n  args,\r\n}) => {\r\n  const files = args.req?.files\r\n  if (\r\n    files !== undefined &&\r\n    files !== null &&\r\n    typeof files === 'object' &&\r\n    files.file !== undefined &&\r\n    files.file !== null &&\r\n    typeof files.file === 'object' &&\r\n    files.file.name !== undefined &&\r\n    files.file.name !== null &&\r\n    typeof files.file.name === 'string'\r\n  ) {\r\n    files.file.name = files.file.name.replace(/[^a-z0-9.]/gi, '_').toLowerCase()\r\n  }\r\n}\r\n```"
      }
    ]
  },
  {
    "title": "Enhancements for column order",
    "body": "<p dir=\"auto\">With <code class=\"notranslate\">defaultColumns</code> we have a nice way to define which columns to display initially. However:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">The columns can be modified anytime at which point the user preferences take precedence. To be exact, these prefs are actually written at the very moment we navigate to that collection in the admin panel, not just when toggling columns. This is kind of annoying when adding new <code class=\"notranslate\">defaultColumns</code> in development (I currently reset my prefs manually when changing <code class=\"notranslate\">defaultColumns</code>), but might also make users unaware of columns that were added to the collection after the fact.</p>\n</li>\n<li>\n<p dir=\"auto\">When adding columns in the view, these are always added to the left of the table. This puts a very specific requirement on all custom cell components, which is to include a link to the doc, or it won't be viewable/editable as long as that column is in first place (there's probably a good reason I'm missing here, but why not make the whole row clickable instead of just the first cell?). It is possible to reorder the columns by removing them and then clicking on the column buttons in the desired order in reverse (!), but this is does not feel intuitive to me. I think this would be better served with some kind of drag and drop UI.</p>\n</li>\n</ol>\n<p dir=\"auto\">An alternative to manual column order, which I would propose here, is to give each column a predetermined index based on its position in <code class=\"notranslate\">defaultColumns</code>, falling back to its position in the collection's <code class=\"notranslate\">fields</code> if it is not a default column. It might also make sense to prioritize the field specified in <code class=\"notranslate\">useAsTitle</code>, if given. This would be a breaking change, but it would give the developer more control over the presentation of the table.</p>\n<p dir=\"auto\">I'd also suggest changing the format of the preferences to explicitly include all available columns and using a boolean to indicate whether to show it or not: e.g. <code class=\"notranslate\">{ \"foo\": true, \"bar\": false, \"baz\": true}</code> (not sure if object keys have a stable order in mongo, otherwise it would be an array of objects or something to that effect). This would mean that we could also take into account any (default) columns that were added after the preferences were set, and display those until hidden explicitly.</p>\n<p dir=\"auto\">I look forward to hearing your thoughts on this!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1498",
    "id": "1498",
    "createdAt": "2022-11-23T15:35:53Z",
    "upvotes": 6,
    "commentTotal": 3,
    "author": {
      "name": "reiv",
      "avatar": "https://avatars.githubusercontent.com/u/205631?v=4",
      "url": "https://github.com/reiv"
    },
    "comments": [
      {
        "author": "cbrualdi",
        "body": "I share many of your thoughts and I agree that to improve this feature probably we should:\r\n\r\n- Save user preferences only when the preference is actually expressed, otherwise use the configuration values\r\n- Add new columns starting from the right\r\n- Provide a way to block or limit customization to some columns (sometimes we make custom fields or UI fields that don't make sense to be proposed in the list view)\r\n\r\nTo avoid breaking changes, how if we add a property like `allowColumnConfig` or similar, which can be `true`, `false` or an `{}`.\r\nIf an object, give the option to either explicitly include or explicitly exclude certain columns.\r\n\r\nJust to visualize:\r\n\r\n```js\r\nadmin: {\r\n  defaultColumns: [\r\n    \"foo\",\r\n    \"bar\",\r\n    \"baz\",\r\n  ],\r\n  allowColumnConfig: true // Default\r\n}\r\n```\r\n\r\nThis would be the default and does not change the current behavior.\r\n\r\n```js\r\nadmin: {\r\n  defaultColumns: [\r\n    \"foo\",\r\n    \"bar\",\r\n    \"baz\",\r\n  ],\r\n  allowColumnConfig: false\r\n}\r\n```\r\n\r\nThis would completely hide the Columns button giving us the ability to offer an immutable view.\r\n\r\n```js\r\nadmin: {\r\n  defaultColumns: [\r\n    \"foo\",\r\n    \"bar\",\r\n  ],\r\n  allowColumnConfig: {\r\n    include: [\r\n      \"foo\",\r\n      \"bar\",\r\n      \"baz\",\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThis would limit the possible columns to a defined subset of columns that makes sense to us.\r\n\r\n```js\r\nadmin: {\r\n  defaultColumns: [\r\n    \"foo\",\r\n    \"bar\",\r\n  ],\r\n  allowColumnConfig: {\r\n    exclude: [\r\n      \"baz\",\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nAnd this would allow us to explicitly exclude columns that aren't supported or that wouldn't make sense.\r\n\r\nIn this way we would keep the concept of default ordering, but have also a config object to further extend in future.\r\n\r\nIt would have been nice to have both `defaultColumns` and `allowColumnConfig` under one `columns` property, but this is perhaps not possible without introducing a breaking change.\r\n\r\nWhat do you think? Would it cover all the main use cases you mentioned?"
      },
      {
        "author": "jacobsfletch",
        "body": "Related: https://github.com/payloadcms/payload/discussions/1413"
      },
      {
        "author": "jacobsfletch",
        "body": "> but why not make the whole row clickable instead of just the first cell?\r\n\r\nThis is because you may render custom cell components and this would be conflicting.\r\n\r\n> I think this would be better served with some kind of drag and drop UI.\r\n\r\nThis is a great idea and something @phillipmalboeuf is taking on in PR https://github.com/payloadcms/payload/pull/1865"
      }
    ]
  },
  {
    "title": "Allow reordering records in the List view via drag-and-drop",
    "body": "<p dir=\"auto\">We should support reordering document in the List view by some specified field property. It should support drag-and-drop.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1413",
    "id": "1413",
    "createdAt": "2022-11-15T13:17:06Z",
    "upvotes": 5,
    "commentTotal": 5,
    "author": {
      "name": "jmikrut",
      "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
      "url": "https://github.com/jmikrut"
    },
    "comments": [
      {
        "author": "coxmi",
        "body": "Would you also consider a hierarchical list view, with drag and drop?"
      },
      {
        "author": "quornik",
        "body": "Reordering bu also delete and bulk delete of records, would be great features."
      },
      {
        "author": "jacobsfletch",
        "body": "Related: https://github.com/payloadcms/payload/discussions/1498"
      },
      {
        "author": "phillipmalboeuf",
        "body": "Hey gang @jmikrut @jacobsfletch, I've started work on this, see discord thread: [thread](https://discord.com/channels/967097582721572934/1063111110070370324) and [github compare](https://github.com/payloadcms/payload/compare/master...phillipmalboeuf:payload:feat/sortable-columns)\r\nCould you let me know what kind of tests and documentation would be needed for it?"
      },
      {
        "author": "phillipmalboeuf",
        "body": "Opened a PR: https://github.com/payloadcms/payload/pull/1865"
      }
    ]
  },
  {
    "title": "OpenAPI specification",
    "body": "<p dir=\"auto\">It would be nice if Payload could generate an OpenAPI specification for its REST API. This could in turn be used to generate client skeletons for the likes of mobile apps and SPAs, or as documentation for external consumers of the API.</p>\n<p dir=\"auto\">It is already possible to generate JSON schema for the collections (those are used by the type generator script). The missing parts are (to my best understanding):</p>\n<ul dir=\"auto\">\n<li>generating OpenAPI specifications for data fetching and update endpoints for all collections and globals</li>\n<li>implementing a way to document custom endpoints</li>\n<li>writing an OpenAPI spec for the built-in endpoints (auth, version control, ...)</li>\n</ul>\n<p dir=\"auto\">The second and third part seem the most difficult to me. However, even having documentation for data fetching on collections and globals would be tremendously helpful for me.</p>\n<p dir=\"auto\">I also think I could be able to help coding the first part if that's desirable.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1780",
    "id": "1780",
    "createdAt": "2022-12-30T16:08:52Z",
    "upvotes": 3,
    "commentTotal": 1,
    "author": {
      "name": "Teyras",
      "avatar": "https://avatars.githubusercontent.com/u/461515?u=33bfa176abaad799936b63ef0ab6ee8d694c7f1b&v=4",
      "url": "https://github.com/Teyras"
    },
    "comments": [
      {
        "author": "jacobsfletch",
        "body": "@Teyras this all sounds great, totally see the value here. Would you be willing to take this on? I'm going to add this to our roadmap as priority 3. We can help as needed here if you want to blaze the way forward. The first and third bullets seem very similar to me. And custom endpoints would have to be spec'd out by hand, so we'd likely need to expose some way of injecting this into the Payload config alongside the other specs."
      }
    ]
  },
  {
    "title": "Richtext - Allow indention of a new line",
    "body": "<p dir=\"auto\">Currently, can only indent whole paragraphs. This however is quite annoying if the target website leaves quite a bit of space between paragraphs.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1863",
    "id": "1863",
    "createdAt": "2023-01-12T18:05:59Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "johannesschaffer",
      "avatar": "https://avatars.githubusercontent.com/u/95882626?v=4",
      "url": "https://github.com/johannesschaffer"
    },
    "comments": []
  }
]