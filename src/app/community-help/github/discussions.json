[
  {
    "title": "Pass `req` to all local API operations?",
    "body": "<p dir=\"auto\">As described in the documentation about the local API for <a href=\"https://payloadcms.com/docs/local-api/overview#auth-operations\" rel=\"nofollow\">\"Auth Operations\"</a> it is possible to pass a <code class=\"notranslate\">req</code> express object into the local API call, that will be forwarded to all hooks. The documentation about the CRUD operations is missing this option, but for some of the operations it is also possible to pass in a <code class=\"notranslate\">req</code> object.</p>\n<p dir=\"auto\">The \"create\" operation offers to pass in a <code class=\"notranslate\">req</code> object:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    await payload.create({\n      collection: 'users',\n      data: {\n        ...\n      },\n      req: customReq // passing custom req to all hooks is working ✅\n    })\"><pre class=\"notranslate\">    <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">'users'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">data</span>: <span class=\"pl-kos\">{</span>\n        ...\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">req</span>: <span class=\"pl-s1\">customReq</span> <span class=\"pl-c\">// passing custom req to all hooks is working ✅</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">Unluckily this is only possible for \"create\", \"find\", \"findVersionByID\" or \"findById\", but not for \"delete\", \"findVersions\", \"restoreVersion\" or \"update\", e.g.:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    await payload.update({\n      collection: 'users',\n      id: ...\n      data: {\n        ...\n      },\n      req: customReq // NOT ALLOWED and non functional ❌\n    })\"><pre class=\"notranslate\">    <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">update</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">'users'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">id</span>: ...\n      <span class=\"pl-s1\">data</span>: <span class=\"pl-kos\">{</span>\n        ...\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">req</span>: <span class=\"pl-s1\">customReq</span> <span class=\"pl-c\">// NOT ALLOWED and non functional ❌</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">Looking at the source, for e.g. <a href=\"https://github.com/payloadcms/payload/blob/master/src/collections/operations/local/delete.ts#L11-L19\">\"update\"</a> there is no <code class=\"notranslate\">req</code> property like in <a href=\"https://github.com/payloadcms/payload/blob/master/src/collections/operations/local/create.ts#L27\">\"create\"</a>.</p>\n<p dir=\"auto\">Is this intended, that only read operations are allowed to pass in a <code class=\"notranslate\">req</code> object, or is this possible a misalignment that can be fixed to allow all operations to pass a <code class=\"notranslate\">req</code> object?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2168",
    "id": "2168",
    "createdAt": "2023-02-23T08:02:32Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "fabianbru",
      "avatar": "https://avatars.githubusercontent.com/u/12710816?u=4d4277076620acda5fdb0cd903c35fd3755c57e0&v=4",
      "url": "https://github.com/fabianbru"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Automatically regenerate media sizes",
    "body": "<p dir=\"auto\">This is a commonly asked topic and it just came up in Discord today, so I figured I would share a quick script that the team and I use for our Payload projects when we need something like WP's \"Regenerate Thumbnails\" plugin. Basically if you update your <code class=\"notranslate\">imageSizes</code> and want to automatically re-run the image transformations for each one of your uploads, this can be super handy.</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const payload = require('payload');\nconst path = require('path');\n\nrequire('dotenv').config();\n\nconst { PAYLOAD_SECRET_KEY, MONGO_URL } = process.env;\n\npayload.init({\n  secret: PAYLOAD_SECRET_KEY,\n  mongoURL: MONGO_URL,\n  local: true,\n});\n\nconst regenerateMediaSizes = async () =&gt; {\n  try {\n    const media = await payload.find({\n      collection: 'media',\n      depth: 0,\n      limit: 300,\n    });\n    await Promise.all(media.docs.map(async (mediaDoc) =&gt; {\n      try {\n        const staticDir = path.resolve(__dirname, '../media');\n\n        await payload.update({\n          collection: 'media',\n          id: mediaDoc.id,\n          data: mediaDoc,\n          filePath: `${staticDir}/${mediaDoc.filename}`,\n          overwriteExistingFiles: true,\n        });\n\n        console.log(`Media ${mediaDoc.alt || mediaDoc.id} regenerated successfully`);\n      } catch (err) {\n        console.error(`Media ${mediaDoc.alt || mediaDoc.id} failed to regenerate`);\n        console.error(err);\n      }\n    }));\n  } catch (err) {\n    console.log('Unable to find documents with payload');\n    console.error(err);\n    process.exit(0);\n  }\n\n  console.log('Media size regeneration completed!');\n  process.exit(0);\n};\n\nregenerateMediaSizes();\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">payload</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'payload'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">path</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'path'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dotenv'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">config</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">PAYLOAD_SECRET_KEY</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">MONGO_URL</span> <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">secret</span>: <span class=\"pl-c1\">PAYLOAD_SECRET_KEY</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">mongoURL</span>: <span class=\"pl-c1\">MONGO_URL</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">local</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">regenerateMediaSizes</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">media</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">find</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">'media'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">depth</span>: <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">limit</span>: <span class=\"pl-c1\">300</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">await</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">all</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">media</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">docs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">staticDir</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">__dirname</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'../media'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n        <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">update</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n          <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">'media'</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">id</span>: <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">data</span>: <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">filePath</span>: <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">staticDir</span><span class=\"pl-kos\">}</span></span>/<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">filename</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">overwriteExistingFiles</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Media <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">alt</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">}</span></span> regenerated successfully`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Media <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">alt</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">mediaDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">}</span></span> failed to regenerate`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Unable to find documents with payload'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exit</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Media size regeneration completed!'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exit</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">regenerateMediaSizes</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">If you save this file as <code class=\"notranslate\">regenerateMediaSizes.js</code>, then all you need to do to run it is <code class=\"notranslate\">node ./regenerateMediaSizes.js</code> and boom.</p>\n<p dir=\"auto\">Related: <a aria-label=\"Discussion #434\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3864145\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/434\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/434/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/434\">#434</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1834",
    "id": "1834",
    "createdAt": "2023-01-09T19:32:34Z",
    "upvotes": 5,
    "commentTotal": 3,
    "author": {
      "name": "jmikrut",
      "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
      "url": "https://github.com/jmikrut"
    },
    "comments": [
      {
        "author": {
          "name": "fabioquarantini",
          "avatar": "https://avatars.githubusercontent.com/u/425733?v=4",
          "url": "https://github.com/fabioquarantini"
        },
        "body": "<p dir=\"auto\">How to delete old unused thumbnails?</p>",
        "createdAt": "2023-02-08T10:54:30Z",
        "replies": null
      },
      {
        "author": {
          "name": "ChristopherNowlan",
          "avatar": "https://avatars.githubusercontent.com/u/12365706?u=bfc7e970179dda53bca635087442765a127e08a4&v=4",
          "url": "https://github.com/ChristopherNowlan"
        },
        "body": "<p dir=\"auto\">I had to move payload init function into the regenerateMediaSizes async function. Because my config file was within the src directory I had to update the command to be <code class=\"notranslate\">cross-env PAYLOAD_CONFIG_PATH=dist/payload.config.js node ./regenerateMediaSizes.js</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const payload = require('payload');\nconst path = require('path');\n\nrequire('dotenv').config();\n\nconst { PAYLOAD_SECRET_KEY, MONGO_URL } = process.env;\n\nconst regenerateMediaSizes = async () =&gt; {\n  try {\n\n  await payload.init({\n        secret: PAYLOAD_SECRET_KEY,\n        mongoURL: MONGODB_URL,\n        local: true,\n    });\n\n    const media = await payload.find({\n      collection: 'media',\n      depth: 0,\n      limit: 300,\n    });\n\n    await Promise.all(media.docs.map(async (mediaDoc) =&gt; {\n      try {\n        const staticDir = path.resolve(__dirname, '../media');\n\n        await payload.update({\n          collection: 'media',\n          id: mediaDoc.id,\n          data: mediaDoc,\n          filePath: `${staticDir}/${mediaDoc.filename}`,\n          overwriteExistingFiles: true,\n        });\n\n        console.log(`Media ${mediaDoc.alt || mediaDoc.id} regenerated successfully`);\n      } catch (err) {\n        console.error(`Media ${mediaDoc.alt || mediaDoc.id} failed to regenerate`);\n        console.error(err);\n      }\n    }));\n  } catch (err) {\n    console.log('Unable to find documents with payload');\n    console.error(err);\n    process.exit(0);\n  }\n\n  console.log('Media size regeneration completed!');\n  process.exit(0);\n};\n\nregenerateMediaSizes();\"><pre class=\"notranslate\"><code class=\"notranslate\">const payload = require('payload');\nconst path = require('path');\n\nrequire('dotenv').config();\n\nconst { PAYLOAD_SECRET_KEY, MONGO_URL } = process.env;\n\nconst regenerateMediaSizes = async () =&gt; {\n  try {\n\n  await payload.init({\n        secret: PAYLOAD_SECRET_KEY,\n        mongoURL: MONGODB_URL,\n        local: true,\n    });\n\n    const media = await payload.find({\n      collection: 'media',\n      depth: 0,\n      limit: 300,\n    });\n\n    await Promise.all(media.docs.map(async (mediaDoc) =&gt; {\n      try {\n        const staticDir = path.resolve(__dirname, '../media');\n\n        await payload.update({\n          collection: 'media',\n          id: mediaDoc.id,\n          data: mediaDoc,\n          filePath: `${staticDir}/${mediaDoc.filename}`,\n          overwriteExistingFiles: true,\n        });\n\n        console.log(`Media ${mediaDoc.alt || mediaDoc.id} regenerated successfully`);\n      } catch (err) {\n        console.error(`Media ${mediaDoc.alt || mediaDoc.id} failed to regenerate`);\n        console.error(err);\n      }\n    }));\n  } catch (err) {\n    console.log('Unable to find documents with payload');\n    console.error(err);\n    process.exit(0);\n  }\n\n  console.log('Media size regeneration completed!');\n  process.exit(0);\n};\n\nregenerateMediaSizes();\n</code></pre></div>",
        "createdAt": "2023-02-16T00:33:55Z",
        "replies": null
      },
      {
        "author": {
          "name": "andriasang",
          "avatar": "https://avatars.githubusercontent.com/u/1675838?u=cffdf8406911e832c6e88b302b46d5e426936aaa&v=4",
          "url": "https://github.com/andriasang"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> : Is this script compatible with the <a href=\"https://github.com/payloadcms/plugin-cloud-storage\">cloud storage plugin</a>?  I removed the \"filePath\" section of the update call and it seems that every image in my collection is being iterated over but the sizes area is just  empty objects:</p>\n<p dir=\"auto\">sizes: { w400: {}, w768: {}, w1024: {} },</p>",
        "createdAt": "2023-02-23T03:20:12Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Add field option for \"unique or null\"",
    "body": "<p dir=\"auto\">Sometimes a piece of data can be optional, but if it is filled in, it must be unique.</p>\n<p dir=\"auto\">Unique and required</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  unique: true,\n  required: true\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">unique</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Unique and not required: null can exist once</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  unique: true,\n  required: false\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">unique</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">false</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Unique or null: null can exist multiple times</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  uniqueOrNull: true,\n  required: false\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">uniqueOrNull</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">false</span>\n<span class=\"pl-kos\">}</span></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2072",
    "id": "2072",
    "createdAt": "2023-02-13T08:15:13Z",
    "upvotes": 5,
    "commentTotal": 2,
    "author": {
      "name": "thgh",
      "avatar": "https://avatars.githubusercontent.com/u/1109982?u=6cd0299e82d500b4ba200c5ebd1d3134896cb307&v=4",
      "url": "https://github.com/thgh"
    },
    "comments": [
      {
        "author": {
          "name": "hades200082",
          "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
          "url": "https://github.com/hades200082"
        },
        "body": "<p dir=\"auto\">I'm not sure what use-cases exist for the \"null can exist once\" option.</p>\n<p dir=\"auto\">It would seem to me that if unique is true and required is false it should imply \"unique or null\".</p>",
        "createdAt": "2023-02-13T08:59:08Z",
        "replies": [
          {
            "author": {
              "name": "thgh",
              "avatar": "https://avatars.githubusercontent.com/u/1109982?u=6cd0299e82d500b4ba200c5ebd1d3134896cb307&v=4",
              "url": "https://github.com/thgh"
            },
            "body": "<p dir=\"auto\">Got the same gut feeling, but did actually encounter a usecase for \"null can exist once\" so I would not make it impossible. Also, it is the default behaviour for unique in postgres.</p>",
            "createdAt": "2023-02-13T13:46:16Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">This is valid, I agree!</p>\n<p dir=\"auto\">In Mongo we add the <code class=\"notranslate\">sparse</code> option to the index as in the case of localized fields. I noticed the other day that we have no way of allowing <code class=\"notranslate\">sparse</code> in the config which is exactly what we need for this requirement.</p>",
            "createdAt": "2023-02-13T16:54:55Z"
          },
          {
            "author": {
              "name": "thgh",
              "avatar": "https://avatars.githubusercontent.com/u/1109982?u=6cd0299e82d500b4ba200c5ebd1d3134896cb307&v=4",
              "url": "https://github.com/thgh"
            },
            "body": "<p dir=\"auto\">About localized: it seems that if I enable/disable localized, the sparse index stays whatever it was when the field was added. Is this intended behaviour? It caused a bug in a production deployment, did not expect it.</p>",
            "createdAt": "2023-02-22T13:19:41Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">Sorry this caused an issue for you <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/thgh/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/thgh\">@thgh</a>. It has always worked this way. Payload will not remove or change existing indexes from changing the config. As you found out, you have to manually remove them to be re-created automatically when Payload starts again.</p>",
            "createdAt": "2023-02-22T20:18:47Z"
          }
        ]
      },
      {
        "author": {
          "name": "hades200082",
          "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
          "url": "https://github.com/hades200082"
        },
        "body": "<p dir=\"auto\">Instead of</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  uniqueOrNull: true,\n  required: false\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">uniqueOrNull</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">false</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Might be better to have <code class=\"notranslate\">unique</code> typed as <code class=\"notranslate\">boolean | { allowNulls: boolean }</code> and used like this:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  unique: {\n    allowNulls: true\n  },\n  required: false\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">unique</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">allowNulls</span>: <span class=\"pl-c1\">true</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">false</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">This retains backwards compatibility with current versions, but adds the new feature without needing a new property.</p>\n<p dir=\"auto\">A later major version <em>could</em> remove the backwards compact and switch it to <code class=\"notranslate\">false | { allowNulls: boolean }</code>, the implication bing that if an object is passed then unique is true, and the allowNulls must then be set explicitly.</p>",
        "createdAt": "2023-02-21T08:20:29Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Cannot customize rich text link base fields",
    "body": "<p dir=\"auto\">From what I can tell, there isn't a way to customize the fields that the link modal that displays in rich text fields. The custom fields and the native fields are isolated from each other.</p>\n<p dir=\"auto\"></p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/payloadcms/payload/blob/baf5b10d23306e3c6bd5ad43c6e0b9b48cf7c334/src/admin/components/forms/field-types/RichText/elements/link/LinkDrawer/baseFields.ts#L16\">payload/src/admin/components/forms/field-types/RichText/elements/link/LinkDrawer/baseFields.ts</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 16\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/payloadcms/payload/commit/baf5b10d23306e3c6bd5ad43c6e0b9b48cf7c334\">baf5b10</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L16\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"16\"></td>\n          <td id=\"LC16\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-en\">getBaseFields</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">config</span>: <span class=\"pl-smi\">Config</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\">Field</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">[</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\"></p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/payloadcms/payload/blob/25c5b784e119c638d0c9d25fee4309df02244861/src/admin/components/forms/field-types/RichText/elements/link/Button/index.tsx#L71-L89\">payload/src/admin/components/forms/field-types/RichText/elements/link/Button/index.tsx</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 71 to 89\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/payloadcms/payload/commit/25c5b784e119c638d0c9d25fee4309df02244861\">25c5b78</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L71\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"71\"></td>\n          <td id=\"LC71\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">const</span> <span class=\"pl-s1\">fields</span>: <span class=\"pl-smi\">Field</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L72\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"72\"></td>\n          <td id=\"LC72\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   ...<span class=\"pl-en\">getBaseFields</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">config</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L73\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"73\"></td>\n          <td id=\"LC73\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L74\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"74\"></td>\n          <td id=\"LC74\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L75\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"75\"></td>\n          <td id=\"LC75\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">customFieldSchema</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L76\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"76\"></td>\n          <td id=\"LC76\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-s1\">fields</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L77\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"77\"></td>\n          <td id=\"LC77\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'fields'</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L78\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"78\"></td>\n          <td id=\"LC78\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'group'</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L79\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"79\"></td>\n          <td id=\"LC79\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-c1\">admin</span>: <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L80\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"80\"></td>\n          <td id=\"LC80\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c1\">style</span>: <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L81\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"81\"></td>\n          <td id=\"LC81\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-c1\">margin</span>: <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L82\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"82\"></td>\n          <td id=\"LC82\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-c1\">padding</span>: <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L83\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"83\"></td>\n          <td id=\"LC83\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-c1\">borderTop</span>: <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L84\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"84\"></td>\n          <td id=\"LC84\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-c1\">borderBottom</span>: <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L85\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"85\"></td>\n          <td id=\"LC85\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L86\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"86\"></td>\n          <td id=\"LC86\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L87\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"87\"></td>\n          <td id=\"LC87\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-c1\">fields</span>: <span class=\"pl-s1\">customFieldSchema</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L88\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"88\"></td>\n          <td id=\"LC88\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L89\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"89\"></td>\n          <td id=\"LC89\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-kos\">}</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">This means users can't:</p>\n<ul dir=\"auto\">\n<li>Create custom validation for the URL field (e.g. disallowing links to certain domains)</li>\n<li>Change the collections that the are referenced in the internal link option <a aria-label=\"Discussion #2095\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4859249\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/2095\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/2095/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/2095\">#2095</a> (e.g. removing collections that do not have URLs like <code class=\"notranslate\">Users</code>)</li>\n<li>Minimize the amount of data that is returned by the internal link option (per answer from the Payload team in <a aria-label=\"Discussion #1960\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4798143\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1960\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1960/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1960\">#1960</a>)</li>\n<li>Remove the option for either internal links or custom URLs</li>\n<li>Remove the open in new tab checkbox</li>\n</ul>",
    "url": "https://github.com/payloadcms/payload/discussions/2167",
    "id": "2167",
    "createdAt": "2023-02-22T18:00:22Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "evelynhathaway",
      "avatar": "https://avatars.githubusercontent.com/u/38994283?u=87cba3ad2e2b4ac6fe1b26ca72f0eac8788cb645&v=4",
      "url": "https://github.com/evelynhathaway"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/evelynhathaway/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/evelynhathaway\">@evelynhathaway</a> — this is a great call. It should also be pretty easy to accomplish.</p>\n<p dir=\"auto\">I think what we need to do is expose a property on the richText field as follows:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"field.admin.link.overrideDefaultFields = (defaultFields) =&gt; newFields\"><pre class=\"notranslate\"><code class=\"notranslate\">field.admin.link.overrideDefaultFields = (defaultFields) =&gt; newFields\n</code></pre></div>\n<p dir=\"auto\">Basically, it'd be a function that would accept default fields and allow Payload devs to return them modified to suit their purpose.</p>\n<p dir=\"auto\">I don't think that this would be a good way to filter down the data returned still though... That might need to be done with an additional function - say something like:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"field.reduceRelationshipData = ({ doc, slug }) =&gt; doc\"><pre class=\"notranslate\"><code class=\"notranslate\">field.reduceRelationshipData = ({ doc, slug }) =&gt; doc\n</code></pre></div>\n<p dir=\"auto\">This function could be shared and reused with any relationship populated by the rich text field. It could also automatically type the <code class=\"notranslate\">doc</code> arg via the collection <code class=\"notranslate\">slug</code> argument, like we do within our local API methods. It would also type the returned <code class=\"notranslate\">doc</code> as a <code class=\"notranslate\">Partial</code>.</p>\n<p dir=\"auto\">We'd run this function each time we populate an <code class=\"notranslate\">upload</code> or <code class=\"notranslate\">relationship</code> field within rich text.</p>\n<p dir=\"auto\">What do you think? This is a great feature. Not necessarily a bug or an issue, so I will move this to discussions, but I think this should be built ASAP.</p>\n<p dir=\"auto\">Speaking of moving this to a discussion, I will add this to the roadmap as Priority 2 (to be released within next quarter or sooner). But in the meantime we would happily accept a PR for this. If you're up for it, I am happy to help provide more info on how this would need to be accomplished.</p>\n<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
        "createdAt": "2023-02-22T18:28:54Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "How to use internal links in Rich Text without overloading the client with data?",
    "body": "<p dir=\"auto\">Hello!</p>\n<p dir=\"auto\">I want to use the functionality of internal links to other documents in the project. This is very handy so that I don't lose links when the document slug changes or the URL structure changes, for example. But along with the required fields of the target page (urlSlug, title), I even get the whole Rich-text document on the client ... how can I bypass this to get only the required fields?</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/614922/215115243-9714fd06-d331-4b07-a8b7-56df68eb7a88.png\"><img src=\"https://user-images.githubusercontent.com/614922/215115243-9714fd06-d331-4b07-a8b7-56df68eb7a88.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">how can I exclude text field from getting it? I use GraphQL to get data from server.</p>\n<p dir=\"auto\">Should I filter it on the server? Is it the only solution?</p>\n<p dir=\"auto\">Thank you in advance!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1960",
    "id": "1960",
    "createdAt": "2023-01-27T14:56:33Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "Kikky",
      "avatar": "https://avatars.githubusercontent.com/u/614922?v=4",
      "url": "https://github.com/Kikky"
    },
    "comments": [
      {
        "author": {
          "name": "Kikky",
          "avatar": "https://avatars.githubusercontent.com/u/614922?v=4",
          "url": "https://github.com/Kikky"
        },
        "body": "<p dir=\"auto\">As I understand, I need to sepcify correct value for maxDepth property of the relationship field in link native element? How can I do it? Or I have to override somehow native link element?</p>",
        "createdAt": "2023-01-28T07:24:04Z",
        "replies": [
          {
            "author": {
              "name": "JessChowdhury",
              "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
              "url": "https://github.com/JessChowdhury"
            },
            "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Kikky/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Kikky\">@Kikky</a> - yes you'll want to set a maxDepth on the relationship field which looks like this:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  name: 'link',\n  type: 'relationship',\n  relationTo: ['posts', 'pages'],\n  maxDepth: 1,\n}\"><pre class=\"notranslate\">{\n  name: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>link<span class=\"pl-pds\">'</span></span>,\n  type: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>relationship<span class=\"pl-pds\">'</span></span>,\n  relationTo: [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>posts<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>pages<span class=\"pl-pds\">'</span></span>],\n  maxDepth: 1,\n}</pre></div>\n<p dir=\"auto\">You may want to reduce it further to <code class=\"notranslate\">maxDepth: 0</code>, try updating these and comparing your returned data.</p>",
            "createdAt": "2023-02-01T17:13:50Z"
          },
          {
            "author": {
              "name": "evelynhathaway",
              "avatar": "https://avatars.githubusercontent.com/u/38994283?u=87cba3ad2e2b4ac6fe1b26ca72f0eac8788cb645&v=4",
              "url": "https://github.com/evelynhathaway"
            },
            "body": "<p dir=\"auto\">I don't think this solution is possible. I created <a aria-label=\"Issue #2166\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1595554186\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/2166\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/2166/hovercard\" href=\"https://github.com/payloadcms/payload/issues/2166\">#2166</a> to track the capability that would solve the author's request.</p>",
            "createdAt": "2023-02-22T18:06:53Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "Kikky",
        "avatar": "https://avatars.githubusercontent.com/u/614922?v=4",
        "url": "https://github.com/Kikky"
      },
      "body": "<p dir=\"auto\">As I understand, I need to sepcify correct value for maxDepth property of the relationship field in link native element? How can I do it? Or I have to override somehow native link element?</p>",
      "createdAt": "2023-01-28T07:24:04Z",
      "chosenAt": "2023-02-09T16:31:46Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Storybook for admin components",
    "body": "<p dir=\"auto\">Looking to add custom admin react components, but wanted to leverage the build in styles already created by payload. Is there a storybook or doc site that would show all available components?</p>\n<p dir=\"auto\">Example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;button className=&quot;btn btn--size-medium btn--style-primary btn--has-tooltip&quot;&gt;\n      Text\n&lt;/button&gt;\"><pre class=\"notranslate\"><code class=\"notranslate\">&lt;button className=\"btn btn--size-medium btn--style-primary btn--has-tooltip\"&gt;\n      Text\n&lt;/button&gt;\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2165",
    "id": "2165",
    "createdAt": "2023-02-22T17:56:50Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "msoyka",
      "avatar": "https://avatars.githubusercontent.com/u/16545161?u=935924df8801901fb3de97e35690a104856bbcbc&v=4",
      "url": "https://github.com/msoyka"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Can't connect Media Upload to another Collection",
    "body": "<p dir=\"auto\">I have two collections. One is Product and another one is Media. As the name suggests, I want to link the Media collection with the Product collection through a relationship field in the Product collection. Even though it runs perfectly and appears on the UI but whenever I want to create a new document of Products collection I am getting an error saying - <code class=\"notranslate\">The following field value is invalid: filename</code>. I am using <code class=\"notranslate\">@payloadcms/plugin-cloud-storage/azure</code> for uploading media on azure which is working as expected.</p>\n<p dir=\"auto\">Product Collection:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const Products = {\n    slug: 'products',\n    admin: {\n      useAsTitle: 'name',\n    },\n    fields: [\n      {\n        name: 'name',\n        type: 'text',\n      },\n      {\n        name: 'price',\n        type: 'number',\n      },\n      {\n          name: 'image',\n          type: 'relationship',\n          relationTo: 'media',\n      }\n    ],\n  }\n  \n  export default Products;\"><pre class=\"notranslate\"><code class=\"notranslate\">const Products = {\n    slug: 'products',\n    admin: {\n      useAsTitle: 'name',\n    },\n    fields: [\n      {\n        name: 'name',\n        type: 'text',\n      },\n      {\n        name: 'price',\n        type: 'number',\n      },\n      {\n          name: 'image',\n          type: 'relationship',\n          relationTo: 'media',\n      }\n    ],\n  }\n  \n  export default Products;\n</code></pre></div>\n<p dir=\"auto\">Media collection:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const Media = {\n    slug: 'media',\n    upload: true,\n    fields: [\n        {\n            name: 'image',\n            type: 'upload',\n            relationTo: 'products',\n        }\n    ],\n}\n\nexport default Media;\"><pre class=\"notranslate\"><code class=\"notranslate\">const Media = {\n    slug: 'media',\n    upload: true,\n    fields: [\n        {\n            name: 'image',\n            type: 'upload',\n            relationTo: 'products',\n        }\n    ],\n}\n\nexport default Media;\n</code></pre></div>\n<p dir=\"auto\">This is my buildConfig -</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"export default buildConfig({\n  serverURL: 'http://localhost:3000',\n  admin: {\n    user: Users.slug,\n  },\n  collections: [\n    Users,\n    Products,\n    Media\n  ],\n  plugins: [\n    cloudStorage({\n      collections: {\n        media: {\n          adapter: azureAdapter,\n          disablePayloadAccessControl: true\n        },\n      },\n    })\n  ],\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">export default buildConfig({\n  serverURL: 'http://localhost:3000',\n  admin: {\n    user: Users.slug,\n  },\n  collections: [\n    Users,\n    Products,\n    Media\n  ],\n  plugins: [\n    cloudStorage({\n      collections: {\n        media: {\n          adapter: azureAdapter,\n          disablePayloadAccessControl: true\n        },\n      },\n    })\n  ],\n});\n</code></pre></div>\n<p dir=\"auto\">The issue:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/24480497/185422663-c293c39c-a3ff-4746-9fb6-be906619015b.png\"><img src=\"https://user-images.githubusercontent.com/24480497/185422663-c293c39c-a3ff-4746-9fb6-be906619015b.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Any help would be appreciated!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/962",
    "id": "962",
    "createdAt": "2022-08-18T14:38:48Z",
    "upvotes": 2,
    "commentTotal": 3,
    "author": {
      "name": "afifaniks",
      "avatar": "https://avatars.githubusercontent.com/u/24480497?u=d1b0d406637cfd2b30d6edb88f22034bb47cf6a7&v=4",
      "url": "https://github.com/afifaniks"
    },
    "comments": [
      {
        "author": {
          "name": "sowmyapeta",
          "avatar": "https://avatars.githubusercontent.com/u/11541541?v=4",
          "url": "https://github.com/sowmyapeta"
        },
        "body": "<p dir=\"auto\">Image type in Products should be 'upload' and not 'relationship'<br>\n{<br>\nname: 'image',<br>\ntype: 'upload',<br>\nrelationTo: 'media',<br>\n},</p>\n<p dir=\"auto\">Fields in media should be any fields which you want to describe about the image uploaded.<br>\nfields: [<br>\n{<br>\nname: 'alt',<br>\nlabel: 'Alt Text',<br>\ntype: 'text',<br>\n},<br>\n],</p>",
        "createdAt": "2022-08-18T15:19:19Z",
        "replies": [
          {
            "author": {
              "name": "afifaniks",
              "avatar": "https://avatars.githubusercontent.com/u/24480497?u=d1b0d406637cfd2b30d6edb88f22034bb47cf6a7&v=4",
              "url": "https://github.com/afifaniks"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/sowmyapeta/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sowmyapeta\">@sowmyapeta</a> Thank you! However, even with that, I'm still getting the same error!</p>",
            "createdAt": "2022-08-18T15:37:45Z"
          }
        ]
      },
      {
        "author": {
          "name": "afifaniks",
          "avatar": "https://avatars.githubusercontent.com/u/24480497?u=d1b0d406637cfd2b30d6edb88f22034bb47cf6a7&v=4",
          "url": "https://github.com/afifaniks"
        },
        "body": "<p dir=\"auto\">It looks like, the issue was due to my MongoDB cluster. I deleted the collection from my db cluster and the problem was fixed!</p>",
        "createdAt": "2022-08-18T17:06:09Z",
        "replies": null
      },
      {
        "author": {
          "name": "marpstar",
          "avatar": "https://avatars.githubusercontent.com/u/1839701?u=f24a97131bb9852bf676530c12abf6d6c7a7166d&v=4",
          "url": "https://github.com/marpstar"
        },
        "body": "<p dir=\"auto\">I just wanted to offer a solution to this error message. I encountered this error message when switching from   using</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  name: &quot;media&quot;,\n  type: &quot;relationship&quot;,\n  relationTo: &quot;media&quot;,\n  hasMany: true,\n},\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n  name: \"media\",\n  type: \"relationship\",\n  relationTo: \"media\",\n  hasMany: true,\n},\n</code></pre></div>\n<p dir=\"auto\">to</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  name: &quot;images&quot;,\n  type: &quot;array&quot;,\n  fields: [\n    {\n      name: &quot;image&quot;,\n      type: &quot;upload&quot;,\n      relationTo: &quot;media&quot;\n    },\n  ],\n},\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n  name: \"images\",\n  type: \"array\",\n  fields: [\n    {\n      name: \"image\",\n      type: \"upload\",\n      relationTo: \"media\"\n    },\n  ],\n},\n</code></pre></div>\n<p dir=\"auto\">The first of which created an index on my collection for the filename of the <code class=\"notranslate\">media</code> field. I had to use Mongo Compass to find that index and drop it. Once I did, everything started working fine again.</p>",
        "createdAt": "2023-02-22T16:13:34Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "afifaniks",
        "avatar": "https://avatars.githubusercontent.com/u/24480497?u=d1b0d406637cfd2b30d6edb88f22034bb47cf6a7&v=4",
        "url": "https://github.com/afifaniks"
      },
      "body": "<p dir=\"auto\">It looks like, the issue was due to my MongoDB cluster. I deleted the collection from my db cluster and the problem was fixed!</p>",
      "createdAt": "2022-08-18T17:06:09Z",
      "chosenAt": "2022-08-18T17:06:42Z",
      "chosenBy": "afifaniks"
    }
  },
  {
    "title": "Payload admin dashboard sorting does not work after version 1.3.0 to 1.6.11 upgrade",
    "body": "<p dir=\"auto\">I have recently upgraded Payloadcms from version 1.3.0 to 1.6.11 and read and followed the changelog carefully.<br>\nI have fixed most of my issues. The only thing I could not fix is that the Payload admin dashboard functionality does not seem to be working for me. When I try to sort a collection by title or date, it does not work. If I downgrade to v 1.3.0, it works fine. Am I missing any config tweaks in the migration process? I would be grateful for your help.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2121",
    "id": "2121",
    "createdAt": "2023-02-17T14:49:59Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "dberhane",
      "avatar": "https://avatars.githubusercontent.com/u/645060?v=4",
      "url": "https://github.com/dberhane"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dberhane/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dberhane\">@dberhane</a> - what is the behavior you're seeing when you try to sort? does it break the page or do nothing? and if you get an error in your console or terminal, could you please share it.</p>",
        "createdAt": "2023-02-20T17:04:53Z",
        "replies": [
          {
            "author": {
              "name": "dberhane",
              "avatar": "https://avatars.githubusercontent.com/u/645060?v=4",
              "url": "https://github.com/dberhane"
            },
            "body": "<p dir=\"auto\">Thank <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JessChowdhury/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JessChowdhury\">@JessChowdhury</a> for your response.</p>\n<p dir=\"auto\">When I click on the up and down arrows, it does not break the page, and there is no error message on the browser Console as well.</p>\n<p dir=\"auto\">The only thing I see is XHR POST &amp; GET requests.</p>\n<p dir=\"auto\">For example, when I click on the \"Title\" up or down arrow, I see the following XHR calls:</p>\n<p dir=\"auto\">POST: <a href=\"https://xx.mydomain/api/_preferences/articlemetadata-list\" rel=\"nofollow\">https://xx.mydomain/api/_preferences/articlemetadata-list</a><br>\nGET: <a href=\"https://xx.mydomain/api/articlemetadata?locale=en&amp;depth=0&amp;draft=true&amp;sort=title\" rel=\"nofollow\">https://xx.mydomain/api/articlemetadata?locale=en&amp;depth=0&amp;draft=true&amp;sort=title</a></p>",
            "createdAt": "2023-02-20T17:30:16Z"
          },
          {
            "author": {
              "name": "dberhane",
              "avatar": "https://avatars.githubusercontent.com/u/645060?v=4",
              "url": "https://github.com/dberhane"
            },
            "body": "<p dir=\"auto\">Thank you very much <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JessChowdhury/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JessChowdhury\">@JessChowdhury</a> for asking the right question. I was able to troubleshoot the problem by looking at my response to you above and doing some debugging. The XHR GET request above has query param (draft=true) that was the cause of the issue.  I had to review and fix the collection definition that allowed me to resolve the admin sorting issue.</p>",
            "createdAt": "2023-02-20T17:41:21Z"
          },
          {
            "author": {
              "name": "JessChowdhury",
              "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
              "url": "https://github.com/JessChowdhury"
            },
            "body": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"boom\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png\">💥</g-emoji>  Nice catch <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dberhane/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dberhane\">@dberhane</a>!</p>",
            "createdAt": "2023-02-20T18:22:34Z"
          },
          {
            "author": {
              "name": "lilnotes",
              "avatar": "https://avatars.githubusercontent.com/u/95216987?v=4",
              "url": "https://github.com/lilnotes"
            },
            "body": "<p dir=\"auto\">hey, guys<br>\nI got the same issue and</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if(args.args.draft===true) {\n          args.args.draft=undefined\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">if(args.args.draft===true) {\n          args.args.draft=undefined\n}\n</code></pre></div>\n<p dir=\"auto\">in beforeOperationHook fixed it for me, but are you going to fix it inside PayloadCMS?</p>",
            "createdAt": "2023-02-22T15:37:08Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lilnotes/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lilnotes\">@lilnotes</a> — I just pushed a fix for this. Expect a release shortly and then you will be all set.</p>\n<p dir=\"auto\">Thank you!</p>",
            "createdAt": "2023-02-22T16:09:23Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Add a way to hide or restrict access to fields when creating the first user",
    "body": "<p dir=\"auto\">I'm developing a multi-tenancy plugin for Payload CMS and I'd like to hide the tenant field from the setup form. Read more about the issue here: <a aria-label=\"Issue #1\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1595331618\" data-permission-text=\"Title is private\" data-url=\"https://github.com/joas8211/payload-tenancy/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/joas8211/payload-tenancy/issues/1/hovercard\" href=\"https://github.com/joas8211/payload-tenancy/issues/1\">joas8211/payload-tenancy#1</a></p>\n<p dir=\"auto\">Currently the form for creating the first user renders all fields in the collection + couble of hardcoded fields. It doesn't check field access, probably because it would fail anyway in most cases.</p>\n<p dir=\"auto\">I can think of a few of possible solutions for this:</p>\n<ol dir=\"auto\">\n<li>Add a <code class=\"notranslate\">field.admin.setup</code> boolean flag for the field to indicate if it's wanted to be shown at setup.</li>\n<li>Make <code class=\"notranslate\">field.admin.hidden</code> flag a function for conditional rendering.</li>\n<li>Improve default field access rights and check them at setup form and in the API endpoint it's using.</li>\n</ol>",
    "url": "https://github.com/payloadcms/payload/discussions/2164",
    "id": "2164",
    "createdAt": "2023-02-22T15:50:10Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "joas8211",
      "avatar": "https://avatars.githubusercontent.com/u/6217024?u=facd6a5fc6470076a7bcfa4a4fc19211ae02e375&v=4",
      "url": "https://github.com/joas8211"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Regenerate image sizes",
    "body": "<p dir=\"auto\">Love payload CMS - gets me up and running really quickly.</p>\n<p dir=\"auto\">I have just started using the image sizes config for media and needed to add an additional size part way through development. It would be awesome if there was a way to regen my image sizes after upload!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2161",
    "id": "2161",
    "createdAt": "2023-02-22T13:37:37Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "robcipolla",
      "avatar": "https://avatars.githubusercontent.com/u/40277784?u=065168712e2dd718a06e38e57a63477d566dc120&v=4",
      "url": "https://github.com/robcipolla"
    },
    "comments": [
      {
        "author": {
          "name": "robcipolla",
          "avatar": "https://avatars.githubusercontent.com/u/40277784?u=065168712e2dd718a06e38e57a63477d566dc120&v=4",
          "url": "https://github.com/robcipolla"
        },
        "body": "<p dir=\"auto\">Just seen that <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> has already posted a snippet for this here: <a aria-label=\"Discussion #1834\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4740607\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1834\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1834/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1834\">#1834</a></p>",
        "createdAt": "2023-02-22T13:40:55Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Override Payload cms token",
    "body": "<p dir=\"auto\">How to override payload token with my token .</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2159",
    "id": "2159",
    "createdAt": "2023-02-22T07:43:48Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "zeeshan-algo",
      "avatar": "https://avatars.githubusercontent.com/u/115087247?v=4",
      "url": "https://github.com/zeeshan-algo"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Maintenance Mode",
    "body": "<p dir=\"auto\">When needing to make a database migration, it would be great to add a message to the Payload UI saying \"no operations can be made during maintenance\". It would be nice to have this be programmatically set.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2157",
    "id": "2157",
    "createdAt": "2023-02-21T17:16:29Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "charkour",
      "avatar": "https://avatars.githubusercontent.com/u/33156025?u=9a8734e319690ab1a56112fa9414693f5b6adad3&v=4",
      "url": "https://github.com/charkour"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Cannot GET /admin",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">Cannot access the /admin express endpoint, using node:lts and npx create payload. / redirects to /admin just fine but /admin returns a 404 error. MongoDB connects successfully and all logs are positive.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2156",
    "id": "2156",
    "createdAt": "2023-02-21T13:42:56Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "ashermyers",
      "avatar": "https://avatars.githubusercontent.com/u/43706372?u=80067e754f5425efa41e518c509698b3f4c00813&v=4",
      "url": "https://github.com/ashermyers"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">What command are you running? Are you running <code class=\"notranslate\">yarn dev</code>? If not, are you running in production (NODE_ENV=production?)?</p>\n<p dir=\"auto\">Typically this will happen if you are trying to run in production, but you have not yet built your admin panel.</p>\n<p dir=\"auto\">I will move this to a discussion though because this is very likely something you are doing incorrectly rather than being an issue with Payload itself.</p>\n<p dir=\"auto\">I'll happily continue to help here though!</p>",
        "createdAt": "2023-02-21T13:46:06Z",
        "replies": [
          {
            "author": {
              "name": "ashermyers",
              "avatar": "https://avatars.githubusercontent.com/u/43706372?u=80067e754f5425efa41e518c509698b3f4c00813&v=4",
              "url": "https://github.com/ashermyers"
            },
            "body": "<p dir=\"auto\">After building, I got the /admin route working, although /admin/styles.css is not being built. How do I build the assets?</p>",
            "createdAt": "2023-02-21T14:11:35Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">I'm afraid I'm not sure what you're asking here. CSS should definitely get built alongside of the admin panel. Are you talking about custom CSS?</p>\n<p dir=\"auto\">Does your CSS work in dev mode?</p>",
            "createdAt": "2023-02-21T14:36:54Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Guide on how to customize the image/upload field",
    "body": "<p dir=\"auto\">I want to implement an image cropper into the CMS, so the uploaded images can be cropped by the user directly . While Payload doesn't have this built-in, it does support swapping in custom UI components. The API with the \"useField()\" hooks is very nice, however specifically in the case of the Upload field it's unclear what exactly to set via the \"setField()\" returned from \"useField()\".<br>\nAlso, is it possible to extend it with custom properties that can be queried by the website (e.g. saving the crop as property rather than applying it directly to the image, in case I want to save multiple crops)?<br>\nI know the image api can crop images on the fly, however my use case is that I display images with a certain aspect ratio on my website und the user should be able to preview uploaded images with that aspect ratio and set the focal point to their liking.<br>\nI find the documentation a bit sparse on the subject of custom fields, especially regarding upload &amp; media library. It would be great if a guide could be provided sometime in the future <g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">🚀</g-emoji></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2154",
    "id": "2154",
    "createdAt": "2023-02-21T13:33:25Z",
    "upvotes": 3,
    "commentTotal": 0,
    "author": {
      "name": "johannesschaffer",
      "avatar": "https://avatars.githubusercontent.com/u/95882626?v=4",
      "url": "https://github.com/johannesschaffer"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Avoid ellipsis from title header display",
    "body": "<p dir=\"auto\">How to remove ellipsis from title header and show full title when useAsTitle for long entries and enable line break and overflow visible.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2151",
    "id": "2151",
    "createdAt": "2023-02-21T11:42:54Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "pcbal",
      "avatar": "https://avatars.githubusercontent.com/u/40548855?v=4",
      "url": "https://github.com/pcbal"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Rich Text Field | Toolbar icon library ?",
    "body": "<p dir=\"auto\">Hi !</p>\n<p dir=\"auto\">From which icon library do the icons used in the rich text editor toolbar come from?</p>\n<p dir=\"auto\">Franck</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2122",
    "id": "2122",
    "createdAt": "2023-02-17T15:17:44Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "franckmartin",
      "avatar": "https://avatars.githubusercontent.com/u/988629?u=e922124f5c7d051d5a3e51512c550634102fd3e8&v=4",
      "url": "https://github.com/franckmartin"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/franckmartin/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/franckmartin\">@franckmartin</a> - these are custom icons however you can harvest the SVGs from our codebase <a href=\"https://github.com/payloadcms/payload/tree/master/src/admin/components/icons\">here</a>.</p>",
        "createdAt": "2023-02-20T17:11:58Z",
        "replies": [
          {
            "author": {
              "name": "franckmartin",
              "avatar": "https://avatars.githubusercontent.com/u/988629?u=e922124f5c7d051d5a3e51512c550634102fd3e8&v=4",
              "url": "https://github.com/franckmartin"
            },
            "body": "<p dir=\"auto\">Thanks <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JessChowdhury/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JessChowdhury\">@JessChowdhury</a></p>",
            "createdAt": "2023-02-21T11:27:21Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "JessChowdhury",
        "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
        "url": "https://github.com/JessChowdhury"
      },
      "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/franckmartin/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/franckmartin\">@franckmartin</a> - these are custom icons however you can harvest the SVGs from our codebase <a href=\"https://github.com/payloadcms/payload/tree/master/src/admin/components/icons\">here</a>.</p>",
      "createdAt": "2023-02-20T17:11:58Z",
      "chosenAt": "2023-02-21T11:27:00Z",
      "chosenBy": "franckmartin"
    }
  },
  {
    "title": "how to center a title (h1,h2,h3)",
    "body": "<p dir=\"auto\">just like:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/192406612-e68e3ae6-ebca-4cd2-b6dc-716e6ce4ba70.png\"><img width=\"1279\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/192406612-e68e3ae6-ebca-4cd2-b6dc-716e6ce4ba70.png\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1178",
    "id": "1178",
    "createdAt": "2022-09-27T00:54:57Z",
    "upvotes": 2,
    "commentTotal": 1,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zhounewz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhounewz\">@zhounewz</a> - this feature is on our roadmap <a href=\"https://github.com/payloadcms/payload/discussions/1218\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1218/hovercard\">here</a>, for now you can achieve this by adding a custom element. Read the comments <a href=\"https://github.com/payloadcms/payload/discussions/1218\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1218/hovercard\">here for more info</a>.</p>",
        "createdAt": "2023-02-20T17:16:24Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "How to link to global via relationship field?",
    "body": "<p dir=\"auto\">Gday,<br>\nI have the following problem:</p>\n<p dir=\"auto\">I have a collection of content pages and a global called \"startpage\", which is basically a content page, but special.<br>\nI also have a link field, where users can select a page for internal linking.</p>\n<p dir=\"auto\">How would I go about an internal link to the startpage, since globals can't be used in the relationship field?</p>\n<p dir=\"auto\">Thanks for any hints!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2100",
    "id": "2100",
    "createdAt": "2023-02-15T12:48:29Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "christian-reichart",
      "avatar": "https://avatars.githubusercontent.com/u/9932248?u=853b1ea4b57e7cbeb5cea9a422df4d61dcee0ece&v=4",
      "url": "https://github.com/christian-reichart"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/christian-reichart/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/christian-reichart\">@christian-reichart</a>,</p>\n<p dir=\"auto\">If you take a look at the link field group from our demo <a href=\"https://github.com/payloadcms/public-demo/blob/master/src/fields/link.ts\">here</a>, you could follow this structure and use the <code class=\"notranslate\">customURL</code> to manually point to your start page global.</p>\n<p dir=\"auto\">Or if you need to return the full data from the start page, you could conditionally render another field that uses a hook to fetch the data. What works best will depend on your use case, there are more ways to do this out there!</p>",
        "createdAt": "2023-02-20T16:50:31Z",
        "replies": [
          {
            "author": {
              "name": "JessChowdhury",
              "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
              "url": "https://github.com/JessChowdhury"
            },
            "body": "<p dir=\"auto\">Also to keep it really simple you could just add a placeholder page for your homepage. Again depends on what you need here.</p>",
            "createdAt": "2023-02-20T16:53:46Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "ERROR in ./dist/apps/seo-payload/config.js Module build failed (from ./node_modules/swc-loader/src/index.js): Error: unknown field `presets` at line 1 column 400",
    "body": "<p dir=\"auto\">I got this error after I fixed the <a href=\"https://github.com/payloadcms/payload/discussions/1856\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1856/hovercard\">version conflict issue of graphql</a>. Now, after hacking the <code class=\"notranslate\">require.cache</code> of graphql, I can confirm this is another issue. I'm not very familiar with <code class=\"notranslate\">swc-loader</code>. Can anybody help me take a look?</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ERROR in ./dist/apps/seo-payload/config.js\nModule build failed (from ./node_modules/swc-loader/src/index.js):\nError: unknown field `presets` at line 1 column 400\"><pre class=\"notranslate\"><code class=\"notranslate\">ERROR in ./dist/apps/seo-payload/config.js\nModule build failed (from ./node_modules/swc-loader/src/index.js):\nError: unknown field `presets` at line 1 column 400\n</code></pre></div>\n<p dir=\"auto\">Repro steps:</p>\n<p dir=\"auto\"><a href=\"https://github.com/Stupidism/nx-payload-demo\">https://github.com/Stupidism/nx-payload-demo</a>.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"git clone git@github.com:Stupidism/nx-payload-demo.git\nPUPPETEER_SKIP_DOWNLOAD=1 CYPRESS_INSTALL_BINARY=0 npm install\nnx run seo-payload:serve\"><pre class=\"notranslate\"><code class=\"notranslate\">git clone git@github.com:Stupidism/nx-payload-demo.git\nPUPPETEER_SKIP_DOWNLOAD=1 CYPRESS_INSTALL_BINARY=0 npm install\nnx run seo-payload:serve\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2145",
    "id": "2145",
    "createdAt": "2023-02-20T16:18:04Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "How to best handle transpiling?",
    "body": "<p dir=\"auto\">I've had a lot of issues with transpiling while integrating Payload into a Turborepo.</p>\n<p dir=\"auto\">Take a look at <a href=\"https://github.com/vercel/turbo/tree/main/examples/with-tailwind\">this repo</a>.</p>\n<ol dir=\"auto\">\n<li>Use npx create-payload-app to add a new app labeled \"cms\".</li>\n<li>Open any Payload file and import a button from \"ui\".</li>\n<li>Get all sorts of errors about import statements and package subpaths.</li>\n</ol>\n<p dir=\"auto\">I've read the recent <a href=\"https://github.com/payloadcms/payload/pull/1847\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1847/hovercard\">changelog</a>, and for a moment I thought that I fixed the problem...until I didn't.</p>\n<p dir=\"auto\">Honestly, I'm blindly editing tsconfig files hoping for some sort of cjs output that the configuration gods will bless. I don't really understand what the output should be or how I should arrive there.</p>\n<p dir=\"auto\">How can external React libaries be properly handled in Payload?</p>\n<p dir=\"auto\">Super appreciated!</p>\n<p dir=\"auto\">Edit: Noticed Tsup doesn't support es5 as a target...Maybe that's what I'm running into? Does Payload need es5?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2106",
    "id": "2106",
    "createdAt": "2023-02-15T20:19:01Z",
    "upvotes": 2,
    "commentTotal": 1,
    "author": {
      "name": "samtietjen",
      "avatar": "https://avatars.githubusercontent.com/u/4971280?u=9ff035a29d294e47b3109f00e6a9eec46f32fa8c&v=4",
      "url": "https://github.com/samtietjen"
    },
    "comments": [
      {
        "author": {
          "name": "samtietjen",
          "avatar": "https://avatars.githubusercontent.com/u/4971280?u=9ff035a29d294e47b3109f00e6a9eec46f32fa8c&v=4",
          "url": "https://github.com/samtietjen"
        },
        "body": "<p dir=\"auto\">I think I've got it...Tsup won't compile to es5. Looks like Payload wants es5 and cjs, so I went for rollup instead. Thoughhh...I've been here before. Hopefully this is it though!</p>",
        "createdAt": "2023-02-16T04:18:18Z",
        "replies": [
          {
            "author": {
              "name": "rrums123",
              "avatar": "https://avatars.githubusercontent.com/u/100153954?u=f46ed9e6da40c742bbcf26eacb8a1072cc9fd911&v=4",
              "url": "https://github.com/rrums123"
            },
            "body": "<p dir=\"auto\">Hey, can you please show how to transpile the package to cjs using rollup? I want to do the same but still can't. Thank you.</p>",
            "createdAt": "2023-02-20T09:40:06Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "samtietjen",
        "avatar": "https://avatars.githubusercontent.com/u/4971280?u=9ff035a29d294e47b3109f00e6a9eec46f32fa8c&v=4",
        "url": "https://github.com/samtietjen"
      },
      "body": "<p dir=\"auto\">I think I've got it...Tsup won't compile to es5. Looks like Payload wants es5 and cjs, so I went for rollup instead. Thoughhh...I've been here before. Hopefully this is it though!</p>",
      "createdAt": "2023-02-16T04:18:18Z",
      "chosenAt": "2023-02-17T18:22:33Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Lit implementation on Payload",
    "body": "<p dir=\"auto\">Hey there, I want to use Lit on React for <code class=\"notranslate\">ui</code> field on payload. I use <a href=\"https://www.npmjs.com/package/@lit-labs/react\" rel=\"nofollow\"><code class=\"notranslate\">@lit-labs/react</code></a> to do it.</p>\n<p dir=\"auto\">I got error like this</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Error [ERR_REQUIRE_ESM]: require() of ES Module /path/payload/node_modules/lit-element/index.js from /path/payload/src/lit-components/test/my-element.js not supported.\n\nInstead change the require of index.js in /path/payload/src/lit-components/test/my-element.js to a dynamic import() which is available in all CommonJS modules.\"><pre class=\"notranslate\"><code class=\"notranslate\">Error [ERR_REQUIRE_ESM]: require() of ES Module /path/payload/node_modules/lit-element/index.js from /path/payload/src/lit-components/test/my-element.js not supported.\n\nInstead change the require of index.js in /path/payload/src/lit-components/test/my-element.js to a dynamic import() which is available in all CommonJS modules.\n</code></pre></div>\n<p dir=\"auto\">Is there any way to implement Lit in Payload?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2109",
    "id": "2109",
    "createdAt": "2023-02-16T14:34:32Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "rrums123",
      "avatar": "https://avatars.githubusercontent.com/u/100153954?u=f46ed9e6da40c742bbcf26eacb8a1072cc9fd911&v=4",
      "url": "https://github.com/rrums123"
    },
    "comments": [
      {
        "author": {
          "name": "jmas",
          "avatar": "https://avatars.githubusercontent.com/u/90701?v=4",
          "url": "https://github.com/jmas"
        },
        "body": "<p dir=\"auto\">Hello, I guess here you can find more information about the similar issue:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://stackoverflow.com/questions/69081410/error-err-require-esm-require-of-es-module-not-supported\" rel=\"nofollow\">https://stackoverflow.com/questions/69081410/error-err-require-esm-require-of-es-module-not-supported</a></li>\n<li><a href=\"https://stackoverflow.com/questions/69041454/error-require-of-es-modules-is-not-supported-when-importing-node-fetch\" rel=\"nofollow\">https://stackoverflow.com/questions/69041454/error-require-of-es-modules-is-not-supported-when-importing-node-fetch</a></li>\n</ul>",
        "createdAt": "2023-02-17T23:50:49Z",
        "replies": [
          {
            "author": {
              "name": "rrums123",
              "avatar": "https://avatars.githubusercontent.com/u/100153954?u=f46ed9e6da40c742bbcf26eacb8a1072cc9fd911&v=4",
              "url": "https://github.com/rrums123"
            },
            "body": "<p dir=\"auto\">Yeah, but different case, because node-fetch v2 use cjs, but (I think) Lit do not have any version that use cjs. So maybe use bundler will be an answer. I'm open this discussion maybe if someone has an attempt to implement Lit and share their experience, that will be useful.</p>",
            "createdAt": "2023-02-20T06:53:48Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "invalid slug naming cause unknow error",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">If slug contain space in it The API will produce 404 error. In Admin panel it will only produce 'unknow error occured'. This is really confusing plus in documentation it just said that slug must have  'URL-friendly string '.</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n\n<ol dir=\"auto\">\n<li>Add space in slug collection (ex: sale orders)</li>\n<li>Open related collection in admin panel</li>\n<li>See console for 404 error</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">payload : 1.6.11</p>\n\n<p dir=\"auto\">I think, adding validation to check naming will help. Adding trim function or replace space with - will also helped.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2138",
    "id": "2138",
    "createdAt": "2023-02-19T09:58:29Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "mcimam",
      "avatar": "https://avatars.githubusercontent.com/u/22250002?u=7b6771664b752fdce23efe7a8651395266c69014&v=4",
      "url": "https://github.com/mcimam"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mcimam/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mcimam\">@mcimam</a> — this is actually intended behavior. We should indeed throw an error on startup on if the slug is not URL-friendly, but that will be a future enhancement. For now, I will convert this to a discussion and tag it as a feature request. We will get to this for sure.</p>\n<p dir=\"auto\">Thanks for bringing this up!</p>",
        "createdAt": "2023-02-20T02:20:12Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Build a way to \"lock\" a document while a user is editing",
    "body": "<p dir=\"auto\">If a user is editing a document, it should set a flag on the document as \"being edited by\". Then if another user visits the document, it should show a popup window that alerts them to the fact that the document is being edited by that user and prevent further editing. Maybe give an opportunity to \"take over\" the document.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1490",
    "id": "1490",
    "createdAt": "2022-11-22T17:35:18Z",
    "upvotes": 8,
    "commentTotal": 2,
    "author": {
      "name": "jmikrut",
      "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
      "url": "https://github.com/jmikrut"
    },
    "comments": [
      {
        "author": {
          "name": "hades200082",
          "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
          "url": "https://github.com/hades200082"
        },
        "body": "<p dir=\"auto\">Possibly a better solution here would be to allow collaborative editing.</p>\n<p dir=\"auto\">Kontent.ai do this by locking only the field being edited, not the whole document. Other editors can see the field \"disabled\" while one is editing it, and can click a \"refresh\" button to update their view with what the one editor has changed.</p>",
        "createdAt": "2023-02-14T08:26:29Z",
        "replies": null
      },
      {
        "author": {
          "name": "chladog",
          "avatar": "https://avatars.githubusercontent.com/u/15977485?u=800744af7926cc837c5bb8b62e8be01635e035b0&v=4",
          "url": "https://github.com/chladog"
        },
        "body": "<p dir=\"auto\">Alternative would be collaborative style of editing like GoogleDocs. Editors would be able to see their cursors and changes in real-time working on RC version and when ready they would publish it. A lot of effort, but I believe it would make it the first CMS impementing this ever, great USP.<br>\nIn either case this is great case for sockets.</p>\n<p dir=\"auto\">IMHO this topic should be of a great priority. In my project we already had few upsetting times when two people were working on a same page and overwrote their changes, some tears went out as well :,-(</p>",
        "createdAt": "2023-02-19T15:29:06Z",
        "replies": [
          {
            "author": {
              "name": "hades200082",
              "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
              "url": "https://github.com/hades200082"
            },
            "body": "<p dir=\"auto\">There's a reason no other CMS implements this. The diffing algorithms used in the communication that syncs the multiple participants are incredibly complex and error prone.</p>\n<p dir=\"auto\">I remember back in the early 2000's that Google released a library called <a href=\"https://github.com/google/diff-match-patch\">DiffMatchPatch</a> that did the diffing part and was very good... but it's not been updated in ages.</p>\n<p dir=\"auto\">On top of the diffing though, there's also the need for automatic conflict resolution. Even in OneDrive/SharePoint this sort of feature often results in duplicate documents being created as \"conflicted versions\".</p>\n<p dir=\"auto\">Finally, just because it's a technically cool feature doesn't mean it's the best UX.</p>\n<p dir=\"auto\">Overall, it might be better to avoid the complexity and conflict issues if there's an easier way to do it that also offers a better UX.</p>",
            "createdAt": "2023-02-19T15:39:26Z"
          },
          {
            "author": {
              "name": "chladog",
              "avatar": "https://avatars.githubusercontent.com/u/15977485?u=800744af7926cc837c5bb8b62e8be01635e035b0&v=4",
              "url": "https://github.com/chladog"
            },
            "body": "<p dir=\"auto\">Great insight. It's definitely a complex solution with a lot of technical challenges.<br>\nI believe there are more ways how to handle sync of the changes. For example <a href=\"https://quilljs.com/docs/delta/\" rel=\"nofollow\">Quilljs Delta</a> format handles this nicely as only partial changes at the cursor location are being sent back and forth, basically you can just make a ledger of changes since the last snapshot.<br>\nI like your proposal as well though IMHO real time updates on the locked field without a need of hitting refresh btn would be better UX. So basically user focuses field -&gt; locked for other users, then on blur the changes are pushed to other editors and the field is unlocked.<br>\nStill I believe such changes should happen on the draft version not the published one until user press Publish btn.</p>",
            "createdAt": "2023-02-19T16:10:56Z"
          },
          {
            "author": {
              "name": "hades200082",
              "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
              "url": "https://github.com/hades200082"
            },
            "body": "<blockquote>\n<p dir=\"auto\">Still I believe such changes should happen on the draft version not the published one until user press Publish btn</p>\n</blockquote>\n<p dir=\"auto\">This is a good point - any implementation of this feature will likely require version history and drafts.</p>",
            "createdAt": "2023-02-19T16:52:42Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Handle multi uploads of Image & Files",
    "body": "<p dir=\"auto\">Feature Request for more productivity, would the the possibility of Multi Uploading for Image  &amp; Files.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1149",
    "id": "1149",
    "createdAt": "2022-09-20T18:51:33Z",
    "upvotes": 17,
    "commentTotal": 4,
    "author": {
      "name": "Rar9",
      "avatar": "https://avatars.githubusercontent.com/u/2239608?u=50ed805eec791a83af932905fe5bfc752aef971f&v=4",
      "url": "https://github.com/Rar9"
    },
    "comments": [
      {
        "author": {
          "name": "Rar9",
          "avatar": "https://avatars.githubusercontent.com/u/2239608?u=50ed805eec791a83af932905fe5bfc752aef971f&v=4",
          "url": "https://github.com/Rar9"
        },
        "body": "<p dir=\"auto\">Please include Paste from Clipboard  as well.</p>\n<p dir=\"auto\"><code class=\"notranslate\">&lt;button onClick={() =&gt;  navigator.clipboard.writeText('Copy this text to clipboard')}&gt;Copy&lt;/button&gt;</code></p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard</a></p>",
        "createdAt": "2022-10-07T18:19:15Z",
        "replies": null
      },
      {
        "author": {
          "name": "Rar9",
          "avatar": "https://avatars.githubusercontent.com/u/2239608?u=50ed805eec791a83af932905fe5bfc752aef971f&v=4",
          "url": "https://github.com/Rar9"
        },
        "body": "<p dir=\"auto\">Also allow for json import for data migration</p>",
        "createdAt": "2022-10-15T03:41:05Z",
        "replies": [
          {
            "author": {
              "name": "Rar9",
              "avatar": "https://avatars.githubusercontent.com/u/2239608?u=50ed805eec791a83af932905fe5bfc752aef971f&v=4",
              "url": "https://github.com/Rar9"
            },
            "body": "<p dir=\"auto\">A possible starting point</p>\n<p dir=\"auto\"><a aria-label=\"Discussion #1270\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4479802\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1270\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1270/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1270\">#1270</a></p>",
            "createdAt": "2022-10-17T12:58:42Z"
          }
        ]
      },
      {
        "author": {
          "name": "zubricks",
          "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
          "url": "https://github.com/zubricks"
        },
        "body": "<p dir=\"auto\">We do agree that this is very important, but it comes with some significant UX challenges.</p>\n<p dir=\"auto\">For example, if uploads have required fields, and you upload 10 files at a time, you would need to have 10 modal windows open to be able to fill out required fields for each file uploaded and still submit one at a time after having completed the required fields. Definitely going to address this at some point, but just wanted to comment here with some thinking.</p>\n<p dir=\"auto\">If anyone has any inspiration for how other platforms handle this that would be great.</p>",
        "createdAt": "2022-11-22T16:54:30Z",
        "replies": [
          {
            "author": {
              "name": "vhorzinek",
              "avatar": "https://avatars.githubusercontent.com/u/56411419?v=4",
              "url": "https://github.com/vhorzinek"
            },
            "body": "<p dir=\"auto\">As per this comment Craft could be a good inspiration:<br>\n<a aria-label=\"Discussion #130\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3309158\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/130\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/130/hovercard?comment_id=3602949\" href=\"https://github.com/payloadcms/payload/discussions/130#discussioncomment-3602949\">#130 (comment)</a></p>",
            "createdAt": "2023-01-11T19:51:05Z"
          },
          {
            "author": {
              "name": "jcouturier",
              "avatar": "https://avatars.githubusercontent.com/u/3639237?u=036685e169359dcbbe0eaade0e8e11d710aeb3ee&v=4",
              "url": "https://github.com/jcouturier"
            },
            "body": "<p dir=\"auto\">My suggestion there would be to only allow bulk uploads within the Media section, rather than (for example) allowing bulk upload within a Page object.<br>\nWithin a media section, those meta fields could be left as not required. Page objects where a media file can beinserted would be where that meta data is required, and could prompt the user to add meta data when each individual file is added, either via upload or when selected from existing media.</p>",
            "createdAt": "2023-02-13T23:09:25Z"
          },
          {
            "author": {
              "name": "jcouturier",
              "avatar": "https://avatars.githubusercontent.com/u/3639237?u=036685e169359dcbbe0eaade0e8e11d710aeb3ee&v=4",
              "url": "https://github.com/jcouturier"
            },
            "body": "<p dir=\"auto\">Adding to the above, Wagtail CMS handles this well (<a href=\"https://imgur.com/U5WWhyf\" rel=\"nofollow\">screenshot</a>). When uploading multiple files, after upload all the newly files are presented in a list on the page where the user has the opportunity to update their meta data, but doing so is not required. It's fast, simple, and doesn't require multiple modal windows.</p>",
            "createdAt": "2023-02-15T00:59:31Z"
          },
          {
            "author": {
              "name": "chladog",
              "avatar": "https://avatars.githubusercontent.com/u/15977485?u=800744af7926cc837c5bb8b62e8be01635e035b0&v=4",
              "url": "https://github.com/chladog"
            },
            "body": "<p dir=\"auto\">Similarly in WordPress it's handled with quite good UX. You select upload files from the grid of media files (or you can DnD new ones to the library), and the fields are settable on each file after a click (the blue highlighted one). The sidebar could be wider to allow more complex fields on a file though (which is possible by \"expand details\").<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/15977485/219951709-d05748e9-3446-4624-afd5-4fb39044a1d8.png\"><img src=\"https://user-images.githubusercontent.com/15977485/219951709-d05748e9-3446-4624-afd5-4fb39044a1d8.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">If there are any required fields then it could be marked differently (cross/circle/dash instead of a checkmark) and you wouldn't be able to proceed without going through each of them and setting the required fields (possibly with Next and Prev buttons somewhere which would highlight prev/next from the subset of selected)</p>",
            "createdAt": "2023-02-19T13:38:11Z"
          }
        ]
      },
      {
        "author": {
          "name": "hades200082",
          "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
          "url": "https://github.com/hades200082"
        },
        "body": "<p dir=\"auto\">Since an upload field allows a single file, I usually wrap it in an array field. It would be nice if Payload recognised this pattern and offered the multiple upload option.</p>",
        "createdAt": "2023-02-14T08:27:48Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Extending Upload to have nested folders",
    "body": "<p dir=\"auto\">I have a media collection which I use to save all media files. I want to organize the files into subfolders. Currently, all files are saved in folder: media</p>\n<p dir=\"auto\">How can I save files from collection-1 to media/collection-1 when using media relationship.</p>\n<p dir=\"auto\">Strapi provides media gallery out of the box in which you can create folders to structure your media gallery such as media/products or media/posts. Maybe we can define the folder inside the relationship such as below.</p>\n<p dir=\"auto\"><code class=\"notranslate\">{ name: 'products', type: 'upload', relationTo: 'media', DESTINATION_FOLDER: '../../media/products'   // Example },</code></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1961",
    "id": "1961",
    "createdAt": "2023-01-27T17:15:08Z",
    "upvotes": 6,
    "commentTotal": 1,
    "author": {
      "name": "m90khan",
      "avatar": "https://avatars.githubusercontent.com/u/6104751?u=9829608f0a8526875dff687e833ecff674c9cf1a&v=4",
      "url": "https://github.com/m90khan"
    },
    "comments": [
      {
        "author": {
          "name": "chladog",
          "avatar": "https://avatars.githubusercontent.com/u/15977485?u=800744af7926cc837c5bb8b62e8be01635e035b0&v=4",
          "url": "https://github.com/chladog"
        },
        "body": "<p dir=\"auto\">Yes this would indeed be very nice feature to have. I'm in need of oraganizing the files to folders scoped to collection item. So when a Page is deleted I could just iterate the filenames in folder <code class=\"notranslate\">:pageId</code> delete their DB records and wipe the whole folder. Nowadays I walk the whole document tree to find all uploads. Still have a lot of dangling files if they werent assigned to Page anymore.</p>",
        "createdAt": "2023-02-19T12:49:09Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "`generateEmailMessage()` instead of `generateEmailHTML()` and `generateEmailSubject()`",
    "body": "<p dir=\"auto\">in our payload project we send a lot of different emails.</p>\n<p dir=\"auto\">we have a helper class which renders all the different emails and return <code class=\"notranslate\">Message</code> instances which can then be passed to <code class=\"notranslate\">payload. sendEmail(message: Message)</code>.</p>\n<p dir=\"auto\">however for the <code class=\"notranslate\">verify</code> and <code class=\"notranslate\">forgotPassword</code> configuration, we cannot return a Message instance. instead, we have to rip the message apart into a function which returns the subject and another function which returns the html.</p>\n<p dir=\"auto\">it currently looks like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    verify: {\n      generateEmailHTML: ({ req, token, user }) =&gt; {\n        const message = getEmailService().createUserWelcomeEmail(token, user)\n        return message.html\n      },\n      generateEmailSubject: ({ req, token, user }) =&gt; {\n        const message = getEmailService().createUserWelcomeEmail(token, user)\n        return message.subject\n      },\n    },\"><pre class=\"notranslate\"><code class=\"notranslate\">    verify: {\n      generateEmailHTML: ({ req, token, user }) =&gt; {\n        const message = getEmailService().createUserWelcomeEmail(token, user)\n        return message.html\n      },\n      generateEmailSubject: ({ req, token, user }) =&gt; {\n        const message = getEmailService().createUserWelcomeEmail(token, user)\n        return message.subject\n      },\n    },\n</code></pre></div>\n<p dir=\"auto\">it would be nice to have the option to configure a <code class=\"notranslate\">generateEmailMessage</code> function which accepts a Message instance as return value:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    verify: {\n      generateEmailMessage: ({ req, token, user }) =&gt; {\n        const message: Message = getEmailService().createUserWelcomeEmail(token, user)\n        return message\n      }\n    },\"><pre class=\"notranslate\"><code class=\"notranslate\">    verify: {\n      generateEmailMessage: ({ req, token, user }) =&gt; {\n        const message: Message = getEmailService().createUserWelcomeEmail(token, user)\n        return message\n      }\n    },\n</code></pre></div>\n<p dir=\"auto\">This way, it would be more efficient because the messages would not have to be rendered twice and it would also be possible to return a different <code class=\"notranslate\">from</code> address instead of the default from address. (and maybe even all other attributes supported by Nodemailer, like attachments, plain text, etc.)</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2132",
    "id": "2132",
    "createdAt": "2023-02-19T11:53:03Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "berndb",
      "avatar": "https://avatars.githubusercontent.com/u/2161541?v=4",
      "url": "https://github.com/berndb"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Add a `select` option to local API",
    "body": "<p dir=\"auto\">In the local API, right now the only way to choose/limit which fields are returned by the local API is the <code class=\"notranslate\">depth</code> parameter.<br>\nThis approach has a few disadvantages:</p>\n<ul dir=\"auto\">\n<li>it's very crude and imprecise</li>\n<li>it leads to imprecise typing (related fields are always typed as <code class=\"notranslate\">string | SomeRelationCollectionType</code></li>\n</ul>\n<p dir=\"auto\">It would be really cool if payload's local API could take a similar approach to <a href=\"https://www.prisma.io/docs/concepts/components/prisma-client/select-fields\" rel=\"nofollow\">prisma's <code class=\"notranslate\">select</code></a> or how it works in GQL.</p>\n<p dir=\"auto\">A possible API could be</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  const res = await payload.find({\n    collection: &quot;users&quot;,\n    select: {\n      email: true,\n      organization: {\n        name: true,\n      },\n    }\n  });\"><pre class=\"notranslate\">  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">find</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">\"users\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">select</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">email</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">organization</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">name</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">and the type could correctly be inferred to be</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  email: string, \n  organization: {\n    name: string\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">email</span>: <span class=\"pl-s1\">string</span><span class=\"pl-kos\">,</span> \n  <span class=\"pl-c1\">organization</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">name</span>: <span class=\"pl-s1\">string</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2127",
    "id": "2127",
    "createdAt": "2023-02-18T13:09:28Z",
    "upvotes": 2,
    "commentTotal": 1,
    "author": {
      "name": "MoSattler",
      "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
      "url": "https://github.com/MoSattler"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey there! I do agree that this is something that would be very nice to have. There will be some complexities that make this a bit harder than it might seem at first pass though.</p>\n<p dir=\"auto\">For example, we have nested fields and structures like tabs, groups, arrays, blocks, etc. However our select mechanism works would need to be functional with nested fields.</p>\n<p dir=\"auto\">Prisma doesn’t have that problem because it doesn’t support nested structures at least last time I looked.</p>\n<p dir=\"auto\">Another thing to consider is that our relationship field generated types are intentionally written as unions for more than just the depth parameter. There are a variety of reasons why a relationship may not be populated properly like access control, if the document was deleted and can’t be populated any longer, etc. There’s no way with typescript to infer a 100% accurate type there, so we will likely need to keep it as a union for safety.</p>\n<p dir=\"auto\">Last thing I can think of just off the top of my head is that because we can populate via the depth parameter, if we were truly going to build out a select property, we would need to be able to pass in what fields to select on what relationships, and at what depth. That would be very challenging and unwieldy to even use.</p>\n<p dir=\"auto\">I’m definitely not concluding that this isn’t a good idea, but I think this is basically what GraphQL is made for and if we solve all the problems above, we are just re-creating GraphQL.</p>\n<p dir=\"auto\">Related:<br>\n<a aria-label=\"Pull request #1288\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1419351601\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1288\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1288/hovercard\" href=\"https://github.com/payloadcms/payload/pull/1288\">#1288</a></p>",
        "createdAt": "2023-02-18T13:58:15Z",
        "replies": [
          {
            "author": {
              "name": "MoSattler",
              "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
              "url": "https://github.com/MoSattler"
            },
            "body": "<p dir=\"auto\">Thank you for the context, makes a lot of sense!</p>",
            "createdAt": "2023-02-18T14:04:52Z"
          },
          {
            "author": {
              "name": "MoSattler",
              "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
              "url": "https://github.com/MoSattler"
            },
            "body": "<blockquote>\n<p dir=\"auto\">I think this is basically what GraphQL is made for and if we solve all the problems above, we are just re-creating GraphQL.</p>\n</blockquote>\n<p dir=\"auto\">If one could utilise GQL (and by that I do mean the query language alone) for the local API (and hence not have to go though http as a transport layer), that'd be fantastic.</p>",
            "createdAt": "2023-02-18T14:08:47Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Here's how to authenticate a React or Next.js app using REST or GraphQL",
    "body": "<blockquote>\n<p dir=\"auto\">Update: There's now an official <a href=\"https://github.com/payloadcms/payload/tree/master/examples/auth\">Auth Example</a> that implements the same concepts described below alongside a fully working CMS. Go check it out!</p>\n</blockquote>\n<p dir=\"auto\">Authenticating with Payload from a React or Next.js app is quite straightforward. To do this, wrap your entire app with this <code class=\"notranslate\">AuthProvider</code>. It will provide the <code class=\"notranslate\">useAuth</code> hook that you can use to easily perform any auth operation from anywhere in your app:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import React, { useState, createContext, useContext, useEffect, useCallback } from 'react';\nimport { User } from '../../payload-types'; // point this to the auth-enabled collection of your locally generated types\n\ntype Login = (args: { email: string; password: string }) =&gt; Promise&lt;void&gt;;\n\ntype Logout = () =&gt; Promise&lt;void&gt;;\n\ntype AuthContext = {\n  user?: User | null;\n  setUser: (user: User | null) =&gt; void;\n  logout: Logout;\n  login: Login;\n};\n\nconst Context = createContext({} as AuthContext);\n\nexport const AuthProvider: React.FC&lt;{ children: React.ReactNode }&gt; = ({ children }) =&gt; {\n  const [user, setUser] = useState&lt;User | null&gt;();\n\n  const login = useCallback&lt;Login&gt;(async (args) =&gt; {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/users/login`, {\n      method: 'POST',\n      body: JSON.stringify(args),\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (res.ok) {\n      const json = await res.json();\n      setUser(json.user);\n    } else {\n      throw new Error('Invalid login');\n    }\n  }, []);\n\n  const logout = useCallback&lt;Logout&gt;(async () =&gt; {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/users/logout`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    if (res.ok) {\n      setUser(null);\n    } else {\n      throw new Error('There was a problem while logging out.');\n    }\n\n  }, []);\n\n  useEffect(() =&gt; {\n    const fetchMe = async () =&gt; {\n      const result = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/users/me`, {\n        credentials: 'include',\n      }).then((req) =&gt; req.json());\n      setUser(result.user || null);\n    };\n\n    fetchMe();\n  }, []);\n\n  return (\n    &lt;Context.Provider\n      value={{\n        user,\n        setUser,\n        login,\n        logout,\n      }}\n    &gt;\n      {children}\n    &lt;/Context.Provider&gt;\n  );\n};\n\ntype UseAuth&lt;T = User&gt; = () =&gt; AuthContext;\n\nexport const useAuth: UseAuth = () =&gt; useContext(Context);\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useState</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">createContext</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useContext</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useEffect</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useCallback</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'react'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">User</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../../payload-types'</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// point this to the auth-enabled collection of your locally generated types</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">Login</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">email</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">;</span> <span class=\"pl-c1\">password</span>: <span class=\"pl-smi\">string</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">Logout</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">AuthContext</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">user</span>?: <span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">setUser</span>: <span class=\"pl-kos\">(</span><span class=\"pl-s1\">user</span>: <span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">logout</span>: <span class=\"pl-smi\">Logout</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">login</span>: <span class=\"pl-smi\">Login</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-smi\">Context</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">createContext</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">AuthContext</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">AuthProvider</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">FC</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">children</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">ReactNode</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> children <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setUser</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">login</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Login</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/users/login`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">'POST'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">body</span>: <span class=\"pl-smi\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">'Content-Type'</span>: <span class=\"pl-s\">'application/json'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ok</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">json</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">json</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">user</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Invalid login'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">logout</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Logout</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/users/logout`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">'POST'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ok</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'There was a problem while logging out.'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-en\">useEffect</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">fetchMe</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/users/me`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">user</span> <span class=\"pl-c1\">||</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-en\">fetchMe</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">Context</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">Provider</span>\n      <span class=\"pl-smi\">value</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">user</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">setUser</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">login</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">logout</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-kos\">{</span>children<span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>Context.Provider&gt;</span><span class=\"pl-c1\"></span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">UseAuth</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">T</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">User</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">AuthContext</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-en\">useAuth</span>: <span class=\"pl-smi\">UseAuth</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">useContext</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">Context</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Initialize the provider by wrapping your entire app like this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { AuthProvider } from '../providers/Auth'; // point this to the path of your provider\nexport const PayloadNextApp: React.FC = () =&gt; {\n  return (\n    &lt;AuthProvider&gt;\n      ...\n    &lt;/AuthProvider&gt;\n  )\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">AuthProvider</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../providers/Auth'</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// point this to the path of your provider</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">PayloadNextApp</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">FC</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">AuthProvider</span><span class=\"pl-c1\">&gt;</span>\n      ...\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-smi\">AuthProvider</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Now you can fire the <code class=\"notranslate\">useAuth</code> hook in any component of your app. Logging in, for instance, might look like this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const LoginPage: React.FC = () =&gt; {\n  import { useAuth } from '../../providers/Auth';\n  \n  const { login } = useAuth();\n  \n  const onSubmit = useCallback(\n    async (data: FormData) =&gt; {\n      try {\n        await login(data);\n        // redirect to `/account` here\n      } catch (_) {\n        setError('There was an error with the credentials provided. Please try again.');\n      }\n    }, [login]);\n\n  return (\n    ... // render a login form here\n  )\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-smi\">LoginPage</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">FC</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useAuth</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../../providers/Auth'</span><span class=\"pl-kos\">;</span>\n  \n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> login <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useAuth</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  \n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">onSubmit</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span>: <span class=\"pl-smi\">FormData</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">await</span> <span class=\"pl-en\">login</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-c\">// redirect to `/account` here</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">setError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'There was an error with the credentials provided. Please try again.'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">login</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    ... <span class=\"pl-c\">// render a login form here</span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Once authenticated, the <code class=\"notranslate\">user</code> property will be populated in the auth context.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1902",
    "id": "1902",
    "createdAt": "2023-01-17T15:01:46Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "jacobsfletch",
      "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
      "url": "https://github.com/jacobsfletch"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">Related: <a href=\"https://github.com/payloadcms/next-auth-frontend\">https://github.com/payloadcms/next-auth-frontend</a></p>",
        "createdAt": "2023-01-17T15:17:01Z",
        "replies": null
      },
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">If you are using the GraphQL API, here's the same <code class=\"notranslate\">AuthProvider</code> but using the GraphQL API instead:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import React, { useState, createContext, useContext, useEffect, useCallback } from 'react'\nimport { User } from '../../payload-types'\n\ntype Login = (args: { email: string; password: string }) =&gt; Promise&lt;void&gt;\n\ntype Logout = () =&gt; Promise&lt;void&gt;\n\ntype AuthContext = {\n  user?: User | null\n  setUser: (user: User | null) =&gt; void\n  logout: Logout\n  login: Login\n}\n\nconst Context = createContext({} as AuthContext)\n\nexport const AuthProvider: React.FC&lt;{ children: React.ReactNode }&gt; = ({ children }) =&gt; {\n  const [user, setUser] = useState&lt;User | null&gt;()\n\n  const login = useCallback&lt;Login&gt;(async args =&gt; {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/graphql`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `mutation {\n            loginUser(email: &quot;${args.email}&quot;, password: &quot;${args.password}&quot;) {\n              user {\n                email\n              }\n              exp\n            }\n          }`,\n      }),\n    })\n\n    if (res.ok) {\n      const { data, errors } = await res.json()\n      if (errors) throw new Error(errors[0].message)\n      setUser(data?.loginUser?.user)\n    } else {\n      throw new Error('Invalid login')\n    }\n  }, [])\n\n  const logout = useCallback&lt;Logout&gt;(async () =&gt; {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/graphql`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `mutation {\n            logoutUser\n          }`,\n      }),\n    })\n\n    if (res.ok) {\n      setUser(null)\n    } else {\n      throw new Error('There was a problem while logging out.')\n    }\n  }, [])\n\n  useEffect(() =&gt; {\n    const fetchMe = async () =&gt; {\n      const res = await fetch(`${process.env.NEXT_PUBLIC_CMS_URL}/api/graphql`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `query {\n            meUser {\n              user {\n                email\n              }\n              exp\n            }\n          }`,\n        }),\n      })\n\n      if (res.ok) {\n        const { data } = await res.json()\n        setUser(data?.meUser?.user || null)\n      } else {\n        throw new Error('There was a problem while logging out.')\n      }\n    }\n\n    fetchMe()\n  }, [])\n\n  return (\n    &lt;Context.Provider\n      value={{\n        user,\n        setUser,\n        login,\n        logout,\n      }}\n    &gt;\n      {children}\n    &lt;/Context.Provider&gt;\n  )\n}\n\ntype UseAuth&lt;T = User&gt; = () =&gt; AuthContext\n\nexport const useAuth: UseAuth = () =&gt; useContext(Context)\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useState</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">createContext</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useContext</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useEffect</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useCallback</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'react'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">User</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../../payload-types'</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">Login</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">email</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">;</span> <span class=\"pl-c1\">password</span>: <span class=\"pl-smi\">string</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">Logout</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">AuthContext</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">user</span>?: <span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span>\n  <span class=\"pl-c1\">setUser</span>: <span class=\"pl-kos\">(</span><span class=\"pl-s1\">user</span>: <span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\"><span class=\"pl-k\">void</span></span>\n  <span class=\"pl-c1\">logout</span>: <span class=\"pl-smi\">Logout</span>\n  <span class=\"pl-c1\">login</span>: <span class=\"pl-smi\">Login</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-smi\">Context</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">createContext</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">AuthContext</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">AuthProvider</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">FC</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">children</span>: <span class=\"pl-smi\">React</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">ReactNode</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> children <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setUser</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">User</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">login</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Login</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-s1\">args</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/graphql`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">'POST'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">'Content-Type'</span>: <span class=\"pl-s\">'application/json'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">body</span>: <span class=\"pl-smi\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">query</span>: <span class=\"pl-s\">`mutation {</span>\n<span class=\"pl-s\">            loginUser(email: \"<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">email</span><span class=\"pl-kos\">}</span></span>\", password: \"<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">password</span><span class=\"pl-kos\">}</span></span>\") {</span>\n<span class=\"pl-s\">              user {</span>\n<span class=\"pl-s\">                email</span>\n<span class=\"pl-s\">              }</span>\n<span class=\"pl-s\">              exp</span>\n<span class=\"pl-s\">            }</span>\n<span class=\"pl-s\">          }`</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ok</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> data<span class=\"pl-kos\">,</span> errors <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">errors</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">errors</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">message</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">loginUser</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">user</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Invalid login'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">logout</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useCallback</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Logout</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/graphql`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">'POST'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">'Content-Type'</span>: <span class=\"pl-s\">'application/json'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">body</span>: <span class=\"pl-smi\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">query</span>: <span class=\"pl-s\">`mutation {</span>\n<span class=\"pl-s\">            logoutUser</span>\n<span class=\"pl-s\">          }`</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ok</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'There was a problem while logging out.'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">useEffect</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">fetchMe</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NEXT_PUBLIC_CMS_URL</span><span class=\"pl-kos\">}</span></span>/api/graphql`</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">'POST'</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">credentials</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>\n          <span class=\"pl-s\">'Content-Type'</span>: <span class=\"pl-s\">'application/json'</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">body</span>: <span class=\"pl-smi\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n          <span class=\"pl-c1\">query</span>: <span class=\"pl-s\">`query {</span>\n<span class=\"pl-s\">            meUser {</span>\n<span class=\"pl-s\">              user {</span>\n<span class=\"pl-s\">                email</span>\n<span class=\"pl-s\">              }</span>\n<span class=\"pl-s\">              exp</span>\n<span class=\"pl-s\">            }</span>\n<span class=\"pl-s\">          }`</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ok</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> data <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-en\">setUser</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">meUser</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">user</span> <span class=\"pl-c1\">||</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'There was a problem while logging out.'</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-en\">fetchMe</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">Context</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">Provider</span>\n      <span class=\"pl-smi\">value</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">user</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">setUser</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">login</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">logout</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-kos\">{</span>children<span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>Context.Provider&gt;</span><span class=\"pl-c1\"></span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">UseAuth</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">T</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">User</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">AuthContext</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">const</span> <span class=\"pl-en\">useAuth</span>: <span class=\"pl-smi\">UseAuth</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">useContext</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">Context</span><span class=\"pl-kos\">)</span></pre></div>",
        "createdAt": "2023-01-24T18:42:30Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "How to load server-side libs (like `fs` or `os`) in collections only in case when code runs on the server?",
    "body": "<p dir=\"auto\">Hello everyone.</p>\n<p dir=\"auto\"><strong>What I want to do?</strong></p>\n<p dir=\"auto\">I have <code class=\"notranslate\">users</code> collection that has hook <code class=\"notranslate\">beforeOperation</code> that should check incoming <code class=\"notranslate\">user</code> data for profile <code class=\"notranslate\">picture</code> URL, download it by URL into temp location and create new record in collection <code class=\"notranslate\">avatar</code> with attached temp <code class=\"notranslate\">file</code>, finally attach record <code class=\"notranslate\">id</code> as <code class=\"notranslate\">avatar</code>.</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"beforeOperation: [\n    async ({ args, operation }) =&gt; {\n      const { req, data } = args;\n\n      if (operation === &quot;create&quot;) {\n        try {\n          // Here I tried to cheat and load lib via dynamic imports. It doesn't work.\n          // Also I tried ESM imports and require(). The same story.\n          const { downloadFile } = await import(&quot;../src/utils/downloadFile&quot;);\n          const { default: os } = await import(&quot;os&quot;);\n\n          const filePath = `${os.tmpdir()}/randomfile`;\n\n          if (data.picture) {\n            await downloadFile(data.picture, filePath);\n\n            const avatar = await req.payload.create({\n              collection: &quot;avatars&quot;,\n              filePath,\n            });\n\n            return {\n              ...args,\n              data: {\n                ...data,\n                avatar: avatar.id,\n              },\n            };\n          }\n        } catch (error) {\n          console.log({ error });\n        }\n\n        return args;\n      }\n    },\n  ],\n},\"><pre class=\"notranslate\"><span class=\"pl-s1\">beforeOperation</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> args<span class=\"pl-kos\">,</span> operation <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> req<span class=\"pl-kos\">,</span> data <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">;</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">operation</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"create\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c\">// Here I tried to cheat and load lib via dynamic imports. It doesn't work.</span>\n          <span class=\"pl-c\">// Also I tried ESM imports and require(). The same story.</span>\n          <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> downloadFile <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-k\">import</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"../src/utils/downloadFile\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">default</span>: <span class=\"pl-s1\">os</span> <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-k\">import</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"os\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n          <span class=\"pl-k\">const</span> <span class=\"pl-s1\">filePath</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">os</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">tmpdir</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>/randomfile`</span><span class=\"pl-kos\">;</span>\n\n          <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">picture</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">await</span> <span class=\"pl-en\">downloadFile</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">picture</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">filePath</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">avatar</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n              <span class=\"pl-c1\">collection</span>: <span class=\"pl-s\">\"avatars\"</span><span class=\"pl-kos\">,</span>\n              filePath<span class=\"pl-kos\">,</span>\n            <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n            <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n              ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">,</span>\n              <span class=\"pl-c1\">data</span>: <span class=\"pl-kos\">{</span>\n                ...<span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span>\n                <span class=\"pl-c1\">avatar</span>: <span class=\"pl-s1\">avatar</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">,</span>\n              <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> error <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span></pre></div>\n<p dir=\"auto\"><strong>Where is the problem?</strong></p>\n<p dir=\"auto\">When I add this code to collection <code class=\"notranslate\">users</code> and try to open Admin UI - I see following error:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/90701/219454122-db75de75-122a-44e5-a4ce-ae00e513ea93.png\"><img width=\"763\" alt=\"Screenshot 2023-02-16 at 20 22 51\" src=\"https://user-images.githubusercontent.com/90701/219454122-db75de75-122a-44e5-a4ce-ae00e513ea93.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Error as text:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ERROR in ./collections/Users.ts 174:36-48\nModule not found: Error: Can't resolve 'os' in '/home/node/app/collections'\n\nBREAKING CHANGE: webpack &lt; 5 used to include polyfills for node.js core modules by default.\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\n\nIf you want to include a polyfill, you need to:\n\t- add a fallback 'resolve.fallback: { &quot;os&quot;: require.resolve(&quot;os-browserify/browser&quot;) }'\n\t- install 'os-browserify'\nIf you don't want to include a polyfill, you can use an empty module like this:\n\tresolve.fallback: { &quot;os&quot;: false }\nERROR in ./src/utils/downloadFile.ts 126:0-39\nModule not found: Error: Can't resolve 'fs' in '/home/node/app/src/utils'\"><pre class=\"notranslate\"><code class=\"notranslate\">ERROR in ./collections/Users.ts 174:36-48\nModule not found: Error: Can't resolve 'os' in '/home/node/app/collections'\n\nBREAKING CHANGE: webpack &lt; 5 used to include polyfills for node.js core modules by default.\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\n\nIf you want to include a polyfill, you need to:\n\t- add a fallback 'resolve.fallback: { \"os\": require.resolve(\"os-browserify/browser\") }'\n\t- install 'os-browserify'\nIf you don't want to include a polyfill, you can use an empty module like this:\n\tresolve.fallback: { \"os\": false }\nERROR in ./src/utils/downloadFile.ts 126:0-39\nModule not found: Error: Can't resolve 'fs' in '/home/node/app/src/utils'\n</code></pre></div>\n<p dir=\"auto\">I'm new with Pyload CMS, so I do not understand properly how it works. But I have assumption that Payload code shares between server-side and client-side, so if I add server-specific lib to collections it cause a problem on client-side.</p>\n<p dir=\"auto\"><strong>Question:</strong> How to load server-side libs (like <code class=\"notranslate\">fs</code> or <code class=\"notranslate\">os</code>) in collections only in case when code runs on the server?</p>\n<p dir=\"auto\">Thank you!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2111",
    "id": "2111",
    "createdAt": "2023-02-16T18:27:58Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "jmas",
      "avatar": "https://avatars.githubusercontent.com/u/90701?v=4",
      "url": "https://github.com/jmas"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmas\">@jmas</a> you're exactly right, you just need to alias your server-only code. Here are the docs that describe this in detail: <a href=\"https://payloadcms.com/docs/admin/webpack#aliasing-server-only-modules\" rel=\"nofollow\">https://payloadcms.com/docs/admin/webpack#aliasing-server-only-modules</a> and here's a real-world example of this: <a href=\"https://github.com/payloadcms/template-ecommerce/blob/main/src/payload.config.ts#L35\">https://github.com/payloadcms/template-ecommerce/blob/main/src/payload.config.ts#L35</a>. Would this work for you?</p>",
        "createdAt": "2023-02-16T18:36:42Z",
        "replies": [
          {
            "author": {
              "name": "jacobsfletch",
              "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
              "url": "https://github.com/jacobsfletch"
            },
            "body": "<p dir=\"auto\">So in your case, like this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\nexport default buildConfig({\n  admin: {\n    webpack: config =&gt; ({\n      ...config,\n      resolve: {\n        ...config.resolve,\n        alias: {\n          os: 'YOUR_MOCK_MODULE_PATH',\n          // OR extract your `beforeOperation` function into it's own file and alias THAT\n        }\n      }\n    })\n  }\n})\"><pre class=\"notranslate\"><span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-en\">buildConfig</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">admin</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">webpack</span>: <span class=\"pl-s1\">config</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      ...<span class=\"pl-s1\">config</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">resolve</span>: <span class=\"pl-kos\">{</span>\n        ...<span class=\"pl-s1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">resolve</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">alias</span>: <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c1\">os</span>: <span class=\"pl-s\">'YOUR_MOCK_MODULE_PATH'</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c\">// OR extract your `beforeOperation` function into it's own file and alias THAT</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>",
            "createdAt": "2023-02-16T18:40:09Z"
          },
          {
            "author": {
              "name": "jmas",
              "avatar": "https://avatars.githubusercontent.com/u/90701?v=4",
              "url": "https://github.com/jmas"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jacobsfletch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jacobsfletch\">@jacobsfletch</a> Thank you for operative answer! I soved the problem, also I google better and found that plugin <a href=\"https://www.npmjs.com/package/payload-plugin-resolve-alias\" rel=\"nofollow\">https://www.npmjs.com/package/payload-plugin-resolve-alias</a> that looks like do the same but in more convenient way.</p>",
            "createdAt": "2023-02-16T19:03:21Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "jacobsfletch",
        "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
        "url": "https://github.com/jacobsfletch"
      },
      "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmas\">@jmas</a> you're exactly right, you just need to alias your server-only code. Here are the docs that describe this in detail: <a href=\"https://payloadcms.com/docs/admin/webpack#aliasing-server-only-modules\" rel=\"nofollow\">https://payloadcms.com/docs/admin/webpack#aliasing-server-only-modules</a> and here's a real-world example of this: <a href=\"https://github.com/payloadcms/template-ecommerce/blob/main/src/payload.config.ts#L35\">https://github.com/payloadcms/template-ecommerce/blob/main/src/payload.config.ts#L35</a>. Would this work for you?</p>",
      "createdAt": "2023-02-16T18:36:42Z",
      "chosenAt": "2023-02-16T19:03:24Z",
      "chosenBy": "jmas"
    }
  },
  {
    "title": "How to deploy Payload CMS on container runtimes like Docker Swarm?",
    "body": "<p dir=\"auto\">How can we deploy payload cms on container runtimes such as docker swarm? They demand that an image is deployed to a container registry first (e.g. <a href=\"http://hub.docker.com/\" rel=\"nofollow\">hub.docker.com</a>) before being able to deploy. To build payload into a container seems to be &gt; 800 MB in the basic case due to build dependencies. Providing a docker-compose.yml / Dockerfile in the created repositories is great but it doesn't really help us for deployments that are not \"docker-compose up\"</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2110",
    "id": "2110",
    "createdAt": "2023-02-16T15:07:04Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "the-digital-anarchist",
      "avatar": "https://avatars.githubusercontent.com/u/73137980?v=4",
      "url": "https://github.com/the-digital-anarchist"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "richText field link to internal document - how to set browsable collections?",
    "body": "<p dir=\"auto\">Hi,<br>\nhow can I control which collections are available to be browsed when users want to add an internal link in a richText field?<br>\nSo something like</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n\ttype: 'relationship',\n\tname: 'internal',\n\tlabel: 'Document to link to',\n\trelationTo: ['pages', 'posts'],\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n\t<span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'relationship'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'internal'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">label</span>: <span class=\"pl-s\">'Document to link to'</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-c1\">relationTo</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'pages'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">... for the richText field. Sorry, maybe I'm missing something but I couldn't find anything in the docs nor in this forum.</p>\n<p dir=\"auto\">As you can see here in the first screenshot I can't select anything from the Posts collection.<br>\nBut as shown in the second screenshot I could add items to the Posts collection.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/79059627/219347236-afdfa224-ed5b-4690-b8fd-ec22ad6d21f4.png\"><img src=\"https://user-images.githubusercontent.com/79059627/219347236-afdfa224-ed5b-4690-b8fd-ec22ad6d21f4.png\" alt=\"Screenshot at 2023-02-16 11-59-11\" style=\"max-width: 100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/79059627/219347272-a81723da-b4ab-4dc5-98c5-6aebf407a37d.png\"><img src=\"https://user-images.githubusercontent.com/79059627/219347272-a81723da-b4ab-4dc5-98c5-6aebf407a37d.png\" alt=\"Screenshot at 2023-02-16 11-59-32\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2095",
    "id": "2095",
    "createdAt": "2023-02-14T22:24:54Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "unonweb",
      "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
      "url": "https://github.com/unonweb"
    },
    "comments": [
      {
        "author": {
          "name": "unonweb",
          "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
          "url": "https://github.com/unonweb"
        },
        "body": "<p dir=\"auto\">Alright, I've got it: It has to do with the <strong>order of the collections</strong> in <em>payload.config.ts</em></p>\n<p dir=\"auto\">In the first example from within the pages collection richText fields can only link to Media, MediaCategories and Pages<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/79059627/219350232-d3955151-ffb4-4da3-bf30-e5196d194cb1.png\"><img src=\"https://user-images.githubusercontent.com/79059627/219350232-d3955151-ffb4-4da3-bf30-e5196d194cb1.png\" alt=\"Screenshot at 2023-02-16 12-13-42\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">In this example from within the pages collection richText fields can link to Media, MediaCategories, Pages, Posts and PostsCategories<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/79059627/219350239-57d205ce-e0bc-4e28-8fdf-2b096803fb10.png\"><img src=\"https://user-images.githubusercontent.com/79059627/219350239-57d205ce-e0bc-4e28-8fdf-2b096803fb10.png\" alt=\"Screenshot at 2023-02-16 12-14-08\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">If this behaviour is intended I think it should be described in the docs.</p>",
        "createdAt": "2023-02-16T11:17:33Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "unonweb",
        "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
        "url": "https://github.com/unonweb"
      },
      "body": "<p dir=\"auto\">Alright, I've got it: It has to do with the <strong>order of the collections</strong> in <em>payload.config.ts</em></p>\n<p dir=\"auto\">In the first example from within the pages collection richText fields can only link to Media, MediaCategories and Pages<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/79059627/219350232-d3955151-ffb4-4da3-bf30-e5196d194cb1.png\"><img src=\"https://user-images.githubusercontent.com/79059627/219350232-d3955151-ffb4-4da3-bf30-e5196d194cb1.png\" alt=\"Screenshot at 2023-02-16 12-13-42\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">In this example from within the pages collection richText fields can link to Media, MediaCategories, Pages, Posts and PostsCategories<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/79059627/219350239-57d205ce-e0bc-4e28-8fdf-2b096803fb10.png\"><img src=\"https://user-images.githubusercontent.com/79059627/219350239-57d205ce-e0bc-4e28-8fdf-2b096803fb10.png\" alt=\"Screenshot at 2023-02-16 12-14-08\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">If this behaviour is intended I think it should be described in the docs.</p>",
      "createdAt": "2023-02-16T11:17:33Z",
      "chosenAt": "2023-02-16T11:17:47Z",
      "chosenBy": "unonweb"
    }
  },
  {
    "title": "Do you have plans to introduce a UI for field configuration?",
    "body": "<p dir=\"auto\">Hey! Just spent the weekend kicking the tires on Payload. I'm really impressed by how well thought out the whole project seems. Y'all are obviously working your butts off and making a great product.</p>\n<p dir=\"auto\">So far, most of my time has been spent in the docs, reading about config options...and then trying my best to remember them as I scaffolded out a bunch of collections. The field config definitely reminds me of a much friendlier version of ACF's JSON files, and I fully acknowledge the importance of a file-based data setup within a CMS environment.</p>\n<p dir=\"auto\">However, I couldn't help but think that there should be some sort of tool that helps beginners scaffold out field configs via a UI. I suspect you might be against this sort of thing; after all, it seems that the file-based config is very much a first-class feature of Payload. But...on the off chance that you're not, I'd like to know if you have any plans to incorporate such a thing into Payload.</p>\n<p dir=\"auto\">If so, awesome! If not, would you mind if someone like myself created an ancillary project to do just that? Thanks in advance for your response, and keep up the great work with Payload.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/33",
    "id": "33",
    "createdAt": "2021-01-25T05:14:09Z",
    "upvotes": 3,
    "commentTotal": 5,
    "author": {
      "name": "raybrownco",
      "avatar": "https://avatars.githubusercontent.com/u/190916?v=4",
      "url": "https://github.com/raybrownco"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey @bitmanic — thank you for the compliments! We think it's turning out well!</p>\n<p dir=\"auto\">I can understand your points for sure and we have had internal discussions around this for a while now. Overall, we absolutely welcome the idea and have some thoughts as to how it could best be incorporated. As of right now, we don't have any concrete plans to build something like this but it is definitely on the radar. I'll do my best to flesh out our prior thinking to see if we can maybe spark some synergy here.</p>\n<p dir=\"auto\"><strong>UX Considerations</strong></p>\n<ul dir=\"auto\">\n<li>Any type of \"collection / global\" UI builder would be most helpful in creating Fields, although it could be used to create entire Collection / Global configs (labels, upload, auth, other admin UI options)</li>\n<li>A UI builder will be most helpful in a user's first X days with Payload, because after that point, fields and their settings are memorizable and the utility of a UI builder diminishes.</li>\n<li>It could likely be built directly into the Admin UI if done right. If it is built-in, its access should be able to be controlled via config so as to be able to hide it from those that don't need it (editors, content people, etc.)</li>\n<li>Alternatively to building it into the Admin UI, due to its universal nature, it could even go right on the Payload website... Thoughts?</li>\n<li>A great UX might be sort of a WYSIWYG builder... where you drag + drop fields, configure, etc. and see a preview of exactly how the Payload Admin UI would look like when using the field config</li>\n</ul>\n<p dir=\"auto\"><strong>Technical Requirements</strong></p>\n<ul dir=\"auto\">\n<li>Because Payload developers can write their configs anywhere, at any time, this UI builder may be limited to only \"generating\" field configs, which would then be able to be copy-pasted into developers' filesystems where and how they see fit. Kinda like ACF's PHP copy+paste.</li>\n<li>It would be ideal to have a way to automatically write output field configs into the filesystem, but that will come with a lot of technical overhead and complexity. Strapi has a similar pattern there and they have to deal with Node server restarts and all kinds of stuff, which further complexifies the Admin UI which should remain extremely minimal and understandable.</li>\n</ul>\n<p dir=\"auto\">Anyway, we would WELCOME further contributions to this idea and would be happy to continue its discussion. We may want to mock up a UX prototype as a first step if this feature is commonly requested. We are working on our public Roadmap now, and this feature will absolutely be added to it.</p>\n<p dir=\"auto\">What do you think?</p>",
        "createdAt": "2021-01-25T13:57:15Z",
        "replies": [
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">@bitmanic Thank you for this feedback!</p>\n<p dir=\"auto\">I see the configuration UI tool (eventually) existing on our website and offered as an alternative means of \"Getting Started\" instead of <code class=\"notranslate\">npx create-payload-app</code>. Having a node environment and using the command line instantly limits our appeal to users who willing to use the command line. We would have a lot of work involved to make every option in the config editable within the UI, but it could be worthwhile.</p>\n<p dir=\"auto\">Having the builder functionality is exactly what people are searching for in \"low code\" and \"no code\" applications. I also think we could, in the future, help bridge users from the config builder to CI and hosting by adding a workflow that commits to their github repo on their own account. I would want to validate that the market exists before going this far.</p>\n<p dir=\"auto\">Payload is built for developers <a aria-label=\"Pull request #1\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"780837629\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1/hovercard\" href=\"https://github.com/payloadcms/payload/pull/1\">#1</a>, but other users could be empowered and even drawn in to do development with this kind of tool. I think this fits our strategy well, Payload should be as simple as possible for users as we've done already, with the style in how documentation is written. Wordpress is the go-to CMS in spite of its faults because of how simple it is to host a PHP website compared to other languages.</p>",
            "createdAt": "2021-01-25T17:15:44Z"
          }
        ]
      },
      {
        "author": {
          "name": "raybrownco",
          "avatar": "https://avatars.githubusercontent.com/u/190916?v=4",
          "url": "https://github.com/raybrownco"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> and <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DanRibbens/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DanRibbens\">@DanRibbens</a>: thanks for the great feedback.</p>\n<p dir=\"auto\">I definitely agree that a UI-based field/collection creator feels more like a scaffolding/generative tool rather than something that devs would constantly come back to again and again. As for where that tool could/should exist, my personal opinion would be to <em>not</em> have it live within a Payload CMS instance's admin panel. I think people seeing a GUI for creating collections/fields within the admin panel will instantly expect it to work like WordPress, Craft CMS, Contentful, or whatever other CMS they're used to.</p>\n<p dir=\"auto\">Payload is decidedly (and intentionally) different from these other CMS options. Maybe some day down the road, a fully-featured GUI for managing fields would be something to consider, but it's quite obvious that the current focus is definitely not in that direction.</p>\n<p dir=\"auto\">With that said—and with all due respect—as a new user, I've found it a bit difficult to keep all of the available options in my head when I go to create a new field/collection. A simple <a href=\"https://payloadcms.com/docs/fields/checkbox\" rel=\"nofollow\">checkbox field</a> has 12 config attributes, and half of them can't be configured without additional knowledge from other documentation pages. So...to fully understand a checkbox field requires an inquiring developer to visit at least seven documentation pages. And that's just for one of many fields that I'd like to add to any given Collection, which has its own mass of configuration documentation.</p>\n<p dir=\"auto\">Please don't take this as a shot at Payload or its documentation. The documentation itself is completely stellar. You've done a wonderful job with it! I'm definitely not trying to complain about it in this space. My intention is to communicate the \"modularity\" of the system, which is complex but necessarily so.</p>\n<p dir=\"auto\">At this point, I should note that the types at <a href=\"https://github.com/payloadcms/payload/blob/master/src/fields/config/types.ts\"><code class=\"notranslate\">src/fields/config/types.ts</code></a> have been so incredibly useful. They communicate so much great information about each of the field types concisely. That file's also been useful in helping me understand which field attributes are global versus specific to that field. The UI I see in my head for field configuration looks quite similar to these type definitions.</p>\n<p dir=\"auto\">A few remaining thoughts:</p>\n<ol dir=\"auto\">\n<li>A UI builder, as you noted, seems most valuable to devs who are still learning Payload and/or setting up new Collections.</li>\n<li>A config generator should probably be hosted on the Payload website (or some other resource) instead of within a Payload CMS instance.</li>\n<li>Something to consider: perhaps let people share their configs with others? Or...have a showcase of config examples, sort of how Tailwind CSS offers style examples via Tailwind UI? They've done a great job of communicating that the components at Tailwind UI are a starting point of sorts - the dev is expected to copy/paste/modify the code as needed. These config objects are shaped similarly. (I see that you've already gathered some 'demo' configs in the repo.)</li>\n<li>Perhaps another approach worth considering is <em>not</em> a UI, but something like a VS Code Intellisense plugin or something. The reach of such a tool would be narrower, but it would be much closer to the code, which is probably exactly where devs want to be.</li>\n</ol>\n<p dir=\"auto\">Sorry for the delay in response, and also for the lengthy one!</p>",
        "createdAt": "2021-02-02T08:47:28Z",
        "replies": null
      },
      {
        "author": {
          "name": "seaj1one",
          "avatar": "https://avatars.githubusercontent.com/u/72103864?v=4",
          "url": "https://github.com/seaj1one"
        },
        "body": "<p dir=\"auto\">I'm not a dev and looking for a low code CMS that is more powerful than Wordpress. I'd like to see a UI that allows me to manage my content. I use Metabox, which allows me to create custom fields and posts but also shows me the PHP code. As you add and remove components, users can learn as they go.</p>",
        "createdAt": "2023-01-01T13:00:02Z",
        "replies": [
          {
            "author": {
              "name": "seaj1one",
              "avatar": "https://avatars.githubusercontent.com/u/72103864?v=4",
              "url": "https://github.com/seaj1one"
            },
            "body": "<p dir=\"auto\">An additional thing I'd like to add if this helps.</p>\n<p dir=\"auto\">Metabox has a separate field generator at the top of this link and a field generated within the plugin. I mentioned the field generator as it could give the option to copy and paste the code.</p>\n<p dir=\"auto\"><a href=\"https://metabox.io/\" rel=\"nofollow\">https://metabox.io/</a></p>",
            "createdAt": "2023-01-01T13:11:25Z"
          }
        ]
      },
      {
        "author": {
          "name": "ToneseekerMusical",
          "avatar": "https://avatars.githubusercontent.com/u/105748910?v=4",
          "url": "https://github.com/ToneseekerMusical"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a><br>\nAs someone who's self taught and has never worked in tech a day in my life, I find the current state of Payload incredibly intuitive, extremely well thought out, and beginner friendly, even for those with almost no coding experience, however, in its current state, Payload can be quite daunting for those who don't have the desire to learn to code, and even people who aren't afraid to get their feet wet, but are still new to coding. With that in mind, I'll happily say that I think this feature request would be a huge step in the direction of bringing more Wordpress users into the fold, and if you add in a GUI for access control management, it would be leaps and bounds ahead of any of the other CMS systems I've personally used.</p>\n<p dir=\"auto\">As a businessman however, I don't think that forcing your inexperienced users to go to your website every time they want to add a new collection is the right move, especially after they may have possibly struggled to get everything set up. I'm of the mind that this feature should only be accessible in devmode, which would mitigate damage to the site by users without admin control of the box that it is hosted on.</p>\n<p dir=\"auto\">Additionally, to address some of the thoughts on Wordpress/Low code/ No Code users, I think that having an executable that installs a clean NodeJS, MongoDBCompass, and Payload instance on the user's local computer and functions similarly to that of XAMPP or OS specific installations such as W/L/Mamp would greatly improve your conversion rate from your competitors. You could have a devmode switch on the application to enable and disable devmode, a gitpush button that would push any changes made to the user's github repository, and a build button to generate a build of the application, ready to be copied to whatever server the user may have.</p>",
        "createdAt": "2023-01-30T09:55:32Z",
        "replies": null
      },
      {
        "author": {
          "name": "hades200082",
          "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
          "url": "https://github.com/hades200082"
        },
        "body": "<p dir=\"auto\">I just want to throw in here that the primary pull of payload for me is that all of the content model is version controlled in code.</p>\n<p dir=\"auto\">I moved to payload from Strapi specifically to get away from GUI content modelling.</p>",
        "createdAt": "2023-02-14T07:39:12Z",
        "replies": [
          {
            "author": {
              "name": "seaj1one",
              "avatar": "https://avatars.githubusercontent.com/u/72103864?v=4",
              "url": "https://github.com/seaj1one"
            },
            "body": "<p dir=\"auto\">Can there be an option for both in theory?</p>",
            "createdAt": "2023-02-14T12:45:38Z"
          },
          {
            "author": {
              "name": "hades200082",
              "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
              "url": "https://github.com/hades200082"
            },
            "body": "<p dir=\"auto\">Strapi do this. It means their gui can only be used in dev mode and causes a rebuild of the server when you save a content type.</p>\n<p dir=\"auto\">Additional consideration would be that any gui would need to provide for reuse of types and create a good file structure</p>\n<p dir=\"auto\">I also don't see any way for hooks or access control to be handled simply in a gui/No-code</p>\n<p dir=\"auto\">I do like the idea of having a separate tool for field/content type generation</p>",
            "createdAt": "2023-02-16T07:47:32Z"
          },
          {
            "author": {
              "name": "ToneseekerMusical",
              "avatar": "https://avatars.githubusercontent.com/u/105748910?v=4",
              "url": "https://github.com/ToneseekerMusical"
            },
            "body": "<p dir=\"auto\">I'm actually working on a desktop application that will solve this issue and keep any file manipulation functions on your local machine so a malicious party can't do nearly as much damage as they could if it was a built in feature. It's still in its infancy, but it's coming along quite well. It's built to set up a computer from scratch in order to entice Wordpress and low-code / no-code users to try Payload.</p>\n<p dir=\"auto\">In its current state, it downloads all the tools needed to develop with Payload and adds them to your system PATH environment variable. You can currently set up and delete multiple blank payload sites without a frontend.</p>\n<p dir=\"auto\">There are quite a few things that I need to do before I can add a GUI collections editor, but I'm working toward that goal. This will eventually allow you to build an entire website from a GUI, push it to a Github repository, build the site, export the database, and package it in a file that can be uploaded to any webserver to be installed.</p>\n<p dir=\"auto\"><a href=\"https://github.com/ToneseekerMusical/PPIM\">https://github.com/ToneseekerMusical/PPIM</a></p>",
            "createdAt": "2023-02-16T08:01:38Z"
          },
          {
            "author": {
              "name": "seaj1one",
              "avatar": "https://avatars.githubusercontent.com/u/72103864?v=4",
              "url": "https://github.com/seaj1one"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hades200082/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hades200082\">@hades200082</a> <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ToneseekerMusical/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ToneseekerMusical\">@ToneseekerMusical</a> Good news to hear something is being developed. As a non-developer, I wouldn't expect any GUI to be able to do everything.</p>\n<p dir=\"auto\">I'm used to using a little code that someone provided and accept that I may have to learn a little bit. It may also help me to understand the code better too. <g-emoji class=\"g-emoji\" alias=\"grinning\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f600.png\">😀</g-emoji></p>",
            "createdAt": "2023-02-16T08:45:09Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Localized Text Field Component",
    "body": "<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">we are a web agency with more than 20 years of experience and we are deciding to replace our custom-made CMS with a modern headless CMS, and we’ll really like to use Payload CMS.</p>\n<p dir=\"auto\">The only feature we are missing is the possibility to have a localized field component that permits to:</p>\n<ul dir=\"auto\">\n<li>Instantly understand which fields are localizable and which are not.</li>\n<li>Instantly understand which localizations are provided for the specific field (without having to switch locale for the full document).</li>\n<li>Cycle between field localizations to easily check the current values.</li>\n<li>Facilitate quick data entry even in the case of a large amount of values at once.</li>\n<li>Easily add a localized value for a language not yet provided.</li>\n</ul>\n<p dir=\"auto\">This is an example of how our custom CMS actually works:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">The default language (English) value is shown in the field header and in the input field of the English tab. Just by looking at this, the user knows that this is a localized text field and that it’s currently localized in English and Italian.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/45173102/198567779-b7519a55-2753-41e2-87a7-2f4d564651b7.jpg\"><img src=\"https://user-images.githubusercontent.com/45173102/198567779-b7519a55-2753-41e2-87a7-2f4d564651b7.jpg\" alt=\"cms_loc_text_01\" style=\"max-width: 100%;\"></a></p>\n</li>\n<li>\n<p dir=\"auto\">By selecting the Italian tab the user can see and edit the Italian localization.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/45173102/198567852-af6f4b6d-3004-4ec0-aeec-fb703183292d.jpg\"><img src=\"https://user-images.githubusercontent.com/45173102/198567852-af6f4b6d-3004-4ec0-aeec-fb703183292d.jpg\" alt=\"cms_loc_text_02\" style=\"max-width: 100%;\"></a></p>\n</li>\n<li>\n<p dir=\"auto\">By selecting the feature “Add text in a language” the user can select one of the available languages not yet used for the field, in this example the French tab will be added and the user could provide the French localized value.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/45173102/198567913-a23d5ffb-0a2a-4ffe-87b2-e56294617705.jpg\"><img src=\"https://user-images.githubusercontent.com/45173102/198567913-a23d5ffb-0a2a-4ffe-87b2-e56294617705.jpg\" alt=\"cms_loc_text_03\" style=\"max-width: 100%;\"></a></p>\n</li>\n</ol>\n<p dir=\"auto\">We are used to build complex sites with a lot of different languages (usually more than 10) and this feature is indispensable for us for choosing our new CMS.</p>\n<p dir=\"auto\">Our customers find this system very intuitive, and we think it would be a great addition to Payload CMS.</p>\n<p dir=\"auto\">Obviously, we don’t expect the component to be exactly like the one of our custom-made CMS, the pictures are just an example to explain the feature, the new component should be integrated with the style and UX of the Payload CMS Admin UI.</p>\n<p dir=\"auto\">You could be interested to include this feature in Payload CMS?</p>\n<p dir=\"auto\">In case we would be available to actively collaborate in the development.</p>\n<p dir=\"auto\">Looking at the code, we should be able to create our own custom UI component but the problem is that the field value of the localized field is flattened to the current locale and we can’t load and save the JSON data containing all the languages at once.</p>\n<p dir=\"auto\">Our basic idea is to create a new version of the <code class=\"notranslate\">useField</code> hook (i.e., <code class=\"notranslate\">useLocalizedField</code>) that works with not flattened localized fields like in the <code class=\"notranslate\">beforeRead</code> collection hook. We understand that is a major change in the Payload CMS core regarding the data access of the collections.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1308",
    "id": "1308",
    "createdAt": "2022-10-28T12:45:20Z",
    "upvotes": 9,
    "commentTotal": 2,
    "author": {
      "name": "manuelebagnolini",
      "avatar": "https://avatars.githubusercontent.com/u/45173102?u=f1cbfd1d3007fe316c3f41dd9e1491fc026e7977&v=4",
      "url": "https://github.com/manuelebagnolini"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/manuelebagnolini/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/manuelebagnolini\">@manuelebagnolini</a> — thank you for going into such detail here. We really appreciate it!</p>\n<p dir=\"auto\">We're actually going to be working on improving our localization experience over the next few months, and I think we can make a lot of this easier for you and your team. Many of the ideas that you're referencing could end up being possible for sure.</p>\n<blockquote>\n<p dir=\"auto\">we can’t load and save the JSON data containing all the languages at once.</p>\n</blockquote>\n<p dir=\"auto\">Actually, you can! Use <code class=\"notranslate\">locale=*</code> as a query param in the REST API and you can get data for all locales. <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>  That might help you get started on your custom UI fields at least. Also, I should point out that you can probably get some fancy stuff done with <code class=\"notranslate\">Description</code> components as well, on each field, so as to try and indicate which field has which translation, etc.</p>\n<p dir=\"auto\">As for the concrete items that we plan to take on and build, I will update this thread once we have had time to nail them all down. But this is good stuff.</p>",
        "createdAt": "2022-10-28T12:54:55Z",
        "replies": [
          {
            "author": {
              "name": "manuelebagnolini",
              "avatar": "https://avatars.githubusercontent.com/u/45173102?u=f1cbfd1d3007fe316c3f41dd9e1491fc026e7977&v=4",
              "url": "https://github.com/manuelebagnolini"
            },
            "body": "<p dir=\"auto\">Thank you <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a>.<br>\nIn the meantime we'll look into your suggestions.<g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
            "createdAt": "2022-10-28T13:32:08Z"
          }
        ]
      },
      {
        "author": {
          "name": "manuelebagnolini",
          "avatar": "https://avatars.githubusercontent.com/u/45173102?u=f1cbfd1d3007fe316c3f41dd9e1491fc026e7977&v=4",
          "url": "https://github.com/manuelebagnolini"
        },
        "body": "<p dir=\"auto\">I share an update on the development of the feature.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/45173102/202403083-d736e765-2dba-424f-a6b2-10cbe6b164e0.gif\"><img src=\"https://user-images.githubusercontent.com/45173102/202403083-d736e765-2dba-424f-a6b2-10cbe6b164e0.gif\" alt=\"PayloadLocalizationUIField\" data-animated-image=\"\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">In details we added:</p>\n<ul dir=\"auto\">\n<li>A sticky component at the top of document with the locale selector to easily switch locales.</li>\n<li>A \"Change localization\" button to instantly understand which field are localized and access the localization feature</li>\n<li>A modal that allows you to edit the existing localizations and insert new ones. The localization in the reference language (current document locale) is always visible to facilitate the translation. You can save all changed localizations at once as a drafts or publish them directly.</li>\n</ul>\n<p dir=\"auto\">We are currently having problems saving so we opened these issues: <a aria-label=\"Issue #1415\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1449976426\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1415\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/1415/hovercard\" href=\"https://github.com/payloadcms/payload/issues/1415\">#1415</a>, <a aria-label=\"Issue #1419\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1450574176\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/1419/hovercard\" href=\"https://github.com/payloadcms/payload/issues/1419\">#1419</a></p>\n<p dir=\"auto\">Instead of calling an API for each locale it would be more efficient to call a single API to massively update all languages. Could it be added to this discussion: <a aria-label=\"Discussion #1382\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4561549\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1382\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1382/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1382\">#1382</a>?</p>",
        "createdAt": "2022-11-17T09:30:39Z",
        "replies": [
          {
            "author": {
              "name": "b-barry",
              "avatar": "https://avatars.githubusercontent.com/u/3358788?u=dbf460474df3382f575e67cfad41ba0387d6401b&v=4",
              "url": "https://github.com/b-barry"
            },
            "body": "<p dir=\"auto\">Are you planning to make it open source?</p>",
            "createdAt": "2023-02-15T22:36:09Z"
          },
          {
            "author": {
              "name": "manuelebagnolini",
              "avatar": "https://avatars.githubusercontent.com/u/45173102?u=f1cbfd1d3007fe316c3f41dd9e1491fc026e7977&v=4",
              "url": "https://github.com/manuelebagnolini"
            },
            "body": "<blockquote>\n<p dir=\"auto\">Are you planning to make it open source?</p>\n</blockquote>\n<p dir=\"auto\">Yes, it's part of an open source project that we plan to release this year.</p>",
            "createdAt": "2023-02-16T08:05:01Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Payload 1.6 Megathread",
    "body": "<p dir=\"auto\">Version 1.6 has been released <g-emoji class=\"g-emoji\" alias=\"tada\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f389.png\">🎉</g-emoji></p>\n<p dir=\"auto\">This is a very large release that comes with some <g-emoji class=\"g-emoji\" alias=\"rotating_light\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png\">🚨</g-emoji> BREAKING CHANGES <g-emoji class=\"g-emoji\" alias=\"rotating_light\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png\">🚨</g-emoji> , so please read the <a href=\"https://github.com/payloadcms/payload/releases/tag/v1.6.1\">Changelog</a> carefully.</p>\n<p dir=\"auto\">We try our best to avoid breaking changes, but we decided this was the right time to do it as it paves the way for greater things in the future like ongoing TypeScript niceties, serverless support, and additional database support <g-emoji class=\"g-emoji\" alias=\"sunglasses\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png\">😎</g-emoji></p>\n<p dir=\"auto\">If you run into issues after reading the changelog, please reply in this thread, so we can assist.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1992",
    "id": "1992",
    "createdAt": "2023-02-01T16:48:15Z",
    "upvotes": 3,
    "commentTotal": 6,
    "author": {
      "name": "denolfe",
      "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
      "url": "https://github.com/denolfe"
    },
    "comments": [
      {
        "author": {
          "name": "STR1234",
          "avatar": "https://avatars.githubusercontent.com/u/9266694?u=4d3caf81099456acbc559650b315de91aa325d21&v=4",
          "url": "https://github.com/STR1234"
        },
        "body": "<p dir=\"auto\">After the update and going through the Changelog printSchema.js throws:<br>\n<code class=\"notranslate\">const directives = schema.getDirectives().filter(directiveFilter);</code></p>\n<p dir=\"auto\"><code class=\"notranslate\">TypeError: Cannot read properties of undefined (reading 'getDirectives')</code><br>\nwhenever generate:graphQLSchema is invoked.<br>\nAny ideas? :) What have I missed? <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">🤔</g-emoji></p>",
        "createdAt": "2023-02-01T19:29:25Z",
        "replies": [
          {
            "author": {
              "name": "denolfe",
              "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
              "url": "https://github.com/denolfe"
            },
            "body": "<p dir=\"auto\">Good catch! Looking into this now.</p>",
            "createdAt": "2023-02-01T19:36:34Z"
          },
          {
            "author": {
              "name": "denolfe",
              "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
              "url": "https://github.com/denolfe"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/STR1234/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/STR1234\">@STR1234</a> Fixed in 1.6.3</p>",
            "createdAt": "2023-02-01T20:57:15Z"
          },
          {
            "author": {
              "name": "STR1234",
              "avatar": "https://avatars.githubusercontent.com/u/9266694?u=4d3caf81099456acbc559650b315de91aa325d21&v=4",
              "url": "https://github.com/STR1234"
            },
            "body": "<p dir=\"auto\">Yeeees indeed <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>  Thanks for the fast response :)</p>",
            "createdAt": "2023-02-01T21:26:24Z"
          }
        ]
      },
      {
        "author": {
          "name": "vstarush",
          "avatar": "https://avatars.githubusercontent.com/u/10617969?v=4",
          "url": "https://github.com/vstarush"
        },
        "body": "<p dir=\"auto\">Hello! For non-Typescript project in version 1.6.3 the payload.config.js and all collections are throwing an error:<br>\n\"SyntaxError: Cannot use import statement outside a module.\"</p>\n<p dir=\"auto\">Not sure if this is because the payload.init became async or because of any other changes.<br>\nA fix like adding 'type: \"module\"' in package.json doesn't work cause it breaks other things and changing payload.config from js to .mjs doesn't either.</p>\n<p dir=\"auto\">Would appreciate on any ideas on how to fix this, if this is at all possible. Thank you! :)</p>",
        "createdAt": "2023-02-02T05:29:02Z",
        "replies": [
          {
            "author": {
              "name": "JarrodMFlesch",
              "avatar": "https://avatars.githubusercontent.com/u/30633324?u=13d4ca1d1d86b5ce4a1ff5eef12b3016b20b2283&v=4",
              "url": "https://github.com/JarrodMFlesch"
            },
            "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vstarush/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vstarush\">@vstarush</a>! You can still use JS without using TS, there are just a couple things that you will need to update. The changelog has a link out to a PR that explains the few steps that are needed to get your JS project working. Here is the <a href=\"https://github.com/payloadcms/payload/pull/1847\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1847/hovercard\">PR</a> with the steps you will need to follow.</p>\n<p dir=\"auto\">Let us know if you run into anything <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
            "createdAt": "2023-02-02T14:47:21Z"
          }
        ]
      },
      {
        "author": {
          "name": "fabioquarantini",
          "avatar": "https://avatars.githubusercontent.com/u/425733?v=4",
          "url": "https://github.com/fabioquarantini"
        },
        "body": "<p dir=\"auto\">Does \"retainDeleted\" no longer exist?</p>",
        "createdAt": "2023-02-02T10:42:14Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">From the start, that property was actually incorrectly documented and it never did anything. Versions <strong><em>must</em></strong> be deleted alongside of their parent documents being deleted, but in the future, we can build this feature if you need it. What do you think?</p>",
            "createdAt": "2023-02-02T14:53:33Z"
          },
          {
            "author": {
              "name": "fabioquarantini",
              "avatar": "https://avatars.githubusercontent.com/u/425733?v=4",
              "url": "https://github.com/fabioquarantini"
            },
            "body": "<p dir=\"auto\">Ok, the \"Trash\" function would be ideal. (Like WordPress)</p>",
            "createdAt": "2023-02-02T16:21:00Z"
          }
        ]
      },
      {
        "author": {
          "name": "lksfrn",
          "avatar": "https://avatars.githubusercontent.com/u/29776261?u=7ab4dc930c50a3af6c833764e9a74559b705878f&v=4",
          "url": "https://github.com/lksfrn"
        },
        "body": "<p dir=\"auto\">There was a mention of Vercel deployments. Is there some guide on how to deploy Payload to it?</p>",
        "createdAt": "2023-02-02T11:56:02Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Not yet - but keep an eye out <g-emoji class=\"g-emoji\" alias=\"smiling_imp\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f608.png\">😈</g-emoji></p>",
            "createdAt": "2023-02-02T14:53:45Z"
          }
        ]
      },
      {
        "author": {
          "name": "jakehopking",
          "avatar": "https://avatars.githubusercontent.com/u/3432643?u=0af30a37a531b00d8fbdf3e898fd111bab725928&v=4",
          "url": "https://github.com/jakehopking"
        },
        "body": "<p dir=\"auto\">Hi - I've upgraded to the 1.6.6 and all records in my collections (in the admin ui) are missing.</p>\n<p dir=\"auto\">I've followed the instructions here: <a aria-label=\"Pull request #1847\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1527725213\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1847\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1847/hovercard\" href=\"https://github.com/payloadcms/payload/pull/1847\">#1847</a></p>\n<p dir=\"auto\">So I can confirm that dev runs using <code class=\"notranslate\">ts-node</code> despite loading <code class=\"notranslate\">.js</code> files which contain <code class=\"notranslate\">require</code>.</p>\n<p dir=\"auto\">I've tried running your migration script, however it fails with this error:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\n[10:52:31] INFO (payload): Connected to Mongo server successfully!\n[10:52:31] INFO (payload): Starting Payload...\n/Users/jake/Development/personal/elkli-and-hart/payload.config.ts:1\nimport path from 'path';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\"><pre class=\"notranslate\">❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\n[10:52:31] INFO (payload): Connected to Mongo server successfully<span class=\"pl-k\">!</span>\n[10:52:31] INFO (payload): Starting Payload...\n/Users/jake/Development/personal/elkli-and-hart/payload.config.ts:1\nimport path from <span class=\"pl-s\"><span class=\"pl-pds\">'</span>path<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">;</span>\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module</pre></div>\n<h3 dir=\"auto\">Type = modules</h3>\n<p dir=\"auto\">If I set <code class=\"notranslate\">\"type\": \"module\"</code> in <code class=\"notranslate\">package.json</code> I then get this error:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension &quot;.ts&quot; for /Users/jake/Development/personal/elkli-and-hart/scripts/payloadMigrateVersions.ts\"><pre class=\"notranslate\">❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.ts<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">for</span> /Users/jake/Development/personal/elkli-and-hart/scripts/payloadMigrateVersions.ts</pre></div>\n<p dir=\"auto\">... and another side effect of the <code class=\"notranslate\">type: modules</code> is dev breaks cos I use <code class=\"notranslate\">require</code> within <code class=\"notranslate\">dev.js</code> and <code class=\"notranslate\">server.js</code>.</p>\n<h3 dir=\"auto\"><code class=\"notranslate\">--esm</code></h3>\n<p dir=\"auto\">Running with the <code class=\"notranslate\">--esm</code> flag obviously doesn't work either:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node --esm -T scripts/payloadMigrateVersions.ts\nReferenceError: require is not defined in ES module scope, you can use import instead\"><pre class=\"notranslate\">❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node --esm -T scripts/payloadMigrateVersions.ts\nReferenceError: require is not defined <span class=\"pl-k\">in</span> ES module scope, you can use import instead</pre></div>\n<h3 dir=\"auto\"><code class=\"notranslate\">--swc</code></h3>\n<p dir=\"auto\">I have this already in my <code class=\"notranslate\">tsconfig.json</code></p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&quot;ts-node&quot;: {\n  &quot;swc&quot;: true\n}\"><pre class=\"notranslate\"><span class=\"pl-ent\">\"ts-node\"</span>: {\n  <span class=\"pl-ent\">\"swc\"</span>: <span class=\"pl-c1\">true</span>\n}</pre></div>\n<p dir=\"auto\">But trying to run with this flag just to be sure, still results in a fail (albeit slightly different):</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node --swc -T scripts/payloadMigrateVersions.ts\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension &quot;.ts&quot; for /Users/jake/Development/personal/elkli-and-hart/scripts/payloadMigrateVersions.ts\"><pre class=\"notranslate\">❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node --swc -T scripts/payloadMigrateVersions.ts\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.ts<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">for</span> /Users/jake/Development/personal/elkli-and-hart/scripts/payloadMigrateVersions.ts</pre></div>\n<h4 dir=\"auto\">My payload config is typescript.</h4>\n<p dir=\"auto\">Here it is for reference:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import path from 'path';\nimport dotenv from 'dotenv';\nimport { buildConfig } from 'payload/config';\nimport {\n  Category,\n  Collection,\n  Essay,\n  Media,\n  MediaPhotos,\n  Page,\n  Price,\n  Product,\n  ReusableContent,\n  Tag,\n  User,\n} from './collections';\nimport { SiteNavigation, Footer } from './globals';\n\ndotenv.config();\n\nexport default buildConfig({\n  serverURL: process.env.PAYLOAD_PUBLIC_SERVER_URL,\n  typescript: {\n    outputFile: path.resolve(__dirname, './generated-types.ts'),\n  },\n  // admin: {\n  //   user: 'admins',\n  // },\n  graphQL: {\n    disable: true,\n  },\n  collections: [\n    Product,\n    Essay,\n    Collection,\n    Page,\n    Media,\n    MediaPhotos,\n    ReusableContent,\n    Price,\n    Category,\n    Tag,\n    User,\n  ],\n  globals: [Footer, SiteNavigation],\n  debug: true,\n  // optional customization of routes\n  routes: {\n    api: '/payload',\n    // admin: '/admin',\n    // graphQL: '/graphql',\n    // graphQLPlayground: '/graphql-playground',\n  },\n});\n\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">path</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'path'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">dotenv</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'dotenv'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">buildConfig</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'payload/config'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">Category</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">Collection</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">Essay</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">Media</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">MediaPhotos</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">Page</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">Price</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">Product</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">ReusableContent</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">Tag</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-smi\">User</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'./collections'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">SiteNavigation</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">Footer</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'./globals'</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">dotenv</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">config</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-en\">buildConfig</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">serverURL</span>: <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PAYLOAD_PUBLIC_SERVER_URL</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">typescript</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">outputFile</span>: <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">__dirname</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'./generated-types.ts'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c\">// admin: {</span>\n  <span class=\"pl-c\">//   user: 'admins',</span>\n  <span class=\"pl-c\">// },</span>\n  <span class=\"pl-c1\">graphQL</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">disable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">collections</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-smi\">Product</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">Essay</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">Collection</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">Page</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">Media</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">MediaPhotos</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">ReusableContent</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">Price</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">Category</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">Tag</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-smi\">User</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">globals</span>: <span class=\"pl-kos\">[</span><span class=\"pl-smi\">Footer</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">SiteNavigation</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">debug</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c\">// optional customization of routes</span>\n  <span class=\"pl-c1\">routes</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">api</span>: <span class=\"pl-s\">'/payload'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c\">// admin: '/admin',</span>\n    <span class=\"pl-c\">// graphQL: '/graphql',</span>\n    <span class=\"pl-c\">// graphQLPlayground: '/graphql-playground',</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">This release feels rushed and I'm stuck with broken admin dashboard again. It was only a month ago that a payload update broke versions completely for me, and we had to work together to get that fixed. Why are we here again?</p>\n<p dir=\"auto\">Please can you provide me with a migration script that works?</p>",
        "createdAt": "2023-02-08T10:20:55Z",
        "replies": [
          {
            "author": {
              "name": "jakehopking",
              "avatar": "https://avatars.githubusercontent.com/u/3432643?u=0af30a37a531b00d8fbdf3e898fd111bab725928&v=4",
              "url": "https://github.com/jakehopking"
            },
            "body": "<p dir=\"auto\">For now commenting out this in the collections with versions allows the admin ui to display all items.</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  // versions: {\n  //   maxPerDoc: 5,\n  //   drafts: {\n  //     autosave: false,\n  //   },\n  // },\"><pre class=\"notranslate\">  <span class=\"pl-c\">// versions: {</span>\n  <span class=\"pl-c\">//   maxPerDoc: 5,</span>\n  <span class=\"pl-c\">//   drafts: {</span>\n  <span class=\"pl-c\">//     autosave: false,</span>\n  <span class=\"pl-c\">//   },</span>\n  <span class=\"pl-c\">// },</span></pre></div>\n<p dir=\"auto\">And dropping all <code class=\"notranslate\">_[collectionName]_versions</code> within mongodb, and then uncommenting that above code, the admin ui again doesn't show my records  #sigh</p>\n<hr>\n<p dir=\"auto\">I've restored my db and have left the commented out code in all collections which have versions enabled.</p>",
            "createdAt": "2023-02-08T10:30:02Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jakehopking/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jakehopking\">@jakehopking</a> I totally hear you. Honestly a big part of the changes in 1.6.0 were <em><strong>as a result</strong></em> of the versions issues we were experiencing prior. This update intends to once and for all dramatically simplify the underlying logic for versions and make it so they are significantly more bulletproof moving forward.</p>\n<p dir=\"auto\">I don't think that this update was rushed though. It's certainly unfortunate that it came with breaking changes / migrations necessary, but this is something that needed to happen either immediately, or at some point in the future. That said, we decided as a team to collectively rip off the bandaid and provide as much help as possible to move forward with the new and simplified versions logic. And we've tested / used the migration script ourselves while these changes were released as <code class=\"notranslate\">canary</code> on 5+ large production Payload instances.</p>\n<p dir=\"auto\">That all said, I am confident we can get this script to work for you. Here are some quick thoughts:</p>\n<ul dir=\"auto\">\n<li>We've tested with TS configs, and it's interesting that your TS config itself is causing the error, but the script is not. Maybe try converting your script to ES imports. There could be something with your ts-node or typescript version locally that sees a <code class=\"notranslate\">require()</code> call, and then treats all scripts as that moving forward (thus failing when it sees an <code class=\"notranslate\">import</code>.)</li>\n<li>You should not need to put <code class=\"notranslate\">type: module</code> in your package.json file</li>\n<li>You should try and compare / contrast your <code class=\"notranslate\">tsconfig.json</code> to one that is generated with <code class=\"notranslate\">create-payload-app</code>.</li>\n<li>What is your <code class=\"notranslate\">tsconfig</code> <code class=\"notranslate\">compilerOptions.target</code> set to?</li>\n</ul>\n<p dir=\"auto\">Here is a <code class=\"notranslate\">tsconfig</code> that works with the script:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;lib&quot;: [\n      &quot;dom&quot;,\n      &quot;dom.iterable&quot;,\n      &quot;esnext&quot;\n    ],\n    &quot;allowJs&quot;: true,\n    &quot;strict&quot;: false,\n    &quot;esModuleInterop&quot;: true,\n    &quot;skipLibCheck&quot;: true,\n    &quot;outDir&quot;: &quot;./dist&quot;,\n    &quot;rootDir&quot;: &quot;./src&quot;,\n    &quot;jsx&quot;: &quot;react&quot;,\n    &quot;paths&quot;: {\n      &quot;payload/generated-types&quot;: [\n        &quot;./src/payload-types.ts&quot;,\n      ],\n    }\n  },\n  &quot;include&quot;: [\n    &quot;src&quot;\n  ],\n  &quot;exclude&quot;: [\n    &quot;node_modules&quot;,\n    &quot;dist&quot;,\n    &quot;build&quot;,\n  ],\n  &quot;ts-node&quot;: {\n    &quot;transpileOnly&quot;: true,\n    &quot;swc&quot;: true,\n  }\n}\"><pre class=\"notranslate\">{\n  <span class=\"pl-ent\">\"compilerOptions\"</span>: {\n    <span class=\"pl-ent\">\"target\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>es5<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"lib\"</span>: [\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dom<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dom.iterable<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>esnext<span class=\"pl-pds\">\"</span></span>\n    ],\n    <span class=\"pl-ent\">\"allowJs\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"strict\"</span>: <span class=\"pl-c1\">false</span>,\n    <span class=\"pl-ent\">\"esModuleInterop\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"skipLibCheck\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"outDir\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./dist<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"rootDir\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./src<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"jsx\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>react<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"paths\"</span>: {\n      <span class=\"pl-ent\">\"payload/generated-types\"</span>: [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./src/payload-types.ts<span class=\"pl-pds\">\"</span></span>,\n      ],\n    }\n  },\n  <span class=\"pl-ent\">\"include\"</span>: [\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src<span class=\"pl-pds\">\"</span></span>\n  ],\n  <span class=\"pl-ent\">\"exclude\"</span>: [\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node_modules<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>build<span class=\"pl-pds\">\"</span></span>,\n  ],\n  <span class=\"pl-ent\">\"ts-node\"</span>: {\n    <span class=\"pl-ent\">\"transpileOnly\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"swc\"</span>: <span class=\"pl-c1\">true</span>,\n  }\n}</pre></div>\n<p dir=\"auto\">Note that <code class=\"notranslate\">esModuleInterop</code> is set to <code class=\"notranslate\">true</code>. Do you have that set to <code class=\"notranslate\">true</code> in your <code class=\"notranslate\">tsconfig</code>?</p>\n<p dir=\"auto\">Sorry about the hassle here! We will get through it!</p>",
            "createdAt": "2023-02-08T19:22:06Z"
          },
          {
            "author": {
              "name": "jakehopking",
              "avatar": "https://avatars.githubusercontent.com/u/3432643?u=0af30a37a531b00d8fbdf3e898fd111bab725928&v=4",
              "url": "https://github.com/jakehopking"
            },
            "body": "<p dir=\"auto\">Thanks <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> - I can now successfully run the script... however we're not home and dry yet (see from below image).</p>\n<blockquote>\n<p dir=\"auto\">As a note, whenever I run dev, NextJS updates the <code class=\"notranslate\">tsconfig</code> with the following additions:</p>\n</blockquote>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/3432643/217635160-ee4168ad-4b92-4e0c-8d1b-d8f29f73c584.png\"><img width=\"726\" alt=\"Screenshot 2023-02-08 at 19 42 14\" src=\"https://user-images.githubusercontent.com/3432643/217635160-ee4168ad-4b92-4e0c-8d1b-d8f29f73c584.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">And whenever you try to run the migration script after Next updates the config, we run into the issues I outlined in the OP. <g-emoji class=\"g-emoji\" alias=\"facepalm\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f926.png\">🤦</g-emoji></p>\n<h3 dir=\"auto\">Records still missing</h3>\n<p dir=\"auto\">Even though I have run the script and saw this:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\n[19:36:07] INFO (payload): Connected to Mongo server successfully!\n[19:36:07] INFO (payload): Starting Payload...\nDone!\"><pre class=\"notranslate\">❯ PAYLOAD_CONFIG_PATH=payload.config.ts npx ts-node -T scripts/payloadMigrateVersions.ts\n[19:36:07] INFO (payload): Connected to Mongo server successfully<span class=\"pl-k\">!</span>\n[19:36:07] INFO (payload): Starting Payload...\nDone<span class=\"pl-k\">!</span></pre></div>\n<p dir=\"auto\">I'm missing records from the admin ui (yes, I've uncommented my versions config in all the collections).</p>\n<p dir=\"auto\">There should be more than a single page for instance:</p>\n<p dir=\"auto\">Any ideas?</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/3432643/217635945-c2129ef7-d767-47bb-a762-529042c4d564.png\"><img width=\"891\" alt=\"Screenshot 2023-02-08 at 19 47 57\" src=\"https://user-images.githubusercontent.com/3432643/217635945-c2129ef7-d767-47bb-a762-529042c4d564.png\" style=\"max-width: 100%;\"></a></p>",
            "createdAt": "2023-02-08T19:49:24Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">OK getting somewhere. So you're using Next + Payload in a single repo and Next is adjusting your tsconfig for you—did you try to update the script itself to use <code class=\"notranslate\">import</code> instead of <code class=\"notranslate\">require</code>? Maybe if you do that, you wouldn't need to make any adjustments at all to your <code class=\"notranslate\">tsconfig</code>.</p>\n<p dir=\"auto\">Which <code class=\"notranslate\">tsconfig</code> update made this work for you, out of curiosity?</p>\n<p dir=\"auto\">Now, onto what we need to diagnose next.</p>\n<p dir=\"auto\">Basically, the changes that we've released in 1.6.0 make it so that when you run the <code class=\"notranslate\">find</code> operation with <code class=\"notranslate\">?draft=true</code>, we <em><strong>only query on the versions collection</strong></em> - and not the main collection. This is for performance, simplicity, database compatibility, etc.</p>\n<p dir=\"auto\">The script should go through your pages, and find any pages that <em><strong>do not have at least one corresponding version present.</strong></em> If there are no versions for a document in your main collection, then the script will create a version corresponding to the content of the document in your main collection.</p>\n<p dir=\"auto\">The output of the script tells me that it is not creating any versions for you. Note that you will need to re-enable drafts on your collections for the script to work. I know you commented out drafts temporarily, but the script only runs against collections that have drafts enabled.</p>\n<p dir=\"auto\">Basically, we need to figure out why the script is not creating corresponding versions. Working through the script contents should reveal the answer, but it might be due to the above. If not that, then something simlar.</p>\n<p dir=\"auto\">Do you have any versions in your _versions collection?</p>",
            "createdAt": "2023-02-08T20:12:06Z"
          },
          {
            "author": {
              "name": "jakehopking",
              "avatar": "https://avatars.githubusercontent.com/u/3432643?u=0af30a37a531b00d8fbdf3e898fd111bab725928&v=4",
              "url": "https://github.com/jakehopking"
            },
            "body": "<p dir=\"auto\">Thanks for the info James, and makes sense.</p>\n<p dir=\"auto\">I did indeed try to change the script to use <code class=\"notranslate\">import</code> rather than <code class=\"notranslate\">require</code> but it ultimately made no difference and generated other errors, which I didn't share cos then the variables had increased :)</p>\n<p dir=\"auto\">You are correct, I forgot to uncomment my versions config <strong>before</strong> running the script. With that done, we have a successful log of changes:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/3432643/217642407-30a99d83-19d0-4c5b-b617-c8a0a592fe37.png\"><img width=\"764\" alt=\"Screenshot 2023-02-08 at 20 15 56\" src=\"https://user-images.githubusercontent.com/3432643/217642407-30a99d83-19d0-4c5b-b617-c8a0a592fe37.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Thanks for your help <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>\n<p dir=\"auto\">P.S. This config worked for the migration (essentially the one you shared), although not so much for Next :/</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;lib&quot;: [\n      &quot;dom&quot;,\n      &quot;dom.iterable&quot;,\n      &quot;esnext&quot;\n    ],\n    &quot;allowJs&quot;: true,\n    &quot;strict&quot;: false,\n    &quot;esModuleInterop&quot;: true,\n    &quot;skipLibCheck&quot;: true,\n    &quot;outDir&quot;: &quot;./dist&quot;,\n    &quot;rootDir&quot;: &quot;./&quot;,\n    &quot;jsx&quot;: &quot;react&quot;,\n  },\n  &quot;include&quot;: [\n    &quot;src&quot;\n  ],\n  &quot;exclude&quot;: [\n    &quot;node_modules&quot;,\n    &quot;dist&quot;,\n    &quot;build&quot;,\n  ],\n  &quot;ts-node&quot;: {\n    &quot;transpileOnly&quot;: true,\n    &quot;swc&quot;: true,\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-s\">\"compilerOptions\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"target\"</span>: <span class=\"pl-s\">\"es5\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"lib\"</span>: <span class=\"pl-kos\">[</span>\n      <span class=\"pl-s\">\"dom\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"dom.iterable\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"esnext\"</span>\n    <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"allowJs\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"strict\"</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"esModuleInterop\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"skipLibCheck\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"outDir\"</span>: <span class=\"pl-s\">\"./dist\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"rootDir\"</span>: <span class=\"pl-s\">\"./\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"jsx\"</span>: <span class=\"pl-s\">\"react\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">\"include\"</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-s\">\"src\"</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">\"exclude\"</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-s\">\"node_modules\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"dist\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"build\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">\"ts-node\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"transpileOnly\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"swc\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>",
            "createdAt": "2023-02-08T20:23:42Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"fire\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f525.png\">🔥</g-emoji> thank you for hanging in there!</p>\n<p dir=\"auto\">I think versions are going to be much more reliable moving forward. I've been totally expecting people to have trouble and have been sad that we've had to introduce a breaking change, but I do think that in the end it will be very worth it. Thanks again.</p>",
            "createdAt": "2023-02-08T20:26:34Z"
          },
          {
            "author": {
              "name": "JarrodMFlesch",
              "avatar": "https://avatars.githubusercontent.com/u/30633324?u=13d4ca1d1d86b5ce4a1ff5eef12b3016b20b2283&v=4",
              "url": "https://github.com/JarrodMFlesch"
            },
            "body": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"rotating_light\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png\">🚨</g-emoji> <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jakehopking/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jakehopking\">@jakehopking</a> please update to v1.6.9 when you can. There was a bug with versions that surfaced in the 1.6.0 release because we started setting the <code class=\"notranslate\">max</code> versions to 100 by default. This was a bug all along but since max was not being set by default, the bug would have only occurred if a custom max value was set on a versioned collection.</p>\n<p dir=\"auto\">More info here: <a aria-label=\"Pull request #2058\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1580009944\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/2058\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/2058/hovercard\" href=\"https://github.com/payloadcms/payload/pull/2058\">#2058</a></p>",
            "createdAt": "2023-02-10T18:48:10Z"
          }
        ]
      },
      {
        "author": {
          "name": "unonweb",
          "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
          "url": "https://github.com/unonweb"
        },
        "body": "<p dir=\"auto\">If anyone else is running in trouble with version 1.6 because of a javascript installation:<br>\n<em>Just choose the typescript installation</em> (<code class=\"notranslate\">npx create-payload-app</code>, then choose \"typescript\").</p>\n<p dir=\"auto\">After updating to 1.6 my Payload broke as predicted due to <a href=\"https://github.com/payloadcms/payload/pull/1847\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1847/hovercard\">this</a>.<br>\nI followed the instructions behind that link without success (\"typescript\" module was missing although I had installed ts-node).<br>\nThen I tried a new installation with <code class=\"notranslate\">npx create-payload-app</code> choosing javascript. Not working.<br>\nBut when I chose Typescript everything was working again (and I can still go on writing js).</p>",
        "createdAt": "2023-02-14T21:45:29Z",
        "replies": [
          {
            "author": {
              "name": "denolfe",
              "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
              "url": "https://github.com/denolfe"
            },
            "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/unonweb/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/unonweb\">@unonweb</a> , in the latest <code class=\"notranslate\">create-payload-app</code> we decided to drop all of the JS templates. It looks like you may have a cached version. That being said, you absolutely can still use JavaScript. Can you provide more detail on what specifically isn't working after following those instructions?</p>",
            "createdAt": "2023-02-15T20:37:46Z"
          },
          {
            "author": {
              "name": "unonweb",
              "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
              "url": "https://github.com/unonweb"
            },
            "body": "<p dir=\"auto\">Sorry, in the end this was my error:</p>\n<blockquote>\n<p dir=\"auto\">\"typescript\" module was missing although I had installed ts-node</p>\n</blockquote>\n<p dir=\"auto\"><code class=\"notranslate\">npm i typescript</code> in addition to <code class=\"notranslate\">npm i ts-node</code> resolved it.</p>",
            "createdAt": "2023-02-15T23:38:08Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "JWT After user email change",
    "body": "<p dir=\"auto\">I have a situation where I want users to be able to change their emails. But after this is done, if I understand correctly their original JWT token is no longer valid, so everything after that throws a forbidden error. Is their any way to change the user email and get a new token without signing in again, without asking their passwords or store them locally?</p>\n<p dir=\"auto\">Im sorry if this is a more system oriented question rather than payload. Thanks in advanced : )</p>",
    "url": "https://github.com/payloadcms/payload/discussions/831",
    "id": "831",
    "createdAt": "2022-07-26T23:34:02Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "gonzam88",
      "avatar": "https://avatars.githubusercontent.com/u/6289953?u=964dbaf32492efedc92230ee51de16ffac6a9684&v=4",
      "url": "https://github.com/gonzam88"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gonzam88/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gonzam88\">@gonzam88</a> — yes, your understanding is correct. A workaround for this should probably be worked into the core I think. I have categorized this as Feature Request, and marked it as planned, but I'm not sure when we can get to this. However, we would happily<br>\naccept a PR!</p>\n<p dir=\"auto\">The right way to fix this would be in the <code class=\"notranslate\">update</code> operation, we should have a function that runs before <code class=\"notranslate\">afterChange</code> hooks, and performs the following steps:</p>\n<ol dir=\"auto\">\n<li>Check to see if collection being updated supports auth</li>\n<li>Check to see if incoming email data is different from the original doc's data</li>\n<li>If emails are different, and user is logged in, and the logged in user's email is the same as the original doc's email, we should recreate a token with the new email and set a new cookie with the new token (therefore overriding the old outdated token, and keeping the user logged in).</li>\n</ol>\n<p dir=\"auto\">This code should all be encapsulated in a single function and called from the <code class=\"notranslate\">update</code> collection operation.</p>\n<p dir=\"auto\">Note that in the interim, you could also do this with an <code class=\"notranslate\">afterChange</code> hook. You could look at our <a href=\"https://github.com/payloadcms/payload/blob/master/src/auth/operations/refresh.ts\"><code class=\"notranslate\">refresh</code></a> operation, which has most / all of the code you would need to do to take in an existing token, decode it, update the email, re-encode it, and then set a new cookie with the token.</p>\n<p dir=\"auto\">Good question!</p>",
        "createdAt": "2022-07-27T14:34:05Z",
        "replies": [
          {
            "author": {
              "name": "thgh",
              "avatar": "https://avatars.githubusercontent.com/u/1109982?u=6cd0299e82d500b4ba200c5ebd1d3134896cb307&v=4",
              "url": "https://github.com/thgh"
            },
            "body": "<p dir=\"auto\">If a user makes any request and the<code class=\"notranslate\">updatedAt</code> of the user object is later than the <code class=\"notranslate\">iat</code> of the JWT -&gt; it should refresh the token. Otherwise the parameters from <code class=\"notranslate\">saveToJWT</code> may have changed and there is a mismatch between server &amp; client <code class=\"notranslate\">access()</code> checks.</p>\n<p dir=\"auto\">Assigning a role to someone and than having to tell them to sign out and back in again. It feels buggy.</p>\n<p dir=\"auto\"><a href=\"https://github.com/payloadcms/payload/blob/3c3e1f17efb9f1b73fd18419736d32e503b2abd1/src/auth/operations/refresh.ts#L60-L63\">These lines in refresh()</a> have quite some security implications. As an attacker, I can refresh indefinitely and once I have been assigned a role, I can keep it forever. The industry standard is to have an access token and a refresh token where the access token is valid for a short time (seconds to minutes). That token should only be derived from the database (source of truth), not from a previous JWT.</p>",
            "createdAt": "2023-02-15T11:27:19Z"
          }
        ]
      },
      {
        "author": {
          "name": "wojciechkrol",
          "avatar": "https://avatars.githubusercontent.com/u/14108143?u=a50f83a499fdf37dbee3b4686403648ee4507a1a&v=4",
          "url": "https://github.com/wojciechkrol"
        },
        "body": "<p dir=\"auto\">Doesn’t this commit resolve the issue of changing the email address of logged user? Right now only token.id is considered.</p>\n<p dir=\"auto\"><a href=\"https://github.com/payloadcms/payload/pull/789/files\">https://github.com/payloadcms/payload/pull/789/files</a></p>",
        "createdAt": "2022-07-27T14:56:49Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Ummm, you are awesome.</p>\n<p dir=\"auto\">Yes, for some reason my mind was blanking and I thought that recent PR actually had the <em><strong>opposite</strong></em> effect, but you are 100% right.</p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gonzam88/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gonzam88\">@gonzam88</a> — this should now work with nothing necessary at all. Users should be able to stay logged in.</p>\n<p dir=\"auto\">Phew. I need more coffee!</p>",
            "createdAt": "2022-07-27T15:10:09Z"
          },
          {
            "author": {
              "name": "gonzam88",
              "avatar": "https://avatars.githubusercontent.com/u/6289953?u=964dbaf32492efedc92230ee51de16ffac6a9684&v=4",
              "url": "https://github.com/gonzam88"
            },
            "body": "<p dir=\"auto\">Thanks <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> &amp; <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/wojciechkrol/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wojciechkrol\">@wojciechkrol</a> for the info, very clear. Based from this comment I assume from now on JWT token will not change if the email is changed. Is that right and safe to assume is just a matter of updating to v1.0.9? Thanks!</p>",
            "createdAt": "2022-07-27T16:16:50Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Yep. Update and give it a shot!</p>",
            "createdAt": "2022-07-27T20:25:12Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Support chatGPT for editors?",
    "body": "<p dir=\"auto\"><a href=\"https://www.youtube.com/watch?v=59hsPSrYvmk\" rel=\"nofollow\">https://www.youtube.com/watch?v=59hsPSrYvmk</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2099",
    "id": "2099",
    "createdAt": "2023-02-15T10:03:38Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "What casing do you use for your collection names?",
    "body": "<p dir=\"auto\">I wonder how to name collections that consist of multiple words, e.g. \"blog posts\". Here's a relevant <a href=\"https://stackoverflow.com/q/5916080/3130281\" rel=\"nofollow\">question on Stack Overflow about naming conventions for MongoDB collections</a>.</p>\n<p dir=\"auto\">I can see that Payload appears to use underscores internally, judging by the system generated <code class=\"notranslate\">_*_versions</code> collection, where <code class=\"notranslate\">*</code> is the slug of your collection.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2074",
    "id": "2074",
    "createdAt": "2023-02-13T12:36:13Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "hdodov",
      "avatar": "https://avatars.githubusercontent.com/u/5570098?u=99fa010aba0ab1241292d2c35ba4c5c30699291b&v=4",
      "url": "https://github.com/hdodov"
    },
    "comments": [
      {
        "author": {
          "name": "hdodov",
          "avatar": "https://avatars.githubusercontent.com/u/5570098?u=99fa010aba0ab1241292d2c35ba4c5c30699291b&v=4",
          "url": "https://github.com/hdodov"
        },
        "body": "<p dir=\"auto\">I think I like kebab-case the most, because URLs make more sense:</p>\n<ul dir=\"auto\">\n<li><a href=\"http://localhost:3000/admin/collections/blog_posts\" rel=\"nofollow\">http://localhost:3000/admin/collections/blog_posts</a> is kind of odd</li>\n<li><a href=\"http://localhost:3000/admin/collections/blog-posts\" rel=\"nofollow\">http://localhost:3000/admin/collections/blog-posts</a> looks great</li>\n</ul>\n<p dir=\"auto\">It also establishes a visual hierarchy with Payload collections. For example, in <code class=\"notranslate\">_blog-posts_versions</code> the dash indicates that \"posts\" is just part of the collection name, while the underscore indicates that \"versions\" is kind of a property of the collection, like how you would use a dot in JavaScript to do the same thing, i.e. <code class=\"notranslate\">blogPosts.versions</code>. On the other hand, <code class=\"notranslate\">_blog_posts_versions</code> establishes no such hierarchy.</p>",
        "createdAt": "2023-02-13T12:51:17Z",
        "replies": [
          {
            "author": {
              "name": "thgh",
              "avatar": "https://avatars.githubusercontent.com/u/1109982?u=6cd0299e82d500b4ba200c5ebd1d3134896cb307&v=4",
              "url": "https://github.com/thgh"
            },
            "body": "<p dir=\"auto\">I would say camel &gt; snake &gt; kebab.<br>\nCamelcase because it's idiomatic in JS. And snakecase over kebab because having <code class=\"notranslate\">collections['blog-posts']</code> is less awesome than <code class=\"notranslate\">collections.blog_posts</code>. When double clicking to select a keyword, the OS handles underscore as part of the word while the dash will split it up. Also, underscore looks more like a space than a dash. To finish it off, wikipedia uses _ in URLs!</p>",
            "createdAt": "2023-02-14T20:52:01Z"
          },
          {
            "author": {
              "name": "hdodov",
              "avatar": "https://avatars.githubusercontent.com/u/5570098?u=99fa010aba0ab1241292d2c35ba4c5c30699291b&v=4",
              "url": "https://github.com/hdodov"
            },
            "body": "<p dir=\"auto\">Hm, valid points! However, now that I've looked at it, <a href=\"https://github.com/payloadcms/website-cms/blob/2e4f20b29317c849e41488e94fcc6608488f1630/src/collections/CaseStudies.ts#L26\">the official Payload site uses kebab</a>. I wonder if they've deliberately chosen that.</p>",
            "createdAt": "2023-02-15T06:08:30Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Better typing",
    "body": "<p dir=\"auto\">Payload has recently improved its typing considerably, and that made me choose payload for a bigger project I have. Really great work on that one!</p>\n<p dir=\"auto\">I do think there is still room for improvement though.<br>\nRight now, things like the access handler are very generically typed with <code class=\"notranslate\">CollectionConfig</code>. Hence no information about the actual collection is in the type. That leads to things like <code class=\"notranslate\">access</code> not being typed correctly.</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  slug: &quot;users&quot;,\n  access: {\n    // `data` is `any`\n    read: ( data }) =&gt; {/* code */},\n  },\n  fields: [],\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">\"users\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">access</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// `data` is `any`</span>\n    <span class=\"pl-c1\">read</span>: <span class=\"pl-kos\">(</span> <span class=\"pl-s1\">data</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span><span class=\"pl-c\">/* code */</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s1\">fields</span>: <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">I am not very familiar with the payload internals, but it should be possible to type <code class=\"notranslate\">CollectionConfig</code> with generics, so that <code class=\"notranslate\">data</code> in the example above is inferred.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2093",
    "id": "2093",
    "createdAt": "2023-02-14T17:51:57Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "MoSattler",
      "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
      "url": "https://github.com/MoSattler"
    },
    "comments": [
      {
        "author": {
          "name": "MoSattler",
          "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
          "url": "https://github.com/MoSattler"
        },
        "body": "<p dir=\"auto\">Related to this <a aria-label=\"Issue #2094\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1584715506\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/2094\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/2094/hovercard\" href=\"https://github.com/payloadcms/payload/issues/2094\">#2094</a></p>",
        "createdAt": "2023-02-14T19:33:00Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Expose more types",
    "body": "<p dir=\"auto\"><a aria-label=\"Pull request #2061\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1580202721\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/2061\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/2061/hovercard\" href=\"https://github.com/payloadcms/payload/pull/2061\">#2061</a> was already super helpful, thank you for that!</p>\n<p dir=\"auto\">However, I think that if more types were exported, it would be even more useful.</p>\n<p dir=\"auto\">To give you an example, typing access:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import type { Access } from &quot;payload/config&quot;;\n\nconst isAdminOrCreatedBy: Access = ({ req: { user } }) =&gt; {/* code */}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-k\">type</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">Access</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/config\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">isAdminOrCreatedBy</span>: <span class=\"pl-smi\">Access</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">req</span>: <span class=\"pl-kos\">{</span> user <span class=\"pl-kos\">}</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span><span class=\"pl-c\">/* code */</span><span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">is not great, since it does a lot of guessing. E.g. <code class=\"notranslate\">user</code> is <code class=\"notranslate\">any</code>.</p>\n<p dir=\"auto\">What I would love to be able to do, is this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import type { AccessArgs } from &quot;payload/config&quot;;\nimport type { User } from &quot;payload/generated-types&quot;;\n\nconst isAdminOrCreatedBy = &lt;T&gt;({ req: { user } }: AccessArgs&lt;T, User&gt;) =&gt; {/* code */}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-k\">type</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">AccessArgs</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/config\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">type</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">User</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/generated-types\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">isAdminOrCreatedBy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">req</span>: <span class=\"pl-kos\">{</span> user <span class=\"pl-kos\">}</span> <span class=\"pl-kos\">}</span>: <span class=\"pl-smi\">AccessArgs</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">User</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span><span class=\"pl-c\">/* code */</span><span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">here I profit from the generic typing for <code class=\"notranslate\">data</code> and have already a clearly defined <code class=\"notranslate\">user</code>.</p>\n<p dir=\"auto\">The type <code class=\"notranslate\">AccessArgs</code> already exists, and only needs to be exported to the consumer.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2090",
    "id": "2090",
    "createdAt": "2023-02-14T16:42:54Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "MoSattler",
      "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
      "url": "https://github.com/MoSattler"
    },
    "comments": [
      {
        "author": {
          "name": "MoSattler",
          "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
          "url": "https://github.com/MoSattler"
        },
        "body": "<p dir=\"auto\">Another scenario is when defining access methods inline.</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n    access: {\n      read: ({ req: { user }, data }: AccessArgs&lt;MyCollection, User&gt;) =&gt; {\n        /* code */\n      },\n  },\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">access</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">read</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">req</span>: <span class=\"pl-kos\">{</span> user <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> data <span class=\"pl-kos\">}</span>: <span class=\"pl-smi\">AccessArgs</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">MyCollection</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">User</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">/* code */</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">without <code class=\"notranslate\">AccessArgs</code> I cannot easily type the function args.</p>",
        "createdAt": "2023-02-14T17:45:47Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Is it possible to tell a afterChange collection hook is triggered by save draft, publish, or unpublish in ?",
    "body": "<p dir=\"auto\">We want to call webhooks to invalidate our site pages, but found it hard to tell <code class=\"notranslate\">save draft</code> apart from the other two.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1480",
    "id": "1480",
    "createdAt": "2022-11-22T09:05:58Z",
    "upvotes": 2,
    "commentTotal": 2,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Stupidism/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Stupidism\">@Stupidism</a> in your <code class=\"notranslate\">afterChange</code> hook, you should be able to read the <code class=\"notranslate\">_status</code> of the document to determine whether its published or draft.</p>",
        "createdAt": "2022-11-22T13:43:48Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">One other note is that we could easily expose the <code class=\"notranslate\">draft</code> argument to all collection hooks. We will mark this as <code class=\"notranslate\">planned</code>.</p>",
            "createdAt": "2022-11-22T17:39:51Z"
          }
        ]
      },
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">Related: <a aria-label=\"Discussion #1996\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4814786\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1996\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1996/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1996\">#1996</a></p>",
        "createdAt": "2023-02-14T15:53:49Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Drag & drop column reordering in admin UI",
    "body": "<p dir=\"auto\">On a collection listing page when adding columns to the table the newly added column is added to the left of the table.</p>\n<p dir=\"auto\">This makes for poor UX in LTR-based locales because it means you then have to remove all columns and re-add them all in the reverse order to that which you want them displayed.</p>\n<p dir=\"auto\"><code class=\"notranslate\">defaultColumns</code> only partially solves this (as it means editors are less likely to need to change the displayed columns).</p>\n<p dir=\"auto\">It would be great if you could have an option to reorder columns, either by a simple drag/drop or by toggling a reorder mode and using arrows or something.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2075",
    "id": "2075",
    "createdAt": "2023-02-13T14:00:26Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "hades200082",
      "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
      "url": "https://github.com/hades200082"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hades200082/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hades200082\">@hades200082</a> check out this PR! <a aria-label=\"Pull request #1865\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1531273064\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1865\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1865/hovercard\" href=\"https://github.com/payloadcms/payload/pull/1865\">#1865</a></p>",
        "createdAt": "2023-02-13T14:02:15Z",
        "replies": [
          {
            "author": {
              "name": "hades200082",
              "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
              "url": "https://github.com/hades200082"
            },
            "body": "<p dir=\"auto\">Seen. When will that make it into a release?</p>",
            "createdAt": "2023-02-14T07:33:45Z"
          },
          {
            "author": {
              "name": "jacobsfletch",
              "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
              "url": "https://github.com/jacobsfletch"
            },
            "body": "<p dir=\"auto\">It's in the final stages of testing and should be out this week.</p>",
            "createdAt": "2023-02-14T14:14:44Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Ability to restrict image sizes for a single upload field",
    "body": "<p dir=\"auto\">I have seen other CMS tools with functionality that allow you to restrict images being uploaded to be a certain size.<br>\nE.g. this could be for a home page slider where the image needs to be 1500x1000 pixels.</p>\n<p dir=\"auto\">I understand payload allows any image sizes to be uploaded and they are auto-resized based on the Media component. What would happen however if an image was uploaded smaller than 1500x1000 pixels? Would it be upscaled to that size?</p>\n<p dir=\"auto\">Ideally, I would like the functionality to be able to specify the upload size on the upload component itself. Example below.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  name: &quot;backgroundImage&quot;,\n  type: &quot;upload&quot;,\n  relationTo: &quot;media&quot;,\n  required: true,\n  width: 1500 &lt;-------new Line\n  height: 1000 &lt;-------new Line\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n  name: \"backgroundImage\",\n  type: \"upload\",\n  relationTo: \"media\",\n  required: true,\n  width: 1500 &lt;-------new Line\n  height: 1000 &lt;-------new Line\n}\n</code></pre></div>\n<p dir=\"auto\">If an image was uploaded that did not meet that height and width, it would fail and show the user an error message.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2083",
    "id": "2083",
    "createdAt": "2023-02-13T20:39:39Z",
    "upvotes": 4,
    "commentTotal": 1,
    "author": {
      "name": "MattL-NZ",
      "avatar": "https://avatars.githubusercontent.com/u/2846782?u=4e448b60da5eab442e07f840d046a2247cd86304&v=4",
      "url": "https://github.com/MattL-NZ"
    },
    "comments": [
      {
        "author": {
          "name": "hades200082",
          "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
          "url": "https://github.com/hades200082"
        },
        "body": "<p dir=\"auto\">I'd like to add to this suggestion also the ability to specify mime types also.</p>",
        "createdAt": "2023-02-14T07:32:42Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Ability to sort on multiple fields in REST API",
    "body": "<p dir=\"auto\">Ability to sort by one field, then another, etc. when using the REST API.</p>\n<p dir=\"auto\">In SQL terms I'm looking for the equivalent of <code class=\"notranslate\">SORT BY FieldA DESC, FieldB ASC</code></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2089",
    "id": "2089",
    "createdAt": "2023-02-14T07:29:41Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "hades200082",
      "avatar": "https://avatars.githubusercontent.com/u/1023581?v=4",
      "url": "https://github.com/hades200082"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "RealTime socket Updates",
    "body": "<p dir=\"auto\">I would ask about your ideas about updating frontend, whenever in DB will be changed in one collection. Probably the best apporach is to use socket + mongo as broadcasting service. But I was thinking, if API and Admin is handled by express, maybe I can use enviroment to make things work?</p>\n<p dir=\"auto\">Anyone was doing real-time updates for front, when changes are done in Admin UI or API directly?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2087",
    "id": "2087",
    "createdAt": "2023-02-14T00:34:10Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "dawidmachon",
      "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
      "url": "https://github.com/dawidmachon"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Validation on array field",
    "body": "<p dir=\"auto\">Hi,<br>\nimagine an array field, which keeps different users.</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n      name: &quot;players&quot;,\n      label: &quot;Players&quot;,\n      type: &quot;array&quot;,\n      fields: [\n        {\n          name: &quot;user&quot;,\n          label: &quot;User&quot;,\n          type: &quot;relationship&quot;,\n          relationTo: &quot;users&quot;,\n          hasMany: false,\n          required: true,\n        },\n      validate: ()=&gt;{}\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"players\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">label</span>: <span class=\"pl-s\">\"Players\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"array\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n        <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"user\"</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">label</span>: <span class=\"pl-s\">\"User\"</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"relationship\"</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">relationTo</span>: <span class=\"pl-s\">\"users\"</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">hasMany</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-en\">validate</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\"></span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">How would you write or just give an idea about: Checking if user already is in array?<br>\nProblem -&gt; when you are creating document with array field, then all entries are there at once, without _id's, so what only comes to my mind is going each by each and compare against all - but this is super slow and not performant.</p>\n<p dir=\"auto\">Maybe someone has better approach to such topic. <strong>How validate on array fields to enforce unique entries inside?</strong></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2065",
    "id": "2065",
    "createdAt": "2023-02-10T23:14:35Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "dawidmachon",
      "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
      "url": "https://github.com/dawidmachon"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">Have you looked at using the <code class=\"notranslate\">filterOptions</code> on your relationship field?</p>\n<p dir=\"auto\">You can use it to limit the options available in the UI and it also enforces this in your API in the built-in validation of the relationship field. This way you won't have a <code class=\"notranslate\">validate</code> function at all.</p>\n<p dir=\"auto\">Your <code class=\"notranslate\">filterOptions</code> will be a function that uses the incoming data and returns <code class=\"notranslate\">{ not_in: userIDs }</code> where userIDs is an array of user IDs excluding the assigned value on the field (which you also get as an argument).</p>\n<p dir=\"auto\">Let me know if that helps!</p>",
        "createdAt": "2023-02-13T17:05:21Z",
        "replies": [
          {
            "author": {
              "name": "dawidmachon",
              "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
              "url": "https://github.com/dawidmachon"
            },
            "body": "<p dir=\"auto\">Thanks for good tip. It is much better approach I think.<br>\nBut it is not solving my issue still. Because in <code class=\"notranslate\">filterOptions</code> you mentioned: \"I will get access to the value of field which is currently 'in use'.\" But that's not true from my perspective.</p>\n<p dir=\"auto\">There are only these options:</p>\n\n\n\n<table role=\"table\">\n<thead>\n<tr>\n<th>key</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>relationTo</td>\n<td>The relationTo to filter against (as defined on the field)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>An object of the full collection or global document currently being edited</td>\n</tr>\n<tr>\n<td>siblingData</td>\n<td>An object of the document data limited to fields within the same parent to the field</td>\n</tr>\n<tr>\n<td>id</td>\n<td>The value of the collection id, will be undefined on create request</td>\n</tr>\n<tr>\n<td>user</td>\n<td>The currently authenticated user object</td>\n</tr>\n</tbody>\n</table>\n\n\n\n<p dir=\"auto\">So when I'm posting create document from API only on validate function, I got access to current value on field. Or am I missing something?</p>\n<p dir=\"auto\">On top of that - on validate function, I also have issues. Because <code class=\"notranslate\">data</code> always has all fields in array, besides for which iteration value we are currently validating. (which is okay, I suppose). But sibling data contains only 'recent' iteration. So, the only way which right now I'm thinking is checking iv current value exists in <code class=\"notranslate\">data</code> more than once.</p>",
            "createdAt": "2023-02-13T23:14:28Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "prefill field form with default locale content when adding translation",
    "body": "<p dir=\"auto\">Would it be possible to prefill a translatable field with the saved content of the default language? For example:</p>\n<ul dir=\"auto\">\n<li>Create item in default language</li>\n<li>Switch language to fill translatable fields</li>\n<li>Text field will be filled with the content from the default language which is already saved</li>\n<li>Translate the content, hit save, done!</li>\n</ul>\n<p dir=\"auto\">An option would be to use the defaultValue field option and load the content there, but at the moment only locale and user are populated there. Does somebody has a suggestion on how to handle this without custom frontend components? Handling this on a global scope would be even better.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2054",
    "id": "2054",
    "createdAt": "2023-02-10T14:09:08Z",
    "upvotes": 2,
    "commentTotal": 2,
    "author": {
      "name": "mvdve",
      "avatar": "https://avatars.githubusercontent.com/u/10288383?v=4",
      "url": "https://github.com/mvdve"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">Is this different in some way from the the <code class=\"notranslate\">fallback</code> localization option?</p>\n<p dir=\"auto\">I am not sure I follow what you're proposing, if this is different from fallback I'll need you to maybe elaborate more.</p>\n<p dir=\"auto\">edit - link to docs <a href=\"https://payloadcms.com/docs/configuration/localization#enabling-in-the-payload-config\" rel=\"nofollow\">https://payloadcms.com/docs/configuration/localization#enabling-in-the-payload-config</a></p>",
        "createdAt": "2023-02-13T17:38:55Z",
        "replies": null
      },
      {
        "author": {
          "name": "mvdve",
          "avatar": "https://avatars.githubusercontent.com/u/10288383?v=4",
          "url": "https://github.com/mvdve"
        },
        "body": "<p dir=\"auto\">Hi Dan,</p>\n<p dir=\"auto\">Sorry about that, i'l try to better explain my use case. Admins who translate content within the GUI face an empty form after they switch language after creating a new item via de admin GUI, only the id placeholder for the title is shown.</p>\n<p dir=\"auto\">So the workflow would be:</p>\n<ol dir=\"auto\">\n<li>Set admin GUI in default language (NL)</li>\n<li>Select a collection</li>\n<li>Fill in the form fields</li>\n<li>Click save</li>\n<li>Switch language (EN) to add translation</li>\n<li>Fill in the form fields</li>\n<li>Click save to save translation</li>\n</ol>\n<p dir=\"auto\">The question is regarding step 6: Would it be possible to set a default value for the text based form fields, where this default value is de data from the default language. So instead of starting with an empty form, for example the title and a description (EN) will be filled with the title and description from the default language (NL) which makes is easier to translate as you can translate the content directly in the field.</p>\n<p dir=\"auto\">One way to solve this would be to add for example the item data to the defaultValue function arguments, like the validation functionality.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Non working examples\ndefaultValue: ({ data }) =&gt; data.nl.title\n\n// Or\ndefaultValue: ({ id }) =&gt; fetchDataById(id, &quot;nl&quot;).title\"><pre class=\"notranslate\"><code class=\"notranslate\">// Non working examples\ndefaultValue: ({ data }) =&gt; data.nl.title\n\n// Or\ndefaultValue: ({ id }) =&gt; fetchDataById(id, \"nl\").title\n</code></pre></div>\n<p dir=\"auto\">Working with the defaultValue setting is a good option but would be repetitive as it is the same system for all fields. So a field settings could also be an option, something like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  name: 'title',\n  type: 'text',\n  localized: {\n    inputFallback: true\n  },\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n  name: 'title',\n  type: 'text',\n  localized: {\n    inputFallback: true\n  },\n}\n</code></pre></div>",
        "createdAt": "2023-02-13T18:48:37Z",
        "replies": [
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">Oh, yeah great explanation!</p>\n<blockquote>\n<p dir=\"auto\">defaultValue: ({ data }) =&gt; data.nl.title</p>\n</blockquote>\n<p dir=\"auto\">Yeah that isn't going to work since the UI doesn't fetch the data with <code class=\"notranslate\">?locale=all</code>, so you wouldn't have the object structure for locales that you're after.</p>\n<p dir=\"auto\">I like the idea of an option, but there are some larger implications to work through. We currently opt to put the <code class=\"notranslate\">fallback</code> as a feature handled by the API that is intentionally obfuscated from the admin UI. One reason for this is that when an editor is working on different languages there would need to be a way to discern and set the value as that of the default locale value or the intended value.</p>\n<p dir=\"auto\">For example if I leave a localized field blank and save a document, the fallback allows the data to still come through in the other locale on the API. If the field went from <code class=\"notranslate\">undefined</code> to \"The default locale's content\" then somebody might assume by updating the default locale that it would update the langauges coming from through as fallback when instead, under your workflow, that would not be the case.</p>\n<p dir=\"auto\">One workaround could be to make a custom component for \"Copy from locale\" that you put in a UI field into your collections that when clicked (as a button) or selected as a Select, fetches the locale data and sets the form data accordingly. This could be a nice enhancement for editors and in my mind would be more preferred over defaultValue because of the intentionality issue above.</p>\n<p dir=\"auto\">I do think we need to address some of the UX issues around editing multiple locales, as others have pointed out some other shortcomings.</p>\n<p dir=\"auto\"><a aria-label=\"Discussion #1492\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4591185\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1492\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1492/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1492\">#1492</a><br>\n<a aria-label=\"Discussion #1308\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4513663\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1308\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1308/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1308\">#1308</a></p>",
            "createdAt": "2023-02-13T19:46:28Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Bulk operations",
    "body": "<p dir=\"auto\">We need to create bulk create / update / delete operations and extend admin UI to support bulk actions.</p>\n<p dir=\"auto\">Relevant issues:</p>\n<ul dir=\"auto\">\n<li><a aria-label=\"Issue #1365\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1443863824\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1365\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/1365/hovercard\" href=\"https://github.com/payloadcms/payload/issues/1365\">#1365</a></li>\n</ul>\n<p dir=\"auto\">Marked as <code class=\"notranslate\">planned</code>.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1382",
    "id": "1382",
    "createdAt": "2022-11-12T18:28:36Z",
    "upvotes": 19,
    "commentTotal": 5,
    "author": {
      "name": "jmikrut",
      "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
      "url": "https://github.com/jmikrut"
    },
    "comments": [
      {
        "author": {
          "name": "manuelebagnolini",
          "avatar": "https://avatars.githubusercontent.com/u/45173102?u=f1cbfd1d3007fe316c3f41dd9e1491fc026e7977&v=4",
          "url": "https://github.com/manuelebagnolini"
        },
        "body": "<p dir=\"auto\">I think that the bulk operations should be extended to the localizations in order to allow the massive insertion/updating of all the languages ​​of the document in a single request.</p>",
        "createdAt": "2022-11-17T08:24:58Z",
        "replies": null
      },
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Update here - this is very important and is high priority on our roadmap.</p>\n<p dir=\"auto\">Work involved will be broken down into the following areas:</p>\n<ol dir=\"auto\">\n<li>Bulk update from <code class=\"notranslate\">List</code> view - add checkboxes to select multiple docs, and then open a modal to edit individual documents all at once</li>\n<li>Bulk delete from the <code class=\"notranslate\">List</code> view - again, checkboxes to select multiple docs to delete</li>\n<li>Figure out how to handle this on the backend. New bulk operations? Parallel REST requests from the admin UI? How often would we use this? If we wanted to batch edit 5 documents, and 4 worked, but one failed, should all 5 fail? Or should the 4 still update and have the 1 fail only?</li>\n</ol>",
        "createdAt": "2022-11-22T17:18:20Z",
        "replies": null
      },
      {
        "author": {
          "name": "reiv",
          "avatar": "https://avatars.githubusercontent.com/u/205631?v=4",
          "url": "https://github.com/reiv"
        },
        "body": "<p dir=\"auto\">Will these bulk operations be available in the local API as well?</p>",
        "createdAt": "2022-11-23T16:16:43Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Yes!</p>",
            "createdAt": "2022-11-23T16:49:36Z"
          }
        ]
      },
      {
        "author": {
          "name": "AlessioGr",
          "avatar": "https://avatars.githubusercontent.com/u/70709113?u=c8f621e4aa855b20be00afaeaba6976f0a1b5e7c&v=4",
          "url": "https://github.com/AlessioGr"
        },
        "body": "<p dir=\"auto\">What do you think about making the list view work kinda like a spreadsheet, so you can edit all fields all at once? Would be such a huge time-saver</p>",
        "createdAt": "2022-11-29T21:22:27Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">This is pretty much what we're envisioning, give or take. We'll be working on UX and opening an RFC for thoughts shortly!</p>",
            "createdAt": "2022-11-29T21:36:42Z"
          },
          {
            "author": {
              "name": "AlessioGr",
              "avatar": "https://avatars.githubusercontent.com/u/70709113?u=c8f621e4aa855b20be00afaeaba6976f0a1b5e7c&v=4",
              "url": "https://github.com/AlessioGr"
            },
            "body": "<blockquote>\n<p dir=\"auto\">This is pretty much what we're envisioning, give or take. We'll be working on UX and opening an RFC for thoughts shortly!</p>\n</blockquote>\n<p dir=\"auto\">Awesome! You think you'd wanna take it to a level, where it could replace tools like <a href=\"https://www.smartsheet.com/\" rel=\"nofollow\">Smartsheet</a>?<br>\nFor example, I currently have this in Smartsheet which is supposed to track Freelancer progress on content:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/70709113/204654102-1f342702-79db-421f-9c4b-b08ce0a0453f.png\"><img src=\"https://user-images.githubusercontent.com/70709113/204654102-1f342702-79db-421f-9c4b-b08ce0a0453f.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Having something like that in Payload would be insanely helpful. As I could then just use it just like data, I could easily use that data to build frontends for freelancers &amp; dashboards for myself, or reference to it from other places from payload.</p>\n<p dir=\"auto\">Or would you like to keep it more simple in payload? What do you think?</p>",
            "createdAt": "2022-11-29T21:43:52Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">It's a good question. I think there are really two things that need to be combined here to make a solid set of features:</p>\n<ol dir=\"auto\">\n<li>changing a value across  <em><strong>multiple documents at once</strong></em></li>\n<li>allowing for easier inline editing within the List view</li>\n</ol>\n<p dir=\"auto\">This spreadsheet-style view is a solution for 2, but not necessarily for 1. Know what I mean?</p>",
            "createdAt": "2022-11-29T21:46:01Z"
          },
          {
            "author": {
              "name": "AlessioGr",
              "avatar": "https://avatars.githubusercontent.com/u/70709113?u=c8f621e4aa855b20be00afaeaba6976f0a1b5e7c&v=4",
              "url": "https://github.com/AlessioGr"
            },
            "body": "<blockquote>\n<p dir=\"auto\">It's a good question. I think there are really two things that need to be combined here to make a solid set of features:</p>\n<ol dir=\"auto\">\n<li>changing a value across  <em><strong>multiple documents at once</strong></em></li>\n<li>allowing for easier inline editing within the List view</li>\n</ol>\n<p dir=\"auto\">This spreadsheet-style view is a solution for 2, but not necessarily for 1. Know what I mean?</p>\n</blockquote>\n<p dir=\"auto\">Hmm what would a solution for 1. look like? I was imagining the same kind of spreadsheet, where you are able to select multiple cells and change their values at once.</p>",
            "createdAt": "2022-11-29T21:50:05Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Generally a solution for 1 would be to select the \"rows\" from the table that you want to edit via checkbox or similar, and then a little \"drawer\" slides out, where you could choose which fields you want to edit. Then the drawer would have a way to edit the value for only the fields that you select to edit. You'd enter one value and then that one value would be applied to all selected documents.</p>\n<p dir=\"auto\">I think the difference would be that in 1, you are setting the same value across many documents, but in 2, you are free to type in a different value for each selected document.</p>",
            "createdAt": "2022-11-29T21:54:57Z"
          },
          {
            "author": {
              "name": "AlessioGr",
              "avatar": "https://avatars.githubusercontent.com/u/70709113?u=c8f621e4aa855b20be00afaeaba6976f0a1b5e7c&v=4",
              "url": "https://github.com/AlessioGr"
            },
            "body": "<blockquote>\n<p dir=\"auto\">Generally a solution for 1 would be to select the \"rows\" from the table that you want to edit via checkbox or similar, and then a little \"drawer\" slides out, where you could choose which fields you want to edit. Then the drawer would have a way to edit the value for only the fields that you select to edit. You'd enter one value and then that one value would be applied to all selected documents.</p>\n<p dir=\"auto\">I think the difference would be that in 1, you are setting the same value across many documents, but in 2, you are free to type in a different value for each selected document.</p>\n</blockquote>\n<p dir=\"auto\">Ahh I see! I think 2 would actually have the best UX for stuff like text or number fields, if you want to edit multiple at once. But then 1. would be great for more complicated fields, e.g. Upload fields or Relationships.</p>\n<p dir=\"auto\">I think you can modify a lot of fields with 2. if done well, as long as it's text content, e.g. Dropdowns. And for more complicated fields: what if, once the complicated fields are selected (like a spreadsheet), a little button pops-up which then opens the edit drawer? So, instead of using the drawer to choose the fields, you choose the fields naturally by selecting them in the spreadsheet. Would also save more time, I think that's a nice way to combine it.</p>\n<p dir=\"auto\">If that's done well, this could really be HUGE. E.g. a bigger company I'm working for part-time is using Google Sheets for things which should actually be data in a database. But no, they use sheets for data (account managers access and update it) which is a pain to parse and use somewhere else if you need its data.<br>\nPayload having that functionality would be a killer feature</p>\n<p dir=\"auto\">Now replacing a generalist app like Google Sheets would probably be too much (for now?), but any sheet which is actually defined data (so anything which has a defined set of columns) would be great for payload to handle</p>",
            "createdAt": "2022-11-29T22:04:14Z"
          }
        ]
      },
      {
        "author": {
          "name": "jcouturier",
          "avatar": "https://avatars.githubusercontent.com/u/3639237?u=036685e169359dcbbe0eaade0e8e11d710aeb3ee&v=4",
          "url": "https://github.com/jcouturier"
        },
        "body": "<p dir=\"auto\">Would this new feature apply to media uploads as well, like being able to bulk upload media?</p>",
        "createdAt": "2023-02-12T20:31:26Z",
        "replies": [
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">The initial work I have for this is not covering <code class=\"notranslate\">create</code> just yet. I will see if I can squeeze this in after what I am working on.</p>\n<p dir=\"auto\">So far I'm working through:</p>\n<ul dir=\"auto\">\n<li>API support\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Delete operations</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Edit operations</li>\n</ul>\n</li>\n<li>UI\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> List view selection of many documents</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Allow for queries / select all</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Delete selected</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Edit selected, choosing the fields you want to edit (WIP)</li>\n</ul>\n</li>\n<li>With versions enabled:\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Publish</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Unpublish</li>\n</ul>\n</li>\n</ul>",
            "createdAt": "2023-02-13T17:17:17Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">Oops, I didn't answer on your question about uploads. I need to test and think about what is happening in the edit workflow for upload fields.</p>\n<p dir=\"auto\">Creating many from a single API request feels like a whole new feature altogether and I'm not sure how it work from a UI standpoint either. I'm going to keep these thoughts out until later, same for submitting multiple locals.</p>\n<p dir=\"auto\">There is another roadmap item on uploading multiple files at once: <a aria-label=\"Discussion #1149\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4408210\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1149\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1149/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1149\">#1149</a></p>",
            "createdAt": "2023-02-13T17:31:07Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Creating a new user without a password",
    "body": "<p dir=\"auto\">It feels a little odd to me that a user requires a password to be set before creating them.</p>\n<p dir=\"auto\">Especially when emails are successfully configured, a password may not need to be set as the user can have a password reset email sent to them instead. Or maybe you want to create a user that can only be accessed via api key based authentication</p>\n<p dir=\"auto\">What are the thoughts on this change?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1340",
    "id": "1340",
    "createdAt": "2022-11-03T17:44:09Z",
    "upvotes": 10,
    "commentTotal": 3,
    "author": {
      "name": "rymate1234",
      "avatar": "https://avatars.githubusercontent.com/u/581104?v=4",
      "url": "https://github.com/rymate1234"
    },
    "comments": [
      {
        "author": {
          "name": "paper-krane",
          "avatar": "https://avatars.githubusercontent.com/u/20448279?u=4925b641fa174d182fcca24997ac9feff60c6a04&v=4",
          "url": "https://github.com/paper-krane"
        },
        "body": "<p dir=\"auto\">Would also love to see this feature. Would love an option that could be passed in the <code class=\"notranslate\">auth</code> config of a collection that would make passwords necessary or not. I believe it would expand a lot of opportunities user onboarding.</p>",
        "createdAt": "2022-12-12T05:39:15Z",
        "replies": null
      },
      {
        "author": {
          "name": "the-digital-anarchist",
          "avatar": "https://avatars.githubusercontent.com/u/73137980?v=4",
          "url": "https://github.com/the-digital-anarchist"
        },
        "body": "<p dir=\"auto\">I guess it would also be possible to change the user collection our self right?<br>\nOr is this piece of code under the hood and not adjustable?<br>\nI've tried it, but can't find how to do it.</p>\n<p dir=\"auto\">Edit: found the docs on customizing the user: <a href=\"https://payloadcms.com/docs/admin/overview#the-admin-user-collection\" rel=\"nofollow\">https://payloadcms.com/docs/admin/overview#the-admin-user-collection</a><br>\nBut not how to create a user without password yet.</p>",
        "createdAt": "2022-12-26T21:42:54Z",
        "replies": null
      },
      {
        "author": {
          "name": "the-digital-anarchist",
          "avatar": "https://avatars.githubusercontent.com/u/73137980?v=4",
          "url": "https://github.com/the-digital-anarchist"
        },
        "body": "<p dir=\"auto\">Did any one have any luck with this?<br>\nPlease share if you found a way</p>",
        "createdAt": "2023-02-09T13:47:50Z",
        "replies": [
          {
            "author": {
              "name": "thgh",
              "avatar": "https://avatars.githubusercontent.com/u/1109982?u=6cd0299e82d500b4ba200c5ebd1d3134896cb307&v=4",
              "url": "https://github.com/thgh"
            },
            "body": "<p dir=\"auto\"><a href=\"https://github.com/thgh/payload-plugin-oauth/blob/661aeed1b9e0c7d797ecb7d6b6f30ad217162238/src/index.ts#L155-L156\">Setting a random password</a> works well.</p>\n<p dir=\"auto\">Using <a href=\"https://github.com/thgh/payload-plugin-oauth/blob/661aeed1b9e0c7d797ecb7d6b6f30ad217162238/src/index.ts#L236\">payload.login</a> though is a bad idea as you won't know the password (and shouldn't store it plaintext).</p>\n<p dir=\"auto\">The solution I ended up with (not yet in the linked repo) is along these lines:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"          // Sanitize the user object\n          // let user = userDoc.toJSON({ virtuals: true }) // Not sure what this does\n          const user = JSON.parse(JSON.stringify(req.user))\n\n          // Decide which user fields to include in the JWT\n          const collectionConfig = payload.collections[collectionSlug].config\n          const fieldsToSign = collectionConfig.fields.reduce(\n            (signedFields, field: Field) =&gt; {\n              const result = {\n                ...signedFields,\n              }\n\n              if (!fieldAffectsData(field) &amp;&amp; fieldHasSubFields(field)) {\n                field.fields.forEach((subField) =&gt; {\n                  if (fieldAffectsData(subField) &amp;&amp; subField.saveToJWT) {\n                    result[subField.name] = user[subField.name]\n                  }\n                })\n              }\n\n              if (fieldAffectsData(field) &amp;&amp; field.saveToJWT) {\n                result[field.name] = user[field.name]\n              }\n\n              return result\n            },\n            {\n              email: user.email,\n              id: user.id,\n              collection: collectionConfig.slug,\n            }\n          )\n\n          // Sign the JWT\n          const token = jwt.sign(fieldsToSign, payload.secret, {\n            expiresIn: collectionConfig.auth.tokenExpiration,\n          })\n\n          // Set cookie\n          res.cookie(`${payload.config.cookiePrefix}-token`, token, {\n            path: '/',\n            httpOnly: true,\n            expires: getCookieExpiration(collectionConfig.auth.tokenExpiration),\n            secure: collectionConfig.auth.cookies.secure,\n            sameSite: collectionConfig.auth.cookies.sameSite,\n            domain: collectionConfig.auth.cookies.domain || undefined,\n          })\n\n          // Redirect to admin dashboard\n          res.redirect('/admin')\"><pre class=\"notranslate\">          <span class=\"pl-c\">// Sanitize the user object</span>\n          <span class=\"pl-c\">// let user = userDoc.toJSON({ virtuals: true }) // Not sure what this does</span>\n          <span class=\"pl-k\">const</span> <span class=\"pl-s1\">user</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">parse</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">user</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n\n          <span class=\"pl-c\">// Decide which user fields to include in the JWT</span>\n          <span class=\"pl-k\">const</span> <span class=\"pl-s1\">collectionConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">collections</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span>\n          <span class=\"pl-k\">const</span> <span class=\"pl-s1\">fieldsToSign</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">collectionConfig</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">fields</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span>\n            <span class=\"pl-kos\">(</span><span class=\"pl-s1\">signedFields</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">field</span>: <span class=\"pl-smi\">Field</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n              <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n                ...<span class=\"pl-s1\">signedFields</span><span class=\"pl-kos\">,</span>\n              <span class=\"pl-kos\">}</span>\n\n              <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-en\">fieldAffectsData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">field</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-en\">fieldHasSubFields</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">field</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">field</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">fields</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">subField</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n                  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">fieldAffectsData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">subField</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">subField</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">saveToJWT</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">subField</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">user</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">subField</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">]</span>\n                  <span class=\"pl-kos\">}</span>\n                <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n              <span class=\"pl-kos\">}</span>\n\n              <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">fieldAffectsData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">field</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">field</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">saveToJWT</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">result</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">field</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">user</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">field</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">]</span>\n              <span class=\"pl-kos\">}</span>\n\n              <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n            <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-kos\">{</span>\n              <span class=\"pl-c1\">email</span>: <span class=\"pl-s1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">email</span><span class=\"pl-kos\">,</span>\n              <span class=\"pl-c1\">id</span>: <span class=\"pl-s1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">,</span>\n              <span class=\"pl-c1\">collection</span>: <span class=\"pl-s1\">collectionConfig</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slug</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-kos\">}</span>\n          <span class=\"pl-kos\">)</span>\n\n          <span class=\"pl-c\">// Sign the JWT</span>\n          <span class=\"pl-k\">const</span> <span class=\"pl-s1\">token</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">jwt</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sign</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fieldsToSign</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">secret</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c1\">expiresIn</span>: <span class=\"pl-s1\">collectionConfig</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">auth</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tokenExpiration</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n          <span class=\"pl-c\">// Set cookie</span>\n          <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">cookie</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cookiePrefix</span><span class=\"pl-kos\">}</span></span>-token`</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">token</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c1\">path</span>: <span class=\"pl-s\">'/'</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">httpOnly</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">expires</span>: <span class=\"pl-en\">getCookieExpiration</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">collectionConfig</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">auth</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tokenExpiration</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">secure</span>: <span class=\"pl-s1\">collectionConfig</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">auth</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cookies</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">secure</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">sameSite</span>: <span class=\"pl-s1\">collectionConfig</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">auth</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cookies</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">sameSite</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">domain</span>: <span class=\"pl-s1\">collectionConfig</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">auth</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cookies</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">domain</span> <span class=\"pl-c1\">||</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n          <span class=\"pl-c\">// Redirect to admin dashboard</span>\n          <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">redirect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'/admin'</span><span class=\"pl-kos\">)</span></pre></div>",
            "createdAt": "2023-02-13T08:39:04Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Add option to disable \"Add new\" button in `relationship` field",
    "body": "<p dir=\"auto\">Currently, the admin panel presents a button to add an item to a collection on the fly on a <code class=\"notranslate\">relationship</code> field.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/4265044/209190885-0a348300-a1cc-4a10-bbf7-73ecea93b609.png\"><img width=\"730\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4265044/209190885-0a348300-a1cc-4a10-bbf7-73ecea93b609.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">There could be use cases where a user should be only limited to just creating the current item and not add additional item to a <code class=\"notranslate\">relationship</code> collection, so it would be nice to have an option to disable this button.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1750",
    "id": "1750",
    "createdAt": "2022-12-22T17:21:46Z",
    "upvotes": 1,
    "commentTotal": 5,
    "author": {
      "name": "1nfinite9",
      "avatar": "https://avatars.githubusercontent.com/u/4265044?u=909f73aba06fc8129662035149d9520dc0463d18&v=4",
      "url": "https://github.com/1nfinite9"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/1nfinite9/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/1nfinite9\">@1nfinite9</a> that button does not show if the user lacks <code class=\"notranslate\">create</code> access. It sounds like you're looking for something very similar. Can you add some access control to your users?</p>",
        "createdAt": "2022-12-22T17:28:26Z",
        "replies": null
      },
      {
        "author": {
          "name": "1nfinite9",
          "avatar": "https://avatars.githubusercontent.com/u/4265044?u=909f73aba06fc8129662035149d9520dc0463d18&v=4",
          "url": "https://github.com/1nfinite9"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jacobsfletch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jacobsfletch\">@jacobsfletch</a> Apologies, I forgot to add that it would be nice to be able to do this without disabling it via access control. You'd still be able to create docs for that <code class=\"notranslate\">relationship</code> individually, just not when editing or creating a doc that has a <code class=\"notranslate\">relationship</code> to it.</p>",
        "createdAt": "2022-12-23T01:47:08Z",
        "replies": null
      },
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/1nfinite9/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/1nfinite9\">@1nfinite9</a> totally, if we were to support this it would likely be a flag in somewhere in the config — something like <code class=\"notranslate\">relationships.create: boolean | function</code>.</p>",
        "createdAt": "2022-12-23T13:52:07Z",
        "replies": null
      },
      {
        "author": {
          "name": "1nfinite9",
          "avatar": "https://avatars.githubusercontent.com/u/4265044?u=909f73aba06fc8129662035149d9520dc0463d18&v=4",
          "url": "https://github.com/1nfinite9"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jacobsfletch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jacobsfletch\">@jacobsfletch</a> Thanks! That's aligned with what I was looking for. Would the <code class=\"notranslate\">function</code> be for providing custom actions to the button?</p>",
        "createdAt": "2022-12-23T16:25:58Z",
        "replies": [
          {
            "author": {
              "name": "jacobsfletch",
              "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
              "url": "https://github.com/jacobsfletch"
            },
            "body": "<p dir=\"auto\">It would behave very similarly to the existing field-level conditional logic: <a href=\"https://payloadcms.com/docs/fields/overview#conditional-logic\" rel=\"nofollow\">https://payloadcms.com/docs/fields/overview#conditional-logic</a></p>\n<p dir=\"auto\">We would need some API to set conditions on only <em>parts</em> of the field, as opposed to the whole thing.</p>",
            "createdAt": "2022-12-23T18:11:47Z"
          }
        ]
      },
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/1nfinite9/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/1nfinite9\">@1nfinite9</a> I just opened a PR for this, check it out! <a aria-label=\"Pull request #2070\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1581688892\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/2070\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/2070/hovercard\" href=\"https://github.com/payloadcms/payload/pull/2070\">#2070</a></p>",
        "createdAt": "2023-02-13T05:29:33Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Getting Started instructions aren't working",
    "body": "<p dir=\"auto\">I'm hoping someone can help me figure this out.  I can't get the <a href=\"https://payloadcms.com/docs/getting-started/installation#from-scratch\" rel=\"nofollow\">'getting started from scratch' instructions</a> to work.</p>\n<ul dir=\"auto\">\n<li>The instructions use <code class=\"notranslate\">import</code> syntax for <code class=\"notranslate\">payload.config.js</code></li>\n<li>Thus <code class=\"notranslate\">node server.js</code> errors out unless I set <code class=\"notranslate\">type: module</code> in the <code class=\"notranslate\">package.json</code></li>\n<li>The instructions however use <code class=\"notranslate\">require()</code> syntax for <code class=\"notranslate\">server.js</code> - which will then error out</li>\n<li>I updated the <code class=\"notranslate\">server.js</code> to use <code class=\"notranslate\">import</code> syntax despite the instructions but then get</li>\n<li><code class=\"notranslate\">Error [ERR_REQUIRE_ESM]: require()</code> error in <code class=\"notranslate\">node_modules\\payload\\dist\\config\\load.js</code> which is where I give up.</li>\n</ul>\n<p dir=\"auto\">I do want to do this from scratch, but for what it's worth the create-payload-app tool didn't work for me either (constantly failing to find .ts files it didn't generate but still wanted somewhere, and misnaming js files as ts files).</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2013",
    "id": "2013",
    "createdAt": "2023-02-03T18:09:16Z",
    "upvotes": 1,
    "commentTotal": 4,
    "author": {
      "name": "DaveMeade",
      "avatar": "https://avatars.githubusercontent.com/u/674088?u=e972919635d2c292852f2585ebbd73d0ac5b709d&v=4",
      "url": "https://github.com/DaveMeade"
    },
    "comments": [
      {
        "author": {
          "name": "denolfe",
          "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
          "url": "https://github.com/denolfe"
        },
        "body": "<p dir=\"auto\">We've actually removed the \"from scratch\" instructions in the latest docs that are yet to be deployed because there's now some complex tsconfig configuration to allow for the best DX. I would recommend running create-payload-app and transfering all relevant files.</p>\n<p dir=\"auto\">It sounds like you're running into issues that we've tried to mitigate by having create-payload-app. What issues were you facing when going that route?</p>",
        "createdAt": "2023-02-03T19:24:42Z",
        "replies": null
      },
      {
        "author": {
          "name": "DaveMeade",
          "avatar": "https://avatars.githubusercontent.com/u/674088?u=e972919635d2c292852f2585ebbd73d0ac5b709d&v=4",
          "url": "https://github.com/DaveMeade"
        },
        "body": "<p dir=\"auto\">Sorry for the delayed response.</p>\n<p dir=\"auto\">Initially, I couldn't get the create-payload-app to work. (I selected the blank-js option).  This option still doesn't work for me.</p>\n<p dir=\"auto\">I've done some troubleshooting on my side since then (and before reading your reply), including trying to get ts-node working in general.  I don’t know if what I did matters, but now if I select the \"blank\" option the create-payload-app creates a working project. Selecting the blank-js option still does not work.</p>\n<p dir=\"auto\">Unfortunately, even with a 'working' install, I find the project that is created very difficult to work with.  I wanted to use payload because it seemed it would be easy to install into an existing express project I'm working on. That doesn't seem to be the case.</p>\n<p dir=\"auto\">The created project rather forcibly imposes some very opinionated (and needless) views as to what my devops workflow/tooling should be.  Perhaps it does this to ensure the generated docker-compose file will work, but that too is problematic.</p>\n<p dir=\"auto\">Why include a docker-compose file and not the handful of additional lines required to add a mongo server which is also <em>required</em> to run? For that matter, why not docker-ize just mongo but not the payload app? At the very least there are some changes one might want to make here even just for basic 'getting it running'.</p>\n<p dir=\"auto\">Unfortunately, the project breaks if one does too much customization on this set of docker assumptions. For example, maybe my project would be well suited to have a couple of custom dockerfiles, and perhaps even some startup scripts to initialize a mongo server etc (and, honestly, lord only knows what else one might include in their project).</p>\n<p dir=\"auto\">No problem: I'll just create a /build folder drop some docker files in there with the scripts I need, script out the dockerfiles, tweak the docker-compose, and shazam - we're good to go. Right? No, unfortunately, this will break things in the app-generated project.</p>\n<p dir=\"auto\">The project's built-in npm commands call some payload build process that ends up copying a whole bunch of USELESS files into the build directory.  I have no idea what else this payload build process might be doing, so I've no idea if I can simply remove it.</p>\n<p dir=\"auto\">Fundamentally - I don't need or want a CMS to force me to re-code my devops from the ground up. I use gulp, and I have a different set of docker paths/setups. If and when I need a /dist folder, I will script that.</p>\n<p dir=\"auto\">All I need from payload is documentation on how payload interacts with express, and the BARE MINIMUM needed to install payload into an EXISTING project with its own existing set of devop tools, workflows, and resources already wired up.</p>",
        "createdAt": "2023-02-09T20:28:31Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Hey there - I can chime in on this.</p>\n<h4 dir=\"auto\"><code class=\"notranslate\">create-payload-app</code></h4>\n<p dir=\"auto\">Your version of <code class=\"notranslate\">npx create-payload-app</code> must be cached / out of date, because there is no longer an option for <code class=\"notranslate\">blank-js</code>. Try running <code class=\"notranslate\">npx create-payload-app@latest</code> to force <code class=\"notranslate\">npx</code> to use the newest copy.</p>\n<h4 dir=\"auto\">Setting up Payload from scratch</h4>\n<p dir=\"auto\">I think you're pointing to the fact that we should probably explain how to set up a Payload project from scratch once again in our docs. We omitted this because we felt like it wasn't relevant, but this is still 100% possible to do and honestly we don't impose anything on your dev workflow. You are free to take things and run with them however you want.</p>\n<p dir=\"auto\">Really all you need is a few things:</p>\n<ul dir=\"auto\">\n<li>Import Payload into your Express server (<code class=\"notranslate\">import payload from 'payload')</code> or <code class=\"notranslate\">require</code> if using cjs</li>\n<li>Create a <code class=\"notranslate\">payload.config.ts</code> (or js) file, and make sure that you have an <code class=\"notranslate\">env</code> variable <code class=\"notranslate\">PAYLOAD_CONFIG_PATH</code> that passes the path to where you place / name your Payload config</li>\n<li>Run <code class=\"notranslate\">payload.init()</code> and pass it all required options, including your Express app</li>\n</ul>\n<p dir=\"auto\">That's it.</p>\n<p dir=\"auto\">The reason that we suggest using <code class=\"notranslate\">ts-node</code> is that for most of our users, they'll want to use <code class=\"notranslate\">ts</code> and they'll also want to have React components in their Payload config. And we also ship with <code class=\"notranslate\">nodemon</code> because 99.9% of the time people will end up wanting that.</p>\n<p dir=\"auto\">But, to have either TS or JSX in your Payload config (or anywhere in your project for that matter), you need to transpile your project somehow. So we suggest using <code class=\"notranslate\">ts-node</code>. But you 100% don't need to. You could use <code class=\"notranslate\">babel/register</code> or <code class=\"notranslate\">@swc/register</code> before starting your server, or really whatever you want - as long as Node can parse your own files. Payload doesn't care.</p>\n<p dir=\"auto\">Matter of fact, we actually don't have any specific requirements at all, besides maybe node version and the fact that we need a Payload config available and accessible either in the default location (<code class=\"notranslate\">./payload.config.js</code>) or via an <code class=\"notranslate\">env</code> variable.</p>\n<h4 dir=\"auto\">Docker</h4>\n<p dir=\"auto\">RE: Docker, I just took a look at the <code class=\"notranslate\">docker-compose</code> that ships with <code class=\"notranslate\">create-payload-app</code> and it does indeed ship a Mongo server as well as a Node server. Are you seeing something different?</p>\n<p dir=\"auto\">also, to note, is that the usage of a docker compose file that we ship is only needed if you want to. Personally, I’m not a docker guy. I don’t use it at all. It’s just there for reference and it’s a good starting point so that people can customize it as they need.</p>\n<h4 dir=\"auto\"><code class=\"notranslate\">payload build</code></h4>\n<p dir=\"auto\">Now, for the <code class=\"notranslate\">payload build</code> command, that is used to build the Payload admin UI and is absolutely necessary. Those files are not useless—those are the Payload admin files. I think that it's strange to instantly assume that files are useless but that's me.</p>\n<p dir=\"auto\">I think there are some wires being crossed but ultimately Payload doesn't care at all about how you use it and the actual requirements are as minimal as we can get. What ships with <code class=\"notranslate\">create-payload-app</code> are sensible defaults but you don't need any of it. You are free to use Gulp ;)</p>",
            "createdAt": "2023-02-09T20:50:52Z"
          }
        ]
      },
      {
        "author": {
          "name": "DaveMeade",
          "avatar": "https://avatars.githubusercontent.com/u/674088?u=e972919635d2c292852f2585ebbd73d0ac5b709d&v=4",
          "url": "https://github.com/DaveMeade"
        },
        "body": "<p dir=\"auto\">Thanks <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> I will try the above to see if I can get it running this weekend perhaps.</p>\n<blockquote>\n<p dir=\"auto\">Now, for the payload build command, that is used to build the Payload admin UI and is absolutely necessary. Those files are not useless—those are the Payload admin files. I think that it's strange to instantly assume that files are useless but that's me.</p>\n</blockquote>\n<p dir=\"auto\">I mean that they are useless in the /build directory I created to house dockerfiles.  I have no doubt they are needed somewhere, but they are serving no purpose (being useless) in the /build folder.  The package ships with default commands that have some sort of assumption relating to /dist folders and docker contexts that ended up putting those files someplace useless.</p>\n<p dir=\"auto\">I do need some documentation to describe where to place <code class=\"notranslate\">payload build</code> output ... but the app-generated project isn't helping by obfuscating that away behind some path assumptions that appear to somehow be related to docker context (?).  My express app would have other endpoints, they might use ejs views, and/or have other middleware pieces. My output folder has some structure to it, and my dockerfiles are in a /build subfolder. The default commands of the app-created project are not cutting it (and frankly putting output in crazy/useless places);  without 'from scratch' instructions I can't workout how to plug it all into my project.</p>",
        "createdAt": "2023-02-09T21:13:27Z",
        "replies": null
      },
      {
        "author": {
          "name": "DaveMeade",
          "avatar": "https://avatars.githubusercontent.com/u/674088?u=e972919635d2c292852f2585ebbd73d0ac5b709d&v=4",
          "url": "https://github.com/DaveMeade"
        },
        "body": "<p dir=\"auto\">Ok so I went back to try and add payload to an existing project based on the above post.</p>\n<h3 dir=\"auto\">I did the following:</h3>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">npm install --save --legacy-peer-deps payload</code></li>\n<li><code class=\"notranslate\">npm install --save-dev cross-env</code> (for setting PAYLOAD_CONFIG_PATH ala the app-generated package)</li>\n<li>updated <code class=\"notranslate\">server.js</code> per: <a href=\"https://payloadcms.com/docs/getting-started/installation#adding-to-an-existing-app\" rel=\"nofollow\">https://payloadcms.com/docs/getting-started/installation#adding-to-an-existing-app</a>\n<ul dir=\"auto\">\n<li><em>I had to remove the async/await wrapper on the payload.init() command or it would give an error</em></li>\n</ul>\n</li>\n<li>added a <code class=\"notranslate\">payload.config.ts</code> to <code class=\"notranslate\">/src/ts</code> (my project doesn't use ts otherwise)</li>\n<li>updated npm start command such that: <code class=\"notranslate\">\"start\": \"cross-env PAYLOAD_CONFIG_PATH=src/ts/payload.config.ts node server.js\"</code>,</li>\n<li>At this point nothing is calling a 'payload build' command, but nothing in the instructions for adding it to an existing project or the instructions above mention it - saying rather that it's time to fire it up and test. I do so, but I get:</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { buildConfig } from &quot;payload/config&quot;;\n^^^^^^\nSyntaxError: Cannot use import statement outside a module\"><pre class=\"notranslate\"><code class=\"notranslate\">import { buildConfig } from \"payload/config\";\n^^^^^^\nSyntaxError: Cannot use import statement outside a module\n</code></pre></div>\n<ul dir=\"auto\">\n<li>The <code class=\"notranslate\">package.json</code> does have <code class=\"notranslate\">\"type\": \"module\"</code>, and I'm using <code class=\"notranslate\">import</code> syntax everywhere else just fine.</li>\n<li>It seems to be finding the <code class=\"notranslate\">payload.config.ts</code> file ok.</li>\n<li>I'm not exactly sure why I'm getting this error.</li>\n</ul>\n<h3 dir=\"auto\">Seperately:</h3>\n<p dir=\"auto\">In an attempt to work out on my own how to add in the payload build command, I added an npm script to test:<br>\n<code class=\"notranslate\">\"payload-build\": \"cross-env PAYLOAD_CONFIG_PATH=src/ts/payload.config.ts payload build\"</code></p>\n<p dir=\"auto\">When I run <code class=\"notranslate\">npm run payload-build</code>, it dumps a bunch of files in my projects <code class=\"notranslate\">/build</code> folder <em>(where they can do nothing for anyone in my project)</em>. When I saw this before I had believed it must have had something to do with the docker context - but it seems that's just where <code class=\"notranslate\">payload build</code> puts things no matter what. <strong>This makes no sense in my project. /build is only used for docker stuff and my gulp workflow doesn't otherwise care about /build.</strong></p>\n<p dir=\"auto\">This is what I mean by opinionated - why can't I specify where this should go within my project? (My expectation is that it should go to the /views/admin folder since my express server uses ejs middleware, but in anycase - in my project - it certainly shouldn't go in /build.)</p>\n<p dir=\"auto\">The stuff this command is creating here (in my build folder) are all just (admin) front end ui stuff (I think). My normal build workflows successfully find and copy such assets from other node_modules vendors over to my express app folder all the time, easily, and I can simply state where they should go ... there's no documentation on how to do that for payload that I can find, and the pre-packaged builder seems to just shoves things into the 'build' folder without any knowledge of how my project is actually structured.</p>\n<h3 dir=\"auto\">So I have at least 2 blockers:</h3>\n<ol dir=\"auto\">\n<li>I'm still getting some sort of 'not a module' type of error</li>\n<li>how do I state where the output of <code class=\"notranslate\">payload build</code> should actually go?</li>\n</ol>",
        "createdAt": "2023-02-11T14:56:16Z",
        "replies": [
          {
            "author": {
              "name": "CallMeLaNN",
              "avatar": "https://avatars.githubusercontent.com/u/272218?v=4",
              "url": "https://github.com/CallMeLaNN"
            },
            "body": "<p dir=\"auto\">For number 1, I believe it require understanding of esm module in order to use <code class=\"notranslate\">\"type\": \"module\"</code> for your project. <code class=\"notranslate\">payload build</code> is clearly a commonjs cli and commonjs can't import esm module. Payload repo doesn't support esm yet. So until then, you can't use esm if you want to mix/merge the project into a node server. If I understand correctly, you will save a lot from above after moving back to use commonjs. I just came across to find the topic, just like this <a aria-label=\"Issue #1439\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1453452585\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1439\" data-hovercard-type=\"issue\" data-hovercard-url=\"/payloadcms/payload/issues/1439/hovercard\" href=\"https://github.com/payloadcms/payload/issues/1439\">#1439</a></p>\n<p dir=\"auto\">Probably your requirement is quite advanced or otherwise unique. It will be better to separate the projects so it will be clear to isolate the issue in payload vs your setup and have the freedom you need. This will also avoid complicated discussion. Please also reply/discuss the the right places here for clarity.</p>\n<p dir=\"auto\">As we trying the payload, my opinion is if our setup closed to what was recommended and tested by the team, it will be easier for us in the future and easier reproducing any bug for them too. Anyway, otherwise it's our own choices and consequences - extra customization require extra effort and deeper understanding.</p>",
            "createdAt": "2023-02-12T18:21:43Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Slatejs to Vue 3 custom renderer",
    "body": "<p dir=\"auto\">I couldn't find anything on the internet to render the Rich Text values in NuxtJS.<br>\nSo, created a simple SlateJS renderer for vue 3.</p>\n<p dir=\"auto\">The implementation is from payload's <a href=\"https://payloadcms.com/docs/fields/rich-text#generating-html\" rel=\"nofollow\">documentation</a>. You can extend this further.</p>\n<p dir=\"auto\"><a href=\"https://gist.github.com/MinSomai/4f6cde69db926398b1cfaf4f8d7a083a\">https://gist.github.com/MinSomai/4f6cde69db926398b1cfaf4f8d7a083a</a></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// How to use?\n// Save this file as SerializeContent.js\n//\n// import SerializeContent from &quot;../SerializeContent&quot;;\n// &lt;template&gt;\n//  &lt;SerializeContent :content=&quot;content&quot; /&gt;\n// &lt;/template&gt;\n\nimport escapeHTML from &quot;escape-html&quot;;\nimport { Text } from &quot;slate&quot;;\nimport { h } from &quot;vue&quot;;\n\nconst serialize = children =&gt; {\n  return children.map((node, i) =&gt; {\n    if (Text.isText(node)) {\n      let text = h(&quot;span&quot;, { key: i, innerHTML: escapeHTML(node.text) });\n\n      if (node.bold) {\n        text = h(&quot;strong&quot;, { key: i }, text);\n      }\n\n      if (node.code) {\n        text = h(&quot;code&quot;, { key: i }, text);\n      }\n\n      if (node.italic) {\n        text = h(&quot;em&quot;, { key: i }, text);\n      }\n\n      // Handle other leaf types here...\n      return h(&quot;span&quot;, { key: i }, text);\n    }\n\n    if (!node) {\n      return null;\n    }\n\n    switch (node.type) {\n      case &quot;h1&quot;:\n        return h(&quot;h1&quot;, { key: i }, [serialize(node.children)]);\n      // Iterate through all headings here...\n      case &quot;h6&quot;:\n        return h(&quot;h6&quot;, { key: i }, [serialize(node.children)]);\n      case &quot;quote&quot;:\n        return h(&quot;blockquote&quot;, { key: i }, [serialize(node.children)]);\n      case &quot;ul&quot;:\n        return h(&quot;ul&quot;, { key: i }, [serialize(node.children)]);\n      case &quot;ol&quot;:\n        return h(&quot;ol&quot;, { key: i }, [serialize(node.children)]);\n      case &quot;li&quot;:\n        return h(&quot;li&quot;, { key: i }, [serialize(node.children)]);\n      case &quot;link&quot;:\n        return h(&quot;a&quot;, { href: escapeHTML(node.url), key: i }, [\n          serialize(node.children),\n        ]);\n\n      default:\n        return h(&quot;p&quot;, { key: i }, [serialize(node.children)]);\n    }\n  });\n};\n\nexport default {\n  props: [&quot;content&quot;],\n  setup(props) {\n    // `content` should be slatejs value\n    const { content } = toRefs(props);\n    return () =&gt; [serialize(content.value)];\n  },\n};\"><pre class=\"notranslate\"><span class=\"pl-c\">// How to use?</span>\n<span class=\"pl-c\">// Save this file as SerializeContent.js</span>\n<span class=\"pl-c\">//</span>\n<span class=\"pl-c\">// import SerializeContent from \"../SerializeContent\";</span>\n<span class=\"pl-c\">// &lt;template&gt;</span>\n<span class=\"pl-c\">//  &lt;SerializeContent :content=\"content\" /&gt;</span>\n<span class=\"pl-c\">// &lt;/template&gt;</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">escapeHTML</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"escape-html\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-v\">Text</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"slate\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">h</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"vue\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">serialize</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">children</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">children</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Text</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isText</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">let</span> <span class=\"pl-s1\">text</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"span\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">innerHTML</span>: <span class=\"pl-en\">escapeHTML</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">text</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">bold</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">text</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"strong\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">code</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">text</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"code\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">italic</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">text</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"em\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-c\">// Handle other leaf types here...</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"span\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-k\">switch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">type</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">\"h1\"</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"h1\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-c\">// Iterate through all headings here...</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">\"h6\"</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"h6\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">\"quote\"</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"blockquote\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">\"ul\"</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"ul\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">\"ol\"</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"ol\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">\"li\"</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"li\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">\"link\"</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"a\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">href</span>: <span class=\"pl-en\">escapeHTML</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">url</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span>\n          <span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n      <span class=\"pl-k\">default</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"p\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">i</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">props</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"content\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">setup</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">props</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// `content` should be slatejs value</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> content <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">toRefs</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">props</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">content</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/689",
    "id": "689",
    "createdAt": "2022-06-26T13:33:55Z",
    "upvotes": 4,
    "commentTotal": 2,
    "author": {
      "name": "MinSomai",
      "avatar": "https://avatars.githubusercontent.com/u/21338691?u=c2be75f889472dcfd6f5dedaacaba2a34046ed06&v=4",
      "url": "https://github.com/MinSomai"
    },
    "comments": [
      {
        "author": {
          "name": "endlessuniverse",
          "avatar": "https://avatars.githubusercontent.com/u/70734454?u=a82b636ecbeaeba4c0ea8d94aa5f014327c466df&v=4",
          "url": "https://github.com/endlessuniverse"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/MinSomai/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MinSomai\">@MinSomai</a> Thank you for sharing.</p>\n<p dir=\"auto\">It would be great to create a Markdown renderer to integrate with Hugo SSG.</p>",
        "createdAt": "2022-06-27T01:19:17Z",
        "replies": null
      },
      {
        "author": {
          "name": "Elliot67",
          "avatar": "https://avatars.githubusercontent.com/u/45725915?v=4",
          "url": "https://github.com/Elliot67"
        },
        "body": "<p dir=\"auto\">Made an improved version for Vue 2.</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { CreateElement, defineComponent, PropType } from 'vue';\n\nconst recursivlyCreateText = (createElement: CreateElement, tags: string[], text: string): any =&gt; {\n  if (tags.length === 1) {\n    return createElement(tags[0], text);\n  }\n  const nextTags = tags.filter((t, idx) =&gt; idx !== 0);\n  return createElement(tags[0], [recursivlyCreateText(createElement, nextTags, text)]);\n};\n\nconst serialize = (createElement: CreateElement, children: any) =&gt; {\n  const recursive = (children: Parameters&lt;typeof serialize&gt;[1]) =&gt; serialize(createElement, children);\n  return children?.map((node: any): any =&gt; {\n    if (!node) {\n      return null;\n    }\n\n    if (typeof node.text === 'string') {\n      const textTags: string[] = [];\n      if (node.bold) {\n        textTags.push('strong');\n      }\n      if (node.italic) {\n        textTags.push('i');\n      }\n      if (node.underline) {\n        textTags.push('u');\n      }\n      if (node.strikethrough) {\n        textTags.push('s');\n      }\n      if (textTags.length &gt; 0) {\n        return recursivlyCreateText(createElement, textTags, node.text);\n      }\n\n      return node.text;\n    }\n\n    switch (node.type) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return createElement(node.type, [recursive(node.children)]);\n      case 'quote':\n        return createElement('blockquote', [recursive(node.children)]);\n      case 'ul':\n        return createElement('ul', [recursive(node.children)]);\n      case 'ol':\n        return createElement('ol', [recursive(node.children)]);\n      case 'li':\n        return createElement('li', [recursive(node.children)]);\n      case 'link':\n        let url = '';\n        switch (node.linkType) {\n          case 'internal':\n            // TODO: Find url of internal link\n            break;\n          case 'custom':\n            url = node.url;\n            break;\n        }\n        return createElement('a', { attrs: { href: url, target: node.newTab ? '_blank' : null } }, [\n          recursive(node.children),\n        ]);\n\n      default:\n        if (node.children?.length &gt; 0) {\n          if (node.children.length === 1 &amp;&amp; node.children[0].text === '') {\n            return createElement('br');\n          }\n          return createElement('p', [recursive(node.children)]);\n        }\n        return null;\n    }\n  });\n};\n\nexport default defineComponent({\n  props: {\n    node: {\n      type: Array as PropType&lt;any[]&gt;,\n      required: true,\n    },\n  },\n  render: function (createElement) {\n    return createElement('div', serialize(createElement, this.node));\n  },\n});\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">CreateElement</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">defineComponent</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">PropType</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'vue'</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">recursivlyCreateText</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">createElement</span>: <span class=\"pl-smi\">CreateElement</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">tags</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\">any</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">tags</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">tags</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">nextTags</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">tags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">t</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">idx</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">idx</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">tags</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">recursivlyCreateText</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">createElement</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">nextTags</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">serialize</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">createElement</span>: <span class=\"pl-smi\">CreateElement</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">children</span>: <span class=\"pl-smi\">any</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">recursive</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">children</span>: <span class=\"pl-smi\">Parameters</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">serialize</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">createElement</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">children</span><span class=\"pl-kos\">?.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span>: <span class=\"pl-smi\">any</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\">any</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">text</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'string'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">textTags</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">bold</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">textTags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'strong'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">italic</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">textTags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'i'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">underline</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">textTags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'u'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">strikethrough</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">textTags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'s'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">textTags</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">recursivlyCreateText</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">createElement</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">textTags</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">text</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">text</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-k\">switch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">type</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'h1'</span>:\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'h2'</span>:\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'h3'</span>:\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'h4'</span>:\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'h5'</span>:\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'h6'</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">type</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">recursive</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'quote'</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'blockquote'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">recursive</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'ul'</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'ul'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">recursive</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'ol'</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'ol'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">recursive</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'li'</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'li'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">recursive</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'link'</span>:\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">url</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">''</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-k\">switch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">linkType</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">case</span> <span class=\"pl-s\">'internal'</span>:\n            <span class=\"pl-c\">// TODO: Find url of internal link</span>\n            <span class=\"pl-k\">break</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-k\">case</span> <span class=\"pl-s\">'custom'</span>:\n            <span class=\"pl-s1\">url</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">url</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">break</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'a'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">attrs</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">href</span>: <span class=\"pl-s1\">url</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">target</span>: <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">newTab</span> ? <span class=\"pl-s\">'_blank'</span> : <span class=\"pl-c1\">null</span> <span class=\"pl-kos\">}</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span>\n          <span class=\"pl-en\">recursive</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n      <span class=\"pl-k\">default</span>:\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">?.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">1</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">text</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">''</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'br'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-kos\">}</span>\n          <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'p'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">recursive</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">children</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-en\">defineComponent</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">props</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">node</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-smi\">Array</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">PropType</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">any</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">render</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">createElement</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'div'</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">serialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">createElement</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">node</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>",
        "createdAt": "2023-02-11T16:46:07Z",
        "replies": [
          {
            "author": {
              "name": "MinSomai",
              "avatar": "https://avatars.githubusercontent.com/u/21338691?u=c2be75f889472dcfd6f5dedaacaba2a34046ed06&v=4",
              "url": "https://github.com/MinSomai"
            },
            "body": "<p dir=\"auto\">noiche.</p>",
            "createdAt": "2023-02-11T16:56:00Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "How to resave all posts programmatically (migrate data)",
    "body": "<ul dir=\"auto\">\n<li>How do I resave all posts programmatically?</li>\n<li>How do I migrate docs after a schema change?</li>\n</ul>\n<p dir=\"auto\">These are common questions and fortunately pretty easy to solve using a migration script. All we have to do is spin up Payload, find all records within a given  collection, and then immediately update each. If needed, we can also modify the data before it gets updated:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const payload = require('payload');\n\nrequire('dotenv').config();\n\npayload.init({\n  secret: process.env.PAYLOAD_SECRET,\n  mongoURL: process.env.MONGO_URL,\n  local: true,\n});\n\nconst resaveCollection = async () =&gt; {\n  const args = process.argv.slice(2); // nodejs command line args are an array that begin at the third item\n  const [\n    collectionSlug,\n    overrides\n  ] = args || [];\n\n  const results = await payload.find({\n    collection: collectionSlug,\n    depth: 0,\n    limit: 700,\n  });\n\n  try {\n    await Promise.all(results.docs.map(async (result) =&gt; {\n      const { id } = result;\n\n      if (collectionSlug) {\n        try {\n          await payload.update({\n            collection: collectionSlug,\n            id,\n            data: {\n              ...overrides || {}\n            },\n          })\n\n          console.log(`Document in '${collectionSlug}' with id '${id}' updated successfully`);\n        } catch (e) {\n          payload.logger.error(`Document in '${collectionSlug}' with id '${id}' failed to update`);\n          payload.logger.error(e);\n        }\n      } else {\n        console.log(`No document found in '${collectionSlug}' with id '${id}'`);\n      }\n    }));\n  } catch (e) {\n    payload.logger.error('Something went wrong.');\n    payload.logger.error(e);\n  }\n\n  console.log('Complete');\n  process.exit(0);\n};\n\nresaveCollection();\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">payload</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'payload'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dotenv'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">config</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">secret</span>: <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PAYLOAD_SECRET</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">mongoURL</span>: <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MONGO_URL</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">local</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">resaveCollection</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">args</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">argv</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// nodejs command line args are an array that begin at the third item</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span>\n    <span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s1\">overrides</span>\n  <span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">args</span> <span class=\"pl-c1\">||</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">results</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">find</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">collection</span>: <span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">depth</span>: <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">limit</span>: <span class=\"pl-c1\">700</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">await</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">all</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">results</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">docs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> id <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">update</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n            <span class=\"pl-c1\">collection</span>: <span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">,</span>\n            id<span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">data</span>: <span class=\"pl-kos\">{</span>\n              ...<span class=\"pl-s1\">overrides</span> <span class=\"pl-c1\">||</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n            <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Document in '<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">}</span></span>' with id '<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">id</span><span class=\"pl-kos\">}</span></span>' updated successfully`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Document in '<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">}</span></span>' with id '<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">id</span><span class=\"pl-kos\">}</span></span>' failed to update`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`No document found in '<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">collectionSlug</span><span class=\"pl-kos\">}</span></span>' with id '<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">id</span><span class=\"pl-kos\">}</span></span>'`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Something went wrong.'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Complete'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exit</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">resaveCollection</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">To run it, send the slug of the collection along with optional overrides for node to execute:</p>\n<p dir=\"auto\"><code class=\"notranslate\">node scripts/resaveCollection pages</code></p>\n<p dir=\"auto\">^ Your specific file path may different. Update this based on your specifications. Also note that Payload may need to know the location of your config, see <a href=\"https://payloadcms.com/docs/configuration/overview#customizing-and-overriding-the-config-location\" rel=\"nofollow\">this page</a> for more detail.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/434",
    "id": "434",
    "createdAt": "2022-02-08T23:34:41Z",
    "upvotes": 5,
    "commentTotal": 1,
    "author": {
      "name": "jacobsfletch",
      "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
      "url": "https://github.com/jacobsfletch"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">If you're here needing to regenerate media after changing image sizes, check out this discussion: <a aria-label=\"Discussion #1834\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4740607\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1834\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1834/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1834\">#1834</a></p>",
        "createdAt": "2023-01-09T22:35:25Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "jacobsfletch",
        "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
        "url": "https://github.com/jacobsfletch"
      },
      "body": "<p dir=\"auto\">If you're here needing to regenerate media after changing image sizes, check out this discussion: <a aria-label=\"Discussion #1834\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4740607\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1834\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1834/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1834\">#1834</a></p>",
      "createdAt": "2023-01-09T22:35:25Z",
      "chosenAt": "2023-02-09T16:19:42Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Data migrations",
    "body": "<p dir=\"auto\">We just completed a web project and are using Payload CMS in production; great tool!</p>\n<p dir=\"auto\">We ran into an issue whereby improperly named fields - e.g. 'locking-system' - broke the server connection to GraphQL. Lesson learned, always use camel case or snake case. The error message was:</p>\n<p dir=\"auto\"><code class=\"notranslate\">Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"locking-system\\\" does not.</code></p>\n<p dir=\"auto\">While there seem to be two NPM packages for migrations with Mongo/Mongoose, some sort of database migration tool would be critical with a larger data set.</p>\n<p dir=\"auto\">Does Payload have any plans in this regard or solution they recommend from previous project experience?</p>\n<p dir=\"auto\">Thank you!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/625",
    "id": "625",
    "createdAt": "2022-06-03T02:29:01Z",
    "upvotes": 9,
    "commentTotal": 2,
    "author": {
      "name": "etmartinkazoo",
      "avatar": "https://avatars.githubusercontent.com/u/13721164?u=2e62be9691a37ada0a05aad8cc0bdb2c64b2db07&v=4",
      "url": "https://github.com/etmartinkazoo"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">Ah! This one slipped by unanswered, we've had a few discussions about what can be done to handle migrations as data changes. With no-sql you don't hit errors like you might with SQL but it can lead to nasty bugs for frontends that receive bad data.</p>\n<p dir=\"auto\">In other <a href=\"https://github.com/payloadcms/payload/discussions/664#discussioncomment-2972384\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/664/hovercard?comment_id=2972384\">disscussions</a> we've recommended using the <a href=\"https://www.npmjs.com/package/migrate-mongoose\" rel=\"nofollow\">mongoose-migrate</a> package.</p>\n<p dir=\"auto\">Would love to hear your experience if you do go this route.</p>",
        "createdAt": "2022-07-01T15:49:07Z",
        "replies": [
          {
            "author": {
              "name": "etmartinkazoo",
              "avatar": "https://avatars.githubusercontent.com/u/13721164?u=2e62be9691a37ada0a05aad8cc0bdb2c64b2db07&v=4",
              "url": "https://github.com/etmartinkazoo"
            },
            "body": "<p dir=\"auto\">We will use mongoose-migrate in the future and report back.</p>\n<p dir=\"auto\">We build a lot of business applications and have used Rails or Django with PostgreSQL in the past. We are using Payload CMS for all projects going forward - we have four in production serving businesses at the time of writing this. The developer experience even prior to your 1.0 release has just been phenomenal. I think we would go back to PostgreSQL in the future if that were an option but on the whole we couldn't be happier with Payload CMS. Thank you for making the internet a better place!</p>",
            "createdAt": "2022-07-08T19:15:49Z"
          },
          {
            "author": {
              "name": "MattRvt",
              "avatar": "https://avatars.githubusercontent.com/u/52105158?u=e7eac1c6b36d6df11e0b816084bf6f89feb1c9c1&v=4",
              "url": "https://github.com/MattRvt"
            },
            "body": "<p dir=\"auto\">mongoose-migrate does not seem to be maintained anymore. (<a aria-label=\"Issue #62\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"599445877\" data-permission-text=\"Title is private\" data-url=\"https://github.com/balmasi/migrate-mongoose/issues/62\" data-hovercard-type=\"issue\" data-hovercard-url=\"/balmasi/migrate-mongoose/issues/62/hovercard\" href=\"https://github.com/balmasi/migrate-mongoose/issues/62\">balmasi/migrate-mongoose#62</a>)</p>\n<p dir=\"auto\"><a href=\"https://github.com/db-migrate/node-db-migrate\">node-db-migrate</a> seem interesting, but I failed to configure it.</p>",
            "createdAt": "2022-07-22T09:09:01Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">There is this package also <a href=\"https://github.com/seppevs/migrate-mongo\">https://github.com/seppevs/migrate-mongo</a> which has more recent updates. That could help until we have an ORM with migrations.</p>",
            "createdAt": "2022-07-22T15:37:16Z"
          },
          {
            "author": {
              "name": "MentalGear",
              "avatar": "https://avatars.githubusercontent.com/u/2837147?v=4",
              "url": "https://github.com/MentalGear"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/etmartinkazoo/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/etmartinkazoo\">@etmartinkazoo</a> Would you mind reporting back with your experiences data migrating and all payload so far?</p>",
            "createdAt": "2022-11-15T16:44:35Z"
          }
        ]
      },
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">I made a sample repo that has migrations inside a Payload project using <code class=\"notranslate\">migrate-mongo</code> and it worked pretty well in my testing, see <a href=\"https://github.com/payloadcms/migrate-mongo-example\">https://github.com/payloadcms/migrate-mongo-example</a>.</p>\n<p dir=\"auto\">I'll write a blog post about it and depending on reception, it could be added to the Payload docs.</p>",
        "createdAt": "2022-12-22T14:48:36Z",
        "replies": [
          {
            "author": {
              "name": "charkour",
              "avatar": "https://avatars.githubusercontent.com/u/33156025?u=9a8734e319690ab1a56112fa9414693f5b6adad3&v=4",
              "url": "https://github.com/charkour"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DanRibbens/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DanRibbens\">@DanRibbens</a>, thanks for the example. Did you release that blog post?</p>",
            "createdAt": "2023-02-10T21:26:56Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">Not yet, thanks for asking. I really need to get after that!</p>",
            "createdAt": "2023-02-10T21:43:45Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "How to use .env inside fork tests?",
    "body": "<p dir=\"auto\">I'm trying to contribute to the Payload repo by fixing an issue I reported. I already forked the project but I don't have MongoDB installed on my local machine, I use a remote MongoDB instance for my local development. So when I run <code class=\"notranslate\">yarn dev admin</code> I get an error because it is trying to connect to a local instance of MongoDB.</p>\n<p dir=\"auto\">Is there a way to use a <code class=\"notranslate\">.env</code> file to set the MONGO_URL? I see that the <code class=\"notranslate\">dev.ts</code> does use the <code class=\"notranslate\">process.env.MONGO_URL</code> environment variable but it doesn't load the variables inside my <code class=\"notranslate\">.env</code>, so every time I want to run a test, I have to write the full command:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"MONGO_URL=&quot;my_instance_url&quot; yarn dev admin\"><pre class=\"notranslate\"><code class=\"notranslate\">MONGO_URL=\"my_instance_url\" yarn dev admin\n</code></pre></div>\n<p dir=\"auto\">I know is not a big deal, but I guess it's more convenient to use a <code class=\"notranslate\">.env</code> file for that.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2055",
    "id": "2055",
    "createdAt": "2023-02-10T15:02:49Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "ChrisGV04",
      "avatar": "https://avatars.githubusercontent.com/u/47041342?u=76f483c754eb2506445bb063e3c07c3b5935d384&v=4",
      "url": "https://github.com/ChrisGV04"
    },
    "comments": [
      {
        "author": {
          "name": "denolfe",
          "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
          "url": "https://github.com/denolfe"
        },
        "body": "<p dir=\"auto\">Currently, this is not possible with how we have it configured. In my mind, this would introduce variability into the tests unnecessarily.</p>\n<p dir=\"auto\">We do have the ability to use a MongoDB memory server if you were to pass <code class=\"notranslate\">NODE_ENV=test</code> as the prefix. This obviously doesn't resolve your ask for loading an .env file, though.</p>",
        "createdAt": "2023-02-10T20:43:09Z",
        "replies": [
          {
            "author": {
              "name": "ChrisGV04",
              "avatar": "https://avatars.githubusercontent.com/u/47041342?u=76f483c754eb2506445bb063e3c07c3b5935d384&v=4",
              "url": "https://github.com/ChrisGV04"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/denolfe/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/denolfe\">@denolfe</a> Understood! Thank you very much.</p>\n<p dir=\"auto\">I found a way to do it by setting the variable from the start command, so no big deal. It was good enough for my current setup</p>",
            "createdAt": "2023-02-10T21:24:04Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "denolfe",
        "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
        "url": "https://github.com/denolfe"
      },
      "body": "<p dir=\"auto\">Currently, this is not possible with how we have it configured. In my mind, this would introduce variability into the tests unnecessarily.</p>\n<p dir=\"auto\">We do have the ability to use a MongoDB memory server if you were to pass <code class=\"notranslate\">NODE_ENV=test</code> as the prefix. This obviously doesn't resolve your ask for loading an .env file, though.</p>",
      "createdAt": "2023-02-10T20:43:09Z",
      "chosenAt": "2023-02-10T21:24:07Z",
      "chosenBy": "ChrisGV04"
    }
  },
  {
    "title": "Roadmap: Multiple Database Support",
    "body": "<h2 dir=\"auto\">Description</h2>\n<p dir=\"auto\">Support additional databases</p>\n<h2 dir=\"auto\">Implementation Detail</h2>\n<ul dir=\"auto\">\n<li>Implement an adapter in order to support additional databases</li>\n</ul>\n<h2 dir=\"auto\">Potential Breaking Changes</h2>\n<p dir=\"auto\">None</p>\n<h2 dir=\"auto\">Effort</h2>\n<p dir=\"auto\">High</p>",
    "url": "https://github.com/payloadcms/payload/discussions/287",
    "id": "287",
    "createdAt": "2021-08-11T23:45:41Z",
    "upvotes": 63,
    "commentTotal": 13,
    "author": {
      "name": "denolfe",
      "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
      "url": "https://github.com/denolfe"
    },
    "comments": [
      {
        "author": {
          "name": "SushyDev",
          "avatar": "https://avatars.githubusercontent.com/u/43114803?u=7623619aa3132c6c219dd373eaf62e1f0ae71ced&v=4",
          "url": "https://github.com/SushyDev"
        },
        "body": "<p dir=\"auto\">Not sure if this would be the right place to suggest but I would love for this to integrate with firebase firestore (and going off-topic, it would be cool if payload could integrate with more firebase features natively such as auth)</p>",
        "createdAt": "2022-07-19T22:14:49Z",
        "replies": null
      },
      {
        "author": {
          "name": "gnusupport",
          "avatar": "https://avatars.githubusercontent.com/u/24825387?u=2b0ba45b321cca45de7bde0f0fe6348b2e41ea28&v=4",
          "url": "https://github.com/gnusupport"
        },
        "body": "<p dir=\"auto\">I would like it integrated with PostgreSQL</p>",
        "createdAt": "2022-08-01T12:30:36Z",
        "replies": [
          {
            "author": {
              "name": "kaushalyap",
              "avatar": "https://avatars.githubusercontent.com/u/24698778?v=4",
              "url": "https://github.com/kaushalyap"
            },
            "body": "<p dir=\"auto\">They should have gone with the Postgres in the first place IMHO</p>\n<p dir=\"auto\">I already brought it up here : <a aria-label=\"Discussion #654\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4143880\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/654\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/654/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/654\">#654</a></p>",
            "createdAt": "2022-08-03T13:12:58Z"
          },
          {
            "author": {
              "name": "t3hmrman",
              "avatar": "https://avatars.githubusercontent.com/u/1085750?u=d661672ef0b04c93a42a5ada9ac93e3d20eae81c&v=4",
              "url": "https://github.com/t3hmrman"
            },
            "body": "<p dir=\"auto\">I agree <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/kaushalyap/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kaushalyap\">@kaushalyap</a> but to be fair Payload has already done a lot of hard work and is providing an immense amount of value free of charge.</p>\n<p dir=\"auto\">Patiently waiting for when they have time to abstract their database usage so other databases can be shimmed in is all we can do, unless one of us wants to send in some PRs <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f609.png\">😉</g-emoji> .</p>",
            "createdAt": "2022-08-04T00:33:09Z"
          },
          {
            "author": {
              "name": "kaushalyap",
              "avatar": "https://avatars.githubusercontent.com/u/24698778?v=4",
              "url": "https://github.com/kaushalyap"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/t3hmrman/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t3hmrman\">@t3hmrman</a> I was not devaluing their work but providing my opinion based on the deployment aspect : Postgres architecture is easy to deploy and maintain instead of clusters.</p>",
            "createdAt": "2022-08-04T13:14:54Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">It's all good guys!</p>\n<p dir=\"auto\">We are excited about adding support specifically for Postgres as well. There <em><strong>are</strong></em> some pretty significant downsides though. For example, if we were to adopt Prisma, all of our \"nested\" field types like <code class=\"notranslate\">group</code>, <code class=\"notranslate\">array</code>, <code class=\"notranslate\">blocks</code>, etc. would either need to be stored as JSON columns in Postgres, which is not ideal, and could mean that much of every single doc is simply stored as JSON in Postgres....</p>\n<p dir=\"auto\">Alternatively, we could create different tables for <em><strong>every nested field type</strong></em>. Consider if you have a group field. In Mongo, boom, it just stores nested fields in the group. All on the same doc. In Prisma, that would ideally be done via a join on a different table, where the nested fields are placed within another table, and joined in. Same with Arrays, Blocks, etc. Not ideal as compared to Mongo.</p>\n<p dir=\"auto\">Regardless, this is definitely something we're continuing to evaluate. Would love to know what you guys think about the above.</p>",
            "createdAt": "2022-08-04T14:07:59Z"
          },
          {
            "author": {
              "name": "fm-swe",
              "avatar": "https://avatars.githubusercontent.com/u/97878908?v=4",
              "url": "https://github.com/fm-swe"
            },
            "body": "<p dir=\"auto\">if the data inside the json column is just stored and retrieved there is no downside to it<br>\nThere should be a slowdown if you want to filter based on the data inside a json column, although I remember postgres introducing some heavy patches in the past year(s) to handle data inside json column like any other column data</p>",
            "createdAt": "2022-08-04T14:18:41Z"
          },
          {
            "author": {
              "name": "gnusupport",
              "avatar": "https://avatars.githubusercontent.com/u/24825387?u=2b0ba45b321cca45de7bde0f0fe6348b2e41ea28&v=4",
              "url": "https://github.com/gnusupport"
            },
            "body": "<p dir=\"auto\">I have Website Revision System in PostgreSQL since decades. Tell me what you wish to design and I can help you.</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Usually there are some types and statuses, I start with it. Maybe page has publishing status, maybe it is there, but not published, maybe published but hidden from sitemap. That is one table.</p>\n</li>\n<li>\n<p dir=\"auto\">Page belongs to website areas. Thus there is table of website areas. Think of it as domains.<br>\nExample:</p>\n</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"                             ID   317\n                           Note   &quot;GNU Support&quot;\n                          Title   &quot;GNU Support&quot;\n                            URL   &quot;https://gnu.support&quot;\n               Default language   &quot;English&quot;\n                        Company   nil\n                         Author   &quot;GNU Support&quot;\n                    Description   &quot;GNU Support&quot;\n                       Keywords   &quot;GNU Support&quot;\n                  Main category   &quot;gnu.support&quot;\n                       Template   &quot;RCD NEW: Free Liquid Templates for Discount Markdown and RCD Template Interpolation System&quot;\n          Default Main Filename   &quot;index&quot;\n              Default File Type   &quot;.html HTML File&quot;\n                Media directory   &quot;/home/data1/protected/public_html/gnu.support/images&quot;\n                Files directory   &quot;/home/data1/protected/public_html/gnu.support/files&quot;\n                 Links per page   10\n                   Product Rows   4\n                Product Columns   3\n                     To publish   t\n                   Virtual area   nil\n                    Thumb Width   200\n                   Thumb Height   160\n            Maximal Image Width   600\n                  Allow signups   nil\n                   Allow logins   nil\n              Default page type   &quot;Markdown (Pandoc, espresso)&quot;\n                       Category   nil\n                      Copyright   &quot;All copyrights reserved&quot;\n                Managing Editor   nil\n          Related pages heading   &quot;Related pages&quot;\n          Include related pages   t\"><pre class=\"notranslate\"><code class=\"notranslate\">                             ID   317\n                           Note   \"GNU Support\"\n                          Title   \"GNU Support\"\n                            URL   \"https://gnu.support\"\n               Default language   \"English\"\n                        Company   nil\n                         Author   \"GNU Support\"\n                    Description   \"GNU Support\"\n                       Keywords   \"GNU Support\"\n                  Main category   \"gnu.support\"\n                       Template   \"RCD NEW: Free Liquid Templates for Discount Markdown and RCD Template Interpolation System\"\n          Default Main Filename   \"index\"\n              Default File Type   \".html HTML File\"\n                Media directory   \"/home/data1/protected/public_html/gnu.support/images\"\n                Files directory   \"/home/data1/protected/public_html/gnu.support/files\"\n                 Links per page   10\n                   Product Rows   4\n                Product Columns   3\n                     To publish   t\n                   Virtual area   nil\n                    Thumb Width   200\n                   Thumb Height   160\n            Maximal Image Width   600\n                  Allow signups   nil\n                   Allow logins   nil\n              Default page type   \"Markdown (Pandoc, espresso)\"\n                       Category   nil\n                      Copyright   \"All copyrights reserved\"\n                Managing Editor   nil\n          Related pages heading   \"Related pages\"\n          Include related pages   t\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>\n<p dir=\"auto\">Page belongs to categories too, that is other table to be made.</p>\n</li>\n<li>\n<p dir=\"auto\">Page may have tags. That is tagging table where pages are related to tags. There is table for tags only, and there is tag types table.</p>\n</li>\n</ol>\n<p dir=\"auto\">I gave you simple example to follow in designing tables.</p>\n<p dir=\"auto\">Your program can be made so that it may access this or that database. It should be made in general manner while underlying driver is to obtain information from database.</p>",
            "createdAt": "2022-08-04T15:22:41Z"
          },
          {
            "author": {
              "name": "gnusupport",
              "avatar": "https://avatars.githubusercontent.com/u/24825387?u=2b0ba45b321cca45de7bde0f0fe6348b2e41ea28&v=4",
              "url": "https://github.com/gnusupport"
            },
            "body": "<blockquote>\n<p dir=\"auto\">It's all good guys!</p>\n<p dir=\"auto\">We are excited about adding support specifically for Postgres as well. There <em><strong>are</strong></em> some pretty significant downsides though. For example, if we were to adopt Prisma, all of our \"nested\" field types like <code class=\"notranslate\">group</code>, <code class=\"notranslate\">array</code>, <code class=\"notranslate\">blocks</code>, etc. would either need to be stored as JSON columns in Postgres, which is not ideal, and could mean that much of every single doc is simply stored as JSON in Postgres....</p>\n<p dir=\"auto\">Alternatively, we could create different tables for <em><strong>every nested field type</strong></em>. Consider if you have a group field. In Mongo, boom, it just stores nested fields in the group. All on the same doc. In Prisma, that would ideally be done via a join on a different table, where the nested fields are placed within another table, and joined in. Same with Arrays, Blocks, etc. Not ideal as compared to Mongo.</p>\n<p dir=\"auto\">Regardless, this is definitely something we're continuing to evaluate. Would love to know what you guys think about the above.</p>\n</blockquote>\n<p dir=\"auto\">I consider that bad database design.</p>\n<p dir=\"auto\">Each group shall be defined in groups' table. I understand that my thinking is SQL based, and not document based. But I do not agree that your way of planning the database belong to that type of database like Mongo, I actually see that your way of thinking rather belong to relational databases.</p>\n<p dir=\"auto\">And I use rapid SQL development by using simple text templates (skeletons) in Emacs and it may be done with any editor to be quick.</p>",
            "createdAt": "2022-08-04T15:26:23Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gnusupport/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gnusupport\">@gnusupport</a> — I have also been around SQL for over a decade and I understand that storing lots of content in JSON columns is bad design. That is why I wrote what I wrote—describing how it is <strong><em>not ideal</em></strong>.</p>\n<p dir=\"auto\">I think we are saying the exact same thing. But I really do appreciate you taking the time to describe this stuff in detail. It's awesome to see.</p>",
            "createdAt": "2022-08-04T15:33:10Z"
          },
          {
            "author": {
              "name": "gnusupport",
              "avatar": "https://avatars.githubusercontent.com/u/24825387?u=2b0ba45b321cca45de7bde0f0fe6348b2e41ea28&v=4",
              "url": "https://github.com/gnusupport"
            },
            "body": "<p dir=\"auto\">I use this GNU Emacs skeleton function: <a href=\"https://gnu.support/gnu-emacs/emacs-lisp/Emacs-Lisp-cf-sql-table.html\" rel=\"nofollow\">https://gnu.support/gnu-emacs/emacs-lisp/Emacs-Lisp-cf-sql-table.html</a></p>",
            "createdAt": "2022-08-04T15:56:03Z"
          }
        ]
      },
      {
        "author": {
          "name": "gnusupport",
          "avatar": "https://avatars.githubusercontent.com/u/24825387?u=2b0ba45b321cca45de7bde0f0fe6348b2e41ea28&v=4",
          "url": "https://github.com/gnusupport"
        },
        "body": "<p dir=\"auto\">I am using table <code class=\"notranslate\">variables</code> where I can insert any variable either as global variable or website or page variable. It is not hard to use \"blocks\", but I consider blocks also as variables. I also have <code class=\"notranslate\">templates</code>, and template is interpolated with variables and text, what else. One can have small templates for HTML blocks. So one could have table <code class=\"notranslate\">blocks</code> that references website domain (web area), including one could reference specific category inside of the web area, or even specific page. That way a block may be either global to area, or more specific to category and pages, so that other categories and pages may have also blocks with same name, but differently placed. Once you start creating first table with help of skeletons you will quickly understand it. I can help when you tell me you need it.</p>",
        "createdAt": "2022-08-04T15:34:12Z",
        "replies": null
      },
      {
        "author": {
          "name": "t3hmrman",
          "avatar": "https://avatars.githubusercontent.com/u/1085750?u=d661672ef0b04c93a42a5ada9ac93e3d20eae81c&v=4",
          "url": "https://github.com/t3hmrman"
        },
        "body": "<p dir=\"auto\">I personally think the idea of <em>how</em> to structure the database can/should be punted for now.</p>\n<p dir=\"auto\">IMHO the hard work here is abstracting your database such that different engines can be shimmed underneath, this enables you to implement <em>some working version</em> of Postgres and let the community contribute/suggest improvements over time.</p>\n<p dir=\"auto\">Are you planning on making a wholesale switch from <code class=\"notranslate\">mongoose</code> to <code class=\"notranslate\">prisma</code>? Or are you willing to consider supporting both (or at least not disturbing the mongoose code)?</p>\n<p dir=\"auto\">Personally I think the least impact way to do this is to:</p>\n<ol dir=\"auto\">\n<li>Build an interface around what is expected of a backing store (this essentially ossifies and elucidates the contract between different parts of the app and the DB) -- lets say <code class=\"notranslate\">Database</code> or <code class=\"notranslate\">Backend</code></li>\n<li>Re-implement (mostly copy/make more references to) the current mongo implementation as the first implementation  -- let's say <code class=\"notranslate\">MongoBackend</code></li>\n<li>Allow for use of the new mongo backend (vs old straight <code class=\"notranslate\">mongoose</code> backend) with an env var</li>\n<li>Test the new <code class=\"notranslate\">MongoBackend</code> with the built in <code class=\"notranslate\">mongoose</code> usage side by side (great time to get a good complete DB-side test suite with the old vs/new backends which essentially run the same code)</li>\n<li>Create RFC for PostgresBackend (architectural discussions, bikeshedding, etc all go in here)</li>\n<li>Write v1 of the <code class=\"notranslate\">PostgresBackend</code></li>\n<li>Write a one-time export script from Mongo -&gt; Postgres (maybe even run it automatically if the right ENV is set?)</li>\n</ol>\n<p dir=\"auto\">It's quite high-effort but that's how I would do it -- I think getting into the weeds on how to structure the Postgres tables might be a little bit premature.</p>\n<p dir=\"auto\">This way, if someone comes along and says they want to support BigQuery or whatever for some reason -- you can easily tell them \"sure, just write an engine and we'll consider including it\", and see if they do it.</p>",
        "createdAt": "2022-08-04T23:49:42Z",
        "replies": null
      },
      {
        "author": {
          "name": "gnusupport",
          "avatar": "https://avatars.githubusercontent.com/u/24825387?u=2b0ba45b321cca45de7bde0f0fe6348b2e41ea28&v=4",
          "url": "https://github.com/gnusupport"
        },
        "body": "<div class=\"email-fragment\">* James Mikrut ***@***.***&gt; [2022-08-04 18:33]:</div>\n<div class=\"email-quoted-reply\"> Hey <a class=\"user-mention\" href=\"https://github.com/gnusupport\">@gnusupport</a> — I have also been around SQL for over a decade and I understand that storing lots of content in JSON columns is bad design. That is why I wrote what I wrote—describing how it is **_not ideal_**.\n\n I think we are saying the exact same thing.</div>\n<div class=\"email-fragment\">Yes, that is same thing I mean.</div>",
        "createdAt": "2022-08-05T14:59:45Z",
        "replies": null
      },
      {
        "author": {
          "name": "taismassaro",
          "avatar": "https://avatars.githubusercontent.com/u/16339834?u=4bedb20effcee113be6d23c57ddbc1c8d0c62de0&v=4",
          "url": "https://github.com/taismassaro"
        },
        "body": "<p dir=\"auto\">hey there, I was wondering if there are any updates on this topic.<br>\nmy team is working on rewriting the legacy custom CMS (PHP + Postgres) that powers our product (medical content) and I found Payload today while researching headless CMS options. it sounds quite promising, but unfortunately MongoDB as a hard requirement could be seen as a big limitation for us to even try it out.</p>\n<p dir=\"auto\">would appreciate if you can share what your timeline looks like so we can consider it. thanks!</p>",
        "createdAt": "2022-11-23T19:53:13Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/taismassaro/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/taismassaro\">@taismassaro</a> — we currently have this marked as <code class=\"notranslate\">roadmap-priority-3</code>. We want to get through roadmap items with priority 1 and 2 before moving on to priority 3, so it will be a bit yet. It's certainly important to us, but we have some underlying stuff to do before getting to this work.</p>",
            "createdAt": "2022-11-23T20:07:52Z"
          },
          {
            "author": {
              "name": "taismassaro",
              "avatar": "https://avatars.githubusercontent.com/u/16339834?u=4bedb20effcee113be6d23c57ddbc1c8d0c62de0&v=4",
              "url": "https://github.com/taismassaro"
            },
            "body": "<p dir=\"auto\">hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> thanks a lot for the answer! I've been told the tech stack can be defined by the solution we find if it fits our requirements, so I'll keep looking into it! I just joined the Discord as well, will bring any further questions there!</p>",
            "createdAt": "2022-11-29T14:52:29Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Of course! If you have ANY questions at all, feel free to ping me directly on Discord. The team and I would be happy to help!</p>",
            "createdAt": "2022-11-29T14:58:17Z"
          }
        ]
      },
      {
        "author": {
          "name": "bastiW",
          "avatar": "https://avatars.githubusercontent.com/u/7667003?v=4",
          "url": "https://github.com/bastiW"
        },
        "body": "<p dir=\"auto\">I really would like to have the functionality of <strong>data migration</strong> in Payloadcms. I am not so much lacking in a wide range of different databases.  I mostly miss an easy way to migrate data.  E. G. There should be a default approach when renaming a field.</p>\n<p dir=\"auto\">The lack of this functionality makes it hard to develop an enterprise product aside from POCs.</p>\n<ul dir=\"auto\">\n<li>This is what makes Django in the Python world strong.</li>\n<li>Prisma JS also handles this very effectively.</li>\n</ul>\n<p dir=\"auto\">So I would love to see that Payload cms go all in for <strong>Prisma</strong>.</p>",
        "createdAt": "2022-12-07T17:38:44Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Prisma is 100% at the top of our radar for sure! Keep an eye out!</p>",
            "createdAt": "2022-12-22T14:25:29Z"
          }
        ]
      },
      {
        "author": {
          "name": "UsVfxArtia",
          "avatar": "https://avatars.githubusercontent.com/u/112181162?v=4",
          "url": "https://github.com/UsVfxArtia"
        },
        "body": "<p dir=\"auto\">Lol, it's funny that this is second in priority, and upload progress bar is first ))))))))</p>",
        "createdAt": "2022-12-21T09:08:57Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">It's easy to come in and evaluate our prioritization efforts at a very surface level but there are many, many reasons why this is marked as <code class=\"notranslate\">priority-2</code> at the moment.</p>",
            "createdAt": "2022-12-22T14:24:16Z"
          }
        ]
      },
      {
        "author": {
          "name": "kaitwalla",
          "avatar": "https://avatars.githubusercontent.com/u/3107030?u=939ac98372e99edb1e3ef0f5435c6b2771460ad6&v=4",
          "url": "https://github.com/kaitwalla"
        },
        "body": "<p dir=\"auto\">Just throwing a note in - totally understand about prioritization but wanted to raise my hand as another \"I love everything about this CMS but MongoDB is a hard pass\" user here!</p>",
        "createdAt": "2022-12-24T05:28:34Z",
        "replies": [
          {
            "author": {
              "name": "charkour",
              "avatar": "https://avatars.githubusercontent.com/u/33156025?u=9a8734e319690ab1a56112fa9414693f5b6adad3&v=4",
              "url": "https://github.com/charkour"
            },
            "body": "<p dir=\"auto\">Very well said, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/kaitwalla/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kaitwalla\">@kaitwalla</a></p>",
            "createdAt": "2023-02-02T15:06:36Z"
          }
        ]
      },
      {
        "author": {
          "name": "matthijs166",
          "avatar": "https://avatars.githubusercontent.com/u/31346561?u=0052baa5f91241e9d6be3a3387ef8912f4231be6&v=4",
          "url": "https://github.com/matthijs166"
        },
        "body": "<p dir=\"auto\">It is for every project also always a pain in the ass to set up MongoDB especial for junior developers. We have some docker configs for it, but adds more complexity to the project.</p>\n<p dir=\"auto\">We are now looking into <a href=\"https://github.com/nodkz/mongodb-memory-server\">https://github.com/nodkz/mongodb-memory-server</a> for local development. Maybe an idea to include this standard in payload? This makes the barrier to enter for hobby projects lower and the setup for local development less complex.</p>\n<p dir=\"auto\">We also use N8N in a lot of projects (they use Prisma) and there we have the option to use SQLite, it's one command, and you got it a n8n setup running.</p>",
        "createdAt": "2023-01-04T16:13:52Z",
        "replies": null
      },
      {
        "author": {
          "name": "aleksei-a-savitski",
          "avatar": "https://avatars.githubusercontent.com/u/3635715?v=4",
          "url": "https://github.com/aleksei-a-savitski"
        },
        "body": "<p dir=\"auto\">The usage of the NoSql database is an advantage of Payload CMS. It simplifies deep object nesting a lot. As a user who switched from SQL-based CMS, I am delighted with this design choice. SQL-based CMS should abstract away the need to think about relations, but it is impossible. You still should assume the database structure for complex content types. So NoSql is a better choice for a CMS that allows developers to create custom content types.</p>\n<p dir=\"auto\">I also did not have trouble setting up MongoDB for local development. The free remote instance is a perfect choice for the first try.</p>",
        "createdAt": "2023-01-06T09:41:13Z",
        "replies": [
          {
            "author": {
              "name": "fm-swe",
              "avatar": "https://avatars.githubusercontent.com/u/97878908?v=4",
              "url": "https://github.com/fm-swe"
            },
            "body": "<p dir=\"auto\">I think you spelled <code class=\"notranslate\">botch</code> wrong <g-emoji class=\"g-emoji\" alias=\"stuck_out_tongue_winking_eye\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png\">😜</g-emoji></p>",
            "createdAt": "2023-01-06T10:52:19Z"
          },
          {
            "author": {
              "name": "CanRau",
              "avatar": "https://avatars.githubusercontent.com/u/5196971?v=4",
              "url": "https://github.com/CanRau"
            },
            "body": "<p dir=\"auto\">Hmm I still think Postgres gives you better relations while also giving you jsonb columns for deeply nested &amp; indexable structures so still don't (yet) see the downside of relational here</p>",
            "createdAt": "2023-01-06T12:31:51Z"
          }
        ]
      },
      {
        "author": {
          "name": "ssyberg",
          "avatar": "https://avatars.githubusercontent.com/u/1661046?v=4",
          "url": "https://github.com/ssyberg"
        },
        "body": "<p dir=\"auto\">Just want to throw two precedents in the mix here in case people are not aware of them. I've not done a deep dive in either of these, but they seem closely related to the potential paths so might be worth taking a closer look at these projects and learning what we can...</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">KeystoneJS has a lot of similarities with Payload (though we are much more excited by Payload for a number of reasons) and it may be worth taking some time looking at how they've integrated Prisma (the little tinkering I did was very promising)</p>\n</li>\n<li>\n<p dir=\"auto\">This is probably much more interesting for this thread - a review of the decisions Statamic made when they implemented a database driver for their flatfile based content model has a lot of parallels with some of the paths suggested above (Statamic effectively goes the put it all in a JSON field route). From my pretty limited use of the Statamic database driver, I might consider their implementation an anti-pattern. Though it solves the issue of a large number of records that the flatfile solution just can't support, it doesn't address most of the underlying reasons why many of us prefer a RDBMS. The main things that come to mind that make us very nervous with Mongo: relationships and the associated complex queries, and search (and relatedly usage of opensearch/elasticsearch).</p>\n</li>\n</ol>",
        "createdAt": "2023-01-11T19:13:56Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">100% agreed to everything you've said.</p>\n<p dir=\"auto\">I personally really respect Keystone a lot. They would be my go-to solution if Payload did not exist but their implementation of Prisma does create some hard-to-accomplish things that Payload supports, like our <code class=\"notranslate\">blocks</code> field, <code class=\"notranslate\">array</code> field, <code class=\"notranslate\">group</code> field, etc.</p>\n<p dir=\"auto\">I do agree that dropping everything in a JSON field is an anti-pattern for sure. For us to continue to support these complex nested field types, we have 2 options:</p>\n<ol dir=\"auto\">\n<li>Over-use a JSON field (yuck, not gonna happen)</li>\n<li>Create unique tables for every level of \"nested\" fields.... harder, but better I think.</li>\n</ol>\n<p dir=\"auto\">It'll be a lot of work but I know exactly what you're referring to with all this and this is a good discussion.</p>\n<p dir=\"auto\">However, in the meantime, I do think that Payload's implementation of relationships on top of Mongo is actually a pretty beautiful thing. We outperformed Directus by 3x and Strapi by 7x when running an identical heavy relationship test, and both Strapi and Directus were on Postgres. So I am still honestly a big supporter of Mongo, but SQL is certainly coming.</p>\n<p dir=\"auto\">Very excited for Q2 when this work starts!</p>",
            "createdAt": "2023-01-11T19:18:35Z"
          },
          {
            "author": {
              "name": "ssyberg",
              "avatar": "https://avatars.githubusercontent.com/u/1661046?v=4",
              "url": "https://github.com/ssyberg"
            },
            "body": "<p dir=\"auto\">Just to clarify, I think at the block/nested field level a JSON field is actually fine (though not ideal I agree) - the Statamic solution puts <em>the entire record data</em> in a single JSON field (yuck!). Every CMS I've worked with that supports a dynamic field like <code class=\"notranslate\">blocks</code> (and nearly everyone does now) stores the data in a single JSON field and I think to keep it all kinds of dynamic and not suffer death by 1000 joins, it may be an ok solution (yes makes migrations very hard, lots of yucky implications) - but again there's a lot of anti-patterns out there to improve on while still harnessing JSON for those dynamic fields (see crafts matrix field, wagtails streamfield, etc).</p>\n<p dir=\"auto\">We use Wagtail extensively and their Streamblock is also a JSON field and tbh it's a mess. That said I think if the CMS was smart about providing helper utilities that effectively turned those fields into \"tables on the fly\" you could make them super manageable AND migratable. I don't want to downplay the difficulty in solving that, but I think it's on par with the difficulty of supporting a fully table based dynamic field type.</p>",
            "createdAt": "2023-01-11T19:26:44Z"
          },
          {
            "author": {
              "name": "ssyberg",
              "avatar": "https://avatars.githubusercontent.com/u/1661046?v=4",
              "url": "https://github.com/ssyberg"
            },
            "body": "<blockquote>\n<p dir=\"auto\">However, in the meantime, I do think that Payload's implementation of relationships on top of Mongo is actually a pretty beautiful thing. We outperformed Directus by 3x and Strapi by 7x when running an identical heavy relationship test, and both Strapi and Directus were on Postgres. So I am still honestly a big supporter of Mongo, but SQL is certainly coming.</p>\n</blockquote>\n<p dir=\"auto\">That is very compelling - I look forward to really kicking the tires on this, perhaps my fears are for naught!</p>",
            "createdAt": "2023-01-11T19:27:31Z"
          },
          {
            "author": {
              "name": "fm-swe",
              "avatar": "https://avatars.githubusercontent.com/u/97878908?v=4",
              "url": "https://github.com/fm-swe"
            },
            "body": "<p dir=\"auto\">coming from over 10 years of TYPO3: do use JSON fields for special content like blocks, array and group, creating tables and fields for every possible combination is a pain and usually even less performant (mostly because developers other than core team do not understand the structure anyway)</p>",
            "createdAt": "2023-02-03T09:06:01Z"
          },
          {
            "author": {
              "name": "ssyberg",
              "avatar": "https://avatars.githubusercontent.com/u/1661046?v=4",
              "url": "https://github.com/ssyberg"
            },
            "body": "<blockquote>\n<p dir=\"auto\">(mostly because developers other than core team do not understand the structure anyway)</p>\n</blockquote>\n<p dir=\"auto\">Totally, this problem is rampant across CMS' that support dynamic fields and it's <em>extremely solvable</em>. I'm floored by the lack of documentation on the streamfield structure in wagtail. Just a paragraph or two would have saved us about a week of development time on our most recent project.</p>\n<p dir=\"auto\">Looks like they are catching on though, adding migration support/helper utils is now on the near release roadmap for wagtail.</p>",
            "createdAt": "2023-02-03T15:47:17Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">This conversation is super important. I can relate to everything that's been said above. Here are my thoughts:</p>\n<ul dir=\"auto\">\n<li>We are never going to plop entire docs in a Postgres JSON column (nasty)</li>\n<li>I don't even want to plop entire blocks / array fields in a JSON col. If we do this, it will be because we had to.</li>\n<li>The goal will be to do a different table per \"dynamic\" field, and build traditional SQL table structures for all other fields. The problem will be that we'll need to do lots of joins here, but hey, that's the name of the game in SQL. If performance suffers for your schema due to too many joins, go back to Mongo.</li>\n</ul>\n<p dir=\"auto\">What do we think?</p>",
            "createdAt": "2023-02-03T16:04:58Z"
          },
          {
            "author": {
              "name": "ssyberg",
              "avatar": "https://avatars.githubusercontent.com/u/1661046?v=4",
              "url": "https://github.com/ssyberg"
            },
            "body": "<p dir=\"auto\">IMO the joins will quickly get out of hand and given that these fields are not actually representing \"related content\" but rather \"structured\" content I'm just not convinced there's a big advantage to going the per table route.  The table route will also inevitably expose new problems that aren't as obvious since most CMS' don't do it this way, we just don't have as many examples to pick apart and see their shortcomings.</p>\n<p dir=\"auto\">Overall I fear going from json to table based ends up being complexity shuffling more than complexity minimization. If it were up to me I think I would learn from the mistakes of the existing CMS' by creating a JSON based implementation with extremely strong documentation of the internal structure and robust utilities to support data migrations and nested relationships. There also may be a hybrid approach wherein you can specify some block types to be a true table based relationship while most block content is just structured content (this is hazy in my vision but I think it's solvable - e.g. the data for these special blocks are stored in a separate table and a key can be stored in the json, but this allows reuse of that content as necessary - we have a similar pattern to this in wagtail using streamfileds --&gt; snippet chooser, but it's pretty janky).</p>",
            "createdAt": "2023-02-03T16:19:22Z"
          }
        ]
      },
      {
        "author": {
          "name": "ssyberg",
          "avatar": "https://avatars.githubusercontent.com/u/1661046?v=4",
          "url": "https://github.com/ssyberg"
        },
        "body": "<p dir=\"auto\">The latest wagtail minor release adds dynamic field migration utilities: <a href=\"https://docs.wagtail.org/en/stable/advanced_topics/streamfield_migrations.html#making-structural-changes\" rel=\"nofollow\">https://docs.wagtail.org/en/stable/advanced_topics/streamfield_migrations.html#making-structural-changes</a></p>\n<p dir=\"auto\">I think this direction makes a lot of sense overall and really addresses some of the major pain points with dynamic fields.</p>",
        "createdAt": "2023-02-10T13:52:50Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "payload cms scheduler",
    "body": "<p dir=\"auto\">I would ask if there is a standard approach for automatic, reoccurring actions in Payload? For example, when user is inactive since 7 days, deactivate him or similar things.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2053",
    "id": "2053",
    "createdAt": "2023-02-10T10:40:06Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "dawidmachon",
      "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
      "url": "https://github.com/dawidmachon"
    },
    "comments": [
      {
        "author": {
          "name": "ChrisGV04",
          "avatar": "https://avatars.githubusercontent.com/u/47041342?u=76f483c754eb2506445bb063e3c07c3b5935d384&v=4",
          "url": "https://github.com/ChrisGV04"
        },
        "body": "<p dir=\"auto\">I believe there's no built-in way to do that on Payload, however, since it's built on top of express and Node.js you are able to implement cron jobs and use the Payload Local API to achieve what you're looking for.</p>\n<p dir=\"auto\">You can look into <a href=\"https://www.npmjs.com/package/node-cron\" rel=\"nofollow\"><code class=\"notranslate\">node-cron</code></a> for a simple cron job implementation in Node.js.</p>\n<p dir=\"auto\">For the use case you mentioned, maybe you can run a cron job once at the beginning of every day to check for any inactive users since 7 days or more and suspend them using the Payload Local API.</p>",
        "createdAt": "2023-02-10T12:18:37Z",
        "replies": null
      },
      {
        "author": {
          "name": "denolfe",
          "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
          "url": "https://github.com/denolfe"
        },
        "body": "<p dir=\"auto\">We use node-cron in our public demo to clear the database and re-seed data every hour. Might be a good example to look at. <a href=\"https://github.com/payloadcms/public-demo/tree/master/src%2Fcron\">https://github.com/payloadcms/public-demo/tree/master/src%2Fcron</a></p>",
        "createdAt": "2023-02-10T12:29:52Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "denolfe",
        "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
        "url": "https://github.com/denolfe"
      },
      "body": "<p dir=\"auto\">We use node-cron in our public demo to clear the database and re-seed data every hour. Might be a good example to look at. <a href=\"https://github.com/payloadcms/public-demo/tree/master/src%2Fcron\">https://github.com/payloadcms/public-demo/tree/master/src%2Fcron</a></p>",
      "createdAt": "2023-02-10T12:29:52Z",
      "chosenAt": "2023-02-10T20:35:46Z",
      "chosenBy": "denolfe"
    }
  },
  {
    "title": "Duplicate \"graphql\" modules cannot be used at the same time since different versions...",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">I'm using payload in a nx monorepo, I met this error after upgrading payload to the newest version.  And I found it <a href=\"https://github.com/payloadcms/payload/commit/57f5f5ec439b5aee1d46bff0bf31aac6148f16b2\">was upgraded</a> in 1.4.0.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nx run seo-payload:serve\n\n &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 283 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 11.7 KiB [entry] [rendered]\nwebpack compiled successfully (1799b20c209ec786)\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:388:27\n[02:01:19] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} &quot;${stringifiedValue}&quot; from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType &quot;DateTime&quot; from another module or realm.\n\nEnsure that there is only one instance of &quot;graphql&quot; in the node_modules\ndirectory. If different versions of &quot;graphql&quot; are the dependencies of other\nrelied on modules, use &quot;resolutions&quot; to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate &quot;graphql&quot; modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:101:23\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:60:38)\n    at registerSchema (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/graphql/registerSchema.js:58:24)\n    at init (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/init.js:79:38)\n^C%\"><pre class=\"notranslate\"><code class=\"notranslate\">nx run seo-payload:serve\n\n &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 283 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 11.7 KiB [entry] [rendered]\nwebpack compiled successfully (1799b20c209ec786)\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nDebugger listening on ws://localhost:9229/20d445a8-52d6-422f-9523-b6edace32404\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:388:27\n[02:01:19] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType \"DateTime\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:101:23\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/collections/graphql/init.js:60:38)\n    at registerSchema (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/graphql/registerSchema.js:58:24)\n    at init (/Users/stupidism/Documents/jerry-serverless/node_modules/payload/dist/init.js:79:38)\n^C%\n</code></pre></div>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n<p dir=\"auto\"><a href=\"https://github.com/Stupidism/nx-payload-demo\">https://github.com/Stupidism/nx-payload-demo</a>.</p>\n\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">git clone git@github.com:Stupidism/nx-payload-demo.git</code></li>\n<li><code class=\"notranslate\">PUPPETEER_SKIP_DOWNLOAD=1 CYPRESS_INSTALL_BINARY=0 npm install</code></li>\n<li><code class=\"notranslate\">nx run seo-payload:serve</code></li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 6.7 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 2.85 KiB [entry] [rendered]\nwebpack compiled successfully (c07d01079b667599)\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:115:27\n[13:36:20] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} &quot;${stringifiedValue}&quot; from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType &quot;DateTime&quot; from another module or realm.\n\nEnsure that there is only one instance of &quot;graphql&quot; in the node_modules\ndirectory. If different versions of &quot;graphql&quot; are the dependencies of other\nrelied on modules, use &quot;resolutions&quot; to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate &quot;graphql&quot; modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:96:15\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:42:36)\n    at registerSchema (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/graphql/registerSchema.ts:36:18)\n    at init (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/init.ts:89:19)\n\"><pre class=\"notranslate\"><code class=\"notranslate\"> &gt;  NX   USING REMOTE CACHE\n\n\n&gt; nx run seo-payload:serve\n\nchunk (runtime: config) config.js (config) 6.7 KiB [entry] [rendered]\nchunk (runtime: main) main.js (main) 2.85 KiB [entry] [rendered]\nwebpack compiled successfully (c07d01079b667599)\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nDebugger listening on ws://localhost:9229/2a44fcbc-77c4-42f7-9399-19de2f2197dd\nFor help, see: https://nodejs.org/en/docs/inspector\nbody-parser deprecated undefined extended: provide extended option dist/apps/seo-payload/main.js:115:27\n[13:36:20] INFO (payload): Starting Payload...\n\n/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n                  ^\nError: Cannot use GraphQLScalarType \"DateTime\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.\n    at instanceOf (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/jsutils/instanceOf.js:44:19)\n    at isScalarType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:117:37)\n    at isType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:92:5)\n    at isNullableType (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:440:10)\n    at new GraphQLNonNull (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/node_modules/graphql/type/definition.js:394:5)\n    at /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:96:15\n    at Array.forEach (&lt;anonymous&gt;)\n    at initCollectionsGraphQL (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/collections/graphql/init.ts:42:36)\n    at registerSchema (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/graphql/registerSchema.ts:36:18)\n    at init (/Users/stupidism/Documents/demos/nx-payload-demo/node_modules/payload/src/init.ts:89:19)\n\n</code></pre></div>\n<h2 dir=\"auto\">Other Details</h2>\n\n",
    "url": "https://github.com/payloadcms/payload/discussions/1856",
    "id": "1856",
    "createdAt": "2023-01-12T02:04:54Z",
    "upvotes": 1,
    "commentTotal": 6,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Stupidism/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Stupidism\">@Stupidism</a> — this is actually not a bug with Payload and more of a restriction with GraphQL itself.</p>\n<p dir=\"auto\">I assume that this is related to a custom GraphQL mutation or query that you have written. If you import types directly from a GraphQL dependency, this can arise.</p>\n<p dir=\"auto\">Notice in our docs how we provide <code class=\"notranslate\">GraphQL</code> as an argument to custom queries and mutations - <em><strong>this is why.</strong></em>  This is literally the same exact GraphQL dependency that Payload uses, so if you use types coming from that GraphQL argument, you will not see this issue.</p>\n<p dir=\"auto\">Otherwise, if you follow the suggested GraphQL solution in the error message, and specify a <code class=\"notranslate\">resolutions</code> to GraphQL in your <code class=\"notranslate\">package.json</code>, that should allow you to dodge this issue as well.</p>\n<p dir=\"auto\">I will convert this to a discussion and we can keep convo going there. But this is expected and there is little that Payload can do to rectify this, unfortunately. Got me a few times myself when having multiple copies / versions of GraphQL installed.</p>",
        "createdAt": "2023-01-12T03:25:57Z",
        "replies": [
          {
            "author": {
              "name": "Stupidism",
              "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
              "url": "https://github.com/Stupidism"
            },
            "body": "<p dir=\"auto\">But actually I didn't import any graphql types directly or write any custom queries or mutations.</p>\n<p dir=\"auto\">I found this library very suspicious in the dependency list: <code class=\"notranslate\">express-graphql</code> and they actuall have a issue about supporting graphql 16:</p>\n<p dir=\"auto\"><a aria-label=\"Issue #797\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1087949567\" data-permission-text=\"Title is private\" data-url=\"https://github.com/graphql/express-graphql/issues/797\" data-hovercard-type=\"issue\" data-hovercard-url=\"/graphql/express-graphql/issues/797/hovercard\" href=\"https://github.com/graphql/express-graphql/issues/797\">graphql/express-graphql#797</a></p>\n<p dir=\"auto\">And since the library is deprecated, some of the repliers say they switched to another library <code class=\"notranslate\">graphql-helix</code>: <a aria-label=\"Issue #797\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1087949567\" data-permission-text=\"Title is private\" data-url=\"https://github.com/graphql/express-graphql/issues/797\" data-hovercard-type=\"issue\" data-hovercard-url=\"/graphql/express-graphql/issues/797/hovercard?comment_id=1131300228&amp;comment_type=issue_comment\" href=\"https://github.com/graphql/express-graphql/issues/797#issuecomment-1131300228\">graphql/express-graphql#797 (comment)</a></p>\n<p dir=\"auto\">PS: I'm trying to create a repro repo.</p>",
            "createdAt": "2023-01-12T04:16:35Z"
          },
          {
            "author": {
              "name": "TimHal",
              "avatar": "https://avatars.githubusercontent.com/u/12948708?u=5ca72b1bf33638e74ba0cdda5af7908e38527377&v=4",
              "url": "https://github.com/TimHal"
            },
            "body": "<p dir=\"auto\">I would argue this is at least partially a payload-related bug as this breaks the npm-based installation.<br>\nNPM does come with overrides <a href=\"https://github.com/npm/cli/releases/tag/v8.3.0\">https://github.com/npm/cli/releases/tag/v8.3.0</a> but simply installing/updating payload as before is not possible anymore.</p>\n<p dir=\"auto\">Workaround:</p>\n<ul dir=\"auto\">\n<li>delete <code class=\"notranslate\">node_modules</code></li>\n<li>install with yarn</li>\n</ul>",
            "createdAt": "2023-01-14T20:23:58Z"
          },
          {
            "author": {
              "name": "falko100",
              "avatar": "https://avatars.githubusercontent.com/u/11974977?u=b9a2ba9401d207496f5f0541746ca40caa618a3e&v=4",
              "url": "https://github.com/falko100"
            },
            "body": "<p dir=\"auto\">I'm having the same issue on npm. Works fine on yarn, but my entire CI/CD is done with npm..<br>\nIs there a solution for this?</p>",
            "createdAt": "2023-01-22T20:00:15Z"
          }
        ]
      },
      {
        "author": {
          "name": "sifferhans",
          "avatar": "https://avatars.githubusercontent.com/u/18753964?u=2f3ec26de308099f2b0ce3be7b3f114a7f701baf&v=4",
          "url": "https://github.com/sifferhans"
        },
        "body": "<p dir=\"auto\">I have the same problem. I tried using Payload in a monorepo together with a Nuxt app, and I get this error. I haven't installed or used anything graphql-related in the Nuxt app, so I'm quite confused</p>",
        "createdAt": "2023-02-09T08:44:27Z",
        "replies": null
      },
      {
        "author": {
          "name": "Stupidism",
          "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
          "url": "https://github.com/Stupidism"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> Sorry for the late response. Here's the repro repo: <a href=\"https://github.com/Stupidism/nx-payload-demo\">https://github.com/Stupidism/nx-payload-demo</a>. Can you take a look? This is purely an empty project but with the dependencies from my real project.</p>",
        "createdAt": "2023-02-09T13:37:44Z",
        "replies": [
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">I reproduced it from your steps above. What confuses me is why is this package manager specific? Either way, it does seem we need to investigate replacing <code class=\"notranslate\">express-graphql</code> at some point.</p>",
            "createdAt": "2023-02-09T17:47:01Z"
          },
          {
            "author": {
              "name": "Stupidism",
              "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
              "url": "https://github.com/Stupidism"
            },
            "body": "<p dir=\"auto\">Thank you <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DanRibbens/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DanRibbens\">@DanRibbens</a> . It's a huge mono repo. We have about 50 apps and 50 libs(I only contribute to 3 apps and 5 libs). The dependencies are complicated too as you can tell from the package.json. I don't think we can switch to yarn or pnpm with low cost.</p>",
            "createdAt": "2023-02-10T05:23:40Z"
          },
          {
            "author": {
              "name": "Stupidism",
              "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
              "url": "https://github.com/Stupidism"
            },
            "body": "<p dir=\"auto\">I think <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/crocq1/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/crocq1\">@crocq1</a> 's <a href=\"https://github.com/payloadcms/payload/discussions/1856#discussioncomment-4919054\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1856/hovercard?comment_id=4919054\">workaround</a> already helped me with this issue. But the new swc issue is killing me.</p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DanRibbens/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DanRibbens\">@DanRibbens</a> Do you have any idea why swc-loader has this error? Is it also a version mismatch for swc?</p>",
            "createdAt": "2023-02-10T05:32:41Z"
          }
        ]
      },
      {
        "author": {
          "name": "crocq1",
          "avatar": "https://avatars.githubusercontent.com/u/40235670?v=4",
          "url": "https://github.com/crocq1"
        },
        "body": "<p dir=\"auto\">Do <strong>npm ls graphql</strong> to see the different versions.</p>\n<p dir=\"auto\">Then try to add overrides in package.json (<a href=\"https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides\" rel=\"nofollow\">https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides</a>)</p>\n<p dir=\"auto\">For example I did this :</p>\n<p dir=\"auto\"><code class=\"notranslate\">\"overrides\": { \"graphql@&gt;15.7.0 &lt;16.7.0\": \"^15.8.0\" }</code></p>",
        "createdAt": "2023-02-09T13:44:46Z",
        "replies": [
          {
            "author": {
              "name": "Stupidism",
              "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
              "url": "https://github.com/Stupidism"
            },
            "body": "<p dir=\"auto\">I tried this solution but it didn't work.</p>",
            "createdAt": "2023-02-09T13:51:25Z"
          },
          {
            "author": {
              "name": "Stupidism",
              "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
              "url": "https://github.com/Stupidism"
            },
            "body": "<p dir=\"auto\">The result of npm ls graphql is:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"0 verbose cli /Users/stupidism/.nvm/versions/node/v18.13.0/bin/node /Users/stupidism/.nvm/versions/node/v18.13.0/bin/npm\n1 info using npm@8.19.3\n2 info using node@v18.13.0\n3 timing npm:load:whichnode Completed in 0ms\n4 timing config:load:defaults Completed in 1ms\n5 timing config:load:file:/Users/stupidism/.nvm/versions/node/v18.13.0/lib/node_modules/npm/npmrc Completed in 0ms\n6 timing config:load:builtin Completed in 0ms\n7 timing config:load:cli Completed in 1ms\n8 timing config:load:env Completed in 0ms\n9 timing config:load:file:/Users/stupidism/Documents/demos/nx-payload-demo/.npmrc Completed in 2ms\n10 timing config:load:project Completed in 7ms\n11 timing config:load:file:/Users/stupidism/.npmrc Completed in 0ms\n12 timing config:load:user Completed in 0ms\n13 timing config:load:file:/Users/stupidism/.nvm/versions/node/v18.13.0/etc/npmrc Completed in 0ms\n14 timing config:load:global Completed in 0ms\n15 timing config:load:validate Completed in 1ms\n16 timing config:load:credentials Completed in 0ms\n17 timing config:load:setEnvs Completed in 1ms\n18 timing config:load Completed in 11ms\n19 timing npm:load:configload Completed in 11ms\n20 timing npm:load:mkdirpcache Completed in 0ms\n21 timing npm:load:mkdirplogs Completed in 0ms\n22 verbose title npm ls graphql error.log\n23 verbose argv &quot;ls&quot; &quot;graphql&quot; &quot;error.log&quot;\n24 timing npm:load:setTitle Completed in 7ms\n25 timing config:load:flatten Completed in 1ms\n26 timing npm:load:display Completed in 2ms\n27 verbose logfile logs-max:10 dir:/Users/stupidism/.npm/_logs\n28 verbose logfile /Users/stupidism/.npm/_logs/2023-02-09T13_53_59_850Z-debug-0.log\n29 timing npm:load:logFile Completed in 4ms\n30 timing npm:load:timers Completed in 0ms\n31 timing npm:load:configScope Completed in 0ms\n32 timing npm:load Completed in 24ms\n33 timing arborist:ctor Completed in 0ms\n34 silly logfile start cleaning logs, removing 1 files\n35 silly logfile done cleaning log files\n36 verbose shrinkwrap failed to load node_modules/.package-lock.json missing from node_modules: @types/jest-puppeteer\n37 timing command:ls Completed in 5403ms\n38 verbose stack Error: invalid: graphql@15.4.0 /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/graphql\n38 verbose stack     at LS.exec (/Users/stupidism/.nvm/versions/node/v18.13.0/lib/node_modules/npm/lib/commands/ls.js:205:9)\n38 verbose stack     at async module.exports (/Users/stupidism/.nvm/versions/node/v18.13.0/lib/node_modules/npm/lib/cli.js:78:5)\n39 verbose cwd /Users/stupidism/Documents/demos/nx-payload-demo\n40 verbose Darwin 21.6.0\n41 verbose node v18.13.0\n42 verbose npm  v8.19.3\n43 error code ELSPROBLEMS\n44 error invalid: graphql@15.4.0 /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/graphql\n45 verbose exit 1\n46 timing npm Completed in 5525ms\n47 verbose code 1\n48 error A complete log of this run can be found in:\n48 error     /Users/stupidism/.npm/_logs/2023-02-09T13_53_59_850Z-debug-0.log\n\"><pre class=\"notranslate\"><code class=\"notranslate\">0 verbose cli /Users/stupidism/.nvm/versions/node/v18.13.0/bin/node /Users/stupidism/.nvm/versions/node/v18.13.0/bin/npm\n1 info using npm@8.19.3\n2 info using node@v18.13.0\n3 timing npm:load:whichnode Completed in 0ms\n4 timing config:load:defaults Completed in 1ms\n5 timing config:load:file:/Users/stupidism/.nvm/versions/node/v18.13.0/lib/node_modules/npm/npmrc Completed in 0ms\n6 timing config:load:builtin Completed in 0ms\n7 timing config:load:cli Completed in 1ms\n8 timing config:load:env Completed in 0ms\n9 timing config:load:file:/Users/stupidism/Documents/demos/nx-payload-demo/.npmrc Completed in 2ms\n10 timing config:load:project Completed in 7ms\n11 timing config:load:file:/Users/stupidism/.npmrc Completed in 0ms\n12 timing config:load:user Completed in 0ms\n13 timing config:load:file:/Users/stupidism/.nvm/versions/node/v18.13.0/etc/npmrc Completed in 0ms\n14 timing config:load:global Completed in 0ms\n15 timing config:load:validate Completed in 1ms\n16 timing config:load:credentials Completed in 0ms\n17 timing config:load:setEnvs Completed in 1ms\n18 timing config:load Completed in 11ms\n19 timing npm:load:configload Completed in 11ms\n20 timing npm:load:mkdirpcache Completed in 0ms\n21 timing npm:load:mkdirplogs Completed in 0ms\n22 verbose title npm ls graphql error.log\n23 verbose argv \"ls\" \"graphql\" \"error.log\"\n24 timing npm:load:setTitle Completed in 7ms\n25 timing config:load:flatten Completed in 1ms\n26 timing npm:load:display Completed in 2ms\n27 verbose logfile logs-max:10 dir:/Users/stupidism/.npm/_logs\n28 verbose logfile /Users/stupidism/.npm/_logs/2023-02-09T13_53_59_850Z-debug-0.log\n29 timing npm:load:logFile Completed in 4ms\n30 timing npm:load:timers Completed in 0ms\n31 timing npm:load:configScope Completed in 0ms\n32 timing npm:load Completed in 24ms\n33 timing arborist:ctor Completed in 0ms\n34 silly logfile start cleaning logs, removing 1 files\n35 silly logfile done cleaning log files\n36 verbose shrinkwrap failed to load node_modules/.package-lock.json missing from node_modules: @types/jest-puppeteer\n37 timing command:ls Completed in 5403ms\n38 verbose stack Error: invalid: graphql@15.4.0 /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/graphql\n38 verbose stack     at LS.exec (/Users/stupidism/.nvm/versions/node/v18.13.0/lib/node_modules/npm/lib/commands/ls.js:205:9)\n38 verbose stack     at async module.exports (/Users/stupidism/.nvm/versions/node/v18.13.0/lib/node_modules/npm/lib/cli.js:78:5)\n39 verbose cwd /Users/stupidism/Documents/demos/nx-payload-demo\n40 verbose Darwin 21.6.0\n41 verbose node v18.13.0\n42 verbose npm  v8.19.3\n43 error code ELSPROBLEMS\n44 error invalid: graphql@15.4.0 /Users/stupidism/Documents/demos/nx-payload-demo/node_modules/graphql\n45 verbose exit 1\n46 timing npm Completed in 5525ms\n47 verbose code 1\n48 error A complete log of this run can be found in:\n48 error     /Users/stupidism/.npm/_logs/2023-02-09T13_53_59_850Z-debug-0.log\n\n</code></pre></div>",
            "createdAt": "2023-02-09T13:55:12Z"
          },
          {
            "author": {
              "name": "crocq1",
              "avatar": "https://avatars.githubusercontent.com/u/40235670?v=4",
              "url": "https://github.com/crocq1"
            },
            "body": "<p dir=\"auto\">Try to delete node_modules &amp; package-lock.json and then npm install<br>\nThen retry npm ls graphql</p>\n<p dir=\"auto\">You should see something like this :</p>\n<p dir=\"auto\">npm ls graphql<br>\nbackend-payload@1.0.0 C:\\projects\\backend-payload<br>\n└─┬ payload@1.6.7<br>\n├─┬ express-graphql@0.12.0<br>\n│ └── graphql@16.6.0 deduped<br>\n├─┬ graphql-query-complexity@0.12.0<br>\n│ └── graphql@16.6.0 deduped<br>\n├─┬ graphql-scalars@1.20.1<br>\n│ └── graphql@16.6.0 deduped<br>\n├─┬ graphql-type-json@0.3.2<br>\n│ └── graphql@16.6.0 deduped<br>\n└── graphql@16.6.0</p>",
            "createdAt": "2023-02-09T15:08:03Z"
          },
          {
            "author": {
              "name": "Stupidism",
              "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
              "url": "https://github.com/Stupidism"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/crocq1/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/crocq1\">@crocq1</a> I tried your workaround and get passed the original issue, but I met this issue instead:</p>\n<blockquote>\n<p dir=\"auto\">The updated commit has been pushed to the reproduce repo.</p>\n</blockquote>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ERROR in ./dist/apps/seo-payload/config.js\nModule build failed (from ./node_modules/swc-loader/src/index.js):\nError: unknown field `presets` at line 1 column 400\n\nwebpack compiled with 1 error\n\"><pre class=\"notranslate\"><code class=\"notranslate\">ERROR in ./dist/apps/seo-payload/config.js\nModule build failed (from ./node_modules/swc-loader/src/index.js):\nError: unknown field `presets` at line 1 column 400\n\nwebpack compiled with 1 error\n\n</code></pre></div>",
            "createdAt": "2023-02-10T03:59:40Z"
          }
        ]
      },
      {
        "author": {
          "name": "sifferhans",
          "avatar": "https://avatars.githubusercontent.com/u/18753964?u=2f3ec26de308099f2b0ce3be7b3f114a7f701baf&v=4",
          "url": "https://github.com/sifferhans"
        },
        "body": "<p dir=\"auto\">I migrated to <a href=\"https://pnpm.io\" rel=\"nofollow\">pnpm</a> and did <code class=\"notranslate\">pnpm install --shamefully-hoist</code> and I think that was the solution for me:)</p>",
        "createdAt": "2023-02-09T13:57:39Z",
        "replies": null
      },
      {
        "author": {
          "name": "Stupidism",
          "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
          "url": "https://github.com/Stupidism"
        },
        "body": "<p dir=\"auto\">I believe above answers about <code class=\"notranslate\">yarn</code> or <code class=\"notranslate\">pnpm</code> can solve this. But <strong>I'm in a very huge monorepo, I cannot switch to another package manager</strong>. Can anybody provide a workaround with <code class=\"notranslate\">npm</code>?</p>",
        "createdAt": "2023-02-09T14:09:41Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "About the flexibility of the relationship",
    "body": "<p dir=\"auto\">Let's start with the example in the <a href=\"https://payloadcms.com/docs/fields/relationship\" rel=\"nofollow\">relationship document</a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/217543881-64a2ea55-9213-48b1-bf53-6bd645f8652f.png\"><img width=\"882\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217543881-64a2ea55-9213-48b1-bf53-6bd645f8652f.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">By default, ObjectID is used as the value of relationship, but if I want to use other fields of the owner collection, it is very inconvenient.<br>\nSuppose the owner collection has other fields such as name, desc. How can I get the name and desc conveniently?</p>\n<p dir=\"auto\">For example, through the REST API mentioned in the documentation.</p>\n<p dir=\"auto\">I feel the above process is too cumbersome. Is there an easy way?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2041",
    "id": "2041",
    "createdAt": "2023-02-08T13:36:02Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": {
          "name": "zhounewz",
          "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
          "url": "https://github.com/zhounewz"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a>  Do you have any ideas? Thanks</p>",
        "createdAt": "2023-02-10T01:42:54Z",
        "replies": null
      },
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">Are you asking how to query a collection on the fields of a relationship?</p>\n<p dir=\"auto\">You can do that with dot notation:</p>\n<p dir=\"auto\"><code class=\"notranslate\">/api/cars?where[owner.name][equals]=Dan</code></p>\n<p dir=\"auto\">If that isn't what you're after, can you explain in more detail what is you're trying to do?</p>\n<p dir=\"auto\">Thanks!</p>",
        "createdAt": "2023-02-10T02:41:21Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Access sibling field in an array field from a custom component",
    "body": "<p dir=\"auto\">Hi! Consider I have the following collection Recipes:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { CollectionConfig } from 'payload/types';\nimport IngredientUnit from '../components/IngredientUnit';\n\nconst Recipes: CollectionConfig = {\n  slug: 'recipes',\n  admin: {\n    useAsTitle: 'name',\n  },\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n    },\n    {\n        name: 'ingredients',\n        type: 'array',\n        fields: [\n            {\n                name: 'name',\n                type: 'text'\n            },\n            {\n                name: 'quantity',\n                type: 'text'\n            },\n            {\n                name: 'unit',\n                type: 'text',\n                admin: {\n                    components: {\n                        Field: IngredientUnit\n                    }\n                }\n            }\n        ]\n    }\n  ],\n}\n\nexport default Recipes;\"><pre class=\"notranslate\"><code class=\"notranslate\">import { CollectionConfig } from 'payload/types';\nimport IngredientUnit from '../components/IngredientUnit';\n\nconst Recipes: CollectionConfig = {\n  slug: 'recipes',\n  admin: {\n    useAsTitle: 'name',\n  },\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n    },\n    {\n        name: 'ingredients',\n        type: 'array',\n        fields: [\n            {\n                name: 'name',\n                type: 'text'\n            },\n            {\n                name: 'quantity',\n                type: 'text'\n            },\n            {\n                name: 'unit',\n                type: 'text',\n                admin: {\n                    components: {\n                        Field: IngredientUnit\n                    }\n                }\n            }\n        ]\n    }\n  ],\n}\n\nexport default Recipes;\n</code></pre></div>\n<p dir=\"auto\">How can I access the 'name' field inside the custom component 'IngredientUnit'? Using 'useFormFields' I am able to access the 'title' field, but not 'name'.</p>\n<p dir=\"auto\">Thank you!!!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1900",
    "id": "1900",
    "createdAt": "2023-01-17T09:51:25Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "cerize",
      "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
      "url": "https://github.com/cerize"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cerize/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cerize\">@cerize</a> - the useForm() function will allow you to access the sibling data. Not sure how your custom field is setup but it would look something like this:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/67977755/217899734-ed752024-b426-48e3-880f-172468dcad88.png\"><img src=\"https://user-images.githubusercontent.com/67977755/217899734-ed752024-b426-48e3-880f-172468dcad88.png\" alt=\"Screen Shot 2023-02-09 at 6 05 10 PM\" style=\"max-width: 100%;\"></a></p>",
        "createdAt": "2023-02-09T18:05:21Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "JessChowdhury",
        "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
        "url": "https://github.com/JessChowdhury"
      },
      "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cerize/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cerize\">@cerize</a> - the useForm() function will allow you to access the sibling data. Not sure how your custom field is setup but it would look something like this:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/67977755/217899734-ed752024-b426-48e3-880f-172468dcad88.png\"><img src=\"https://user-images.githubusercontent.com/67977755/217899734-ed752024-b426-48e3-880f-172468dcad88.png\" alt=\"Screen Shot 2023-02-09 at 6 05 10 PM\" style=\"max-width: 100%;\"></a></p>",
      "createdAt": "2023-02-09T18:05:21Z",
      "chosenAt": "2023-02-17T18:27:32Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Access control for unpublishing",
    "body": "<p dir=\"auto\">Hello! Maybe I am missing something, but I could not find anything related to access control of the 'unpublish' action. Is it possible?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1996",
    "id": "1996",
    "createdAt": "2023-02-01T21:59:45Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "cerize",
      "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
      "url": "https://github.com/cerize"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cerize/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cerize\">@cerize</a> Hi! You can use the <code class=\"notranslate\">beforeChange</code> hook to check the document's <code class=\"notranslate\">_status</code>. If it went from <code class=\"notranslate\">published</code> to <code class=\"notranslate\">draft</code> then you can throw an API error. Something like this (untested):</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import APIError from &quot;payload/dist/errors/APIError&quot;;\n\nconst beforeChangeHook: GlobalBeforeChangeHook = async ({\n  data, // incoming data to update or create with\n  req, // full express request\n  originalDoc, // original document\n}) =&gt; {\n  if (originalDoc._status === 'published' &amp;&amp; data._status !== 'published') throw new APIError('You cannot do this!');\n  return data; // Return data to update the document with\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">APIError</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/errors/APIError\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">beforeChangeHook</span>: <span class=\"pl-smi\">GlobalBeforeChangeHook</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  data<span class=\"pl-kos\">,</span> <span class=\"pl-c\">// incoming data to update or create with</span>\n  req<span class=\"pl-kos\">,</span> <span class=\"pl-c\">// full express request</span>\n  originalDoc<span class=\"pl-kos\">,</span> <span class=\"pl-c\">// original document</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">originalDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'published'</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_status</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'published'</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">APIError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'You cannot do this!'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// Return data to update the document with</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Here are the docs for this hook: <a href=\"https://payloadcms.com/docs/hooks/globals#beforechange\" rel=\"nofollow\">https://payloadcms.com/docs/hooks/globals#beforechange</a></p>",
        "createdAt": "2023-02-01T22:10:33Z",
        "replies": [
          {
            "author": {
              "name": "cerize",
              "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
              "url": "https://github.com/cerize"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jacobsfletch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jacobsfletch\">@jacobsfletch</a> let me bug you one more time. Does a hook ever receive the _status 'changed'? It seems that if I publish a document, then make a random modification, the status goes back to 'draft' and I thought it would be 'changed': <a href=\"https://payloadcms.com/docs/versions/drafts#database-changes\" rel=\"nofollow\">https://payloadcms.com/docs/versions/drafts#database-changes</a>.  My use case is 'Do not allow changing the field x if the document was ever published.</p>",
            "createdAt": "2023-02-02T03:48:39Z"
          },
          {
            "author": {
              "name": "cerize",
              "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
              "url": "https://github.com/cerize"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jacobsfletch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jacobsfletch\">@jacobsfletch</a> there is also another scenario that would make the status go from <em>published</em> to <em>draft</em>. It's when something is published as someone just 'save draft'. So that may not be enough to distinguish 'unpublish'?</p>",
            "createdAt": "2023-02-03T22:34:07Z"
          },
          {
            "author": {
              "name": "jacobsfletch",
              "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
              "url": "https://github.com/jacobsfletch"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cerize/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cerize\">@cerize</a> I believe the <code class=\"notranslate\">changed</code> status is virtual and doesn't ever save to the db. This is because a single document is never <code class=\"notranslate\">changed</code>—they can only every be <code class=\"notranslate\">draft</code> or <code class=\"notranslate\">published</code>.</p>\n<blockquote>\n<p dir=\"auto\">It's when something is published as someone just 'save draft'. So that may not be enough to distinguish 'unpublish'?</p>\n</blockquote>\n<p dir=\"auto\">Ok so you need to prevent them from unpublishing documents, but allow them to save drafts. You're right this is tricky, it's not immediately clear to me how we'd handle these cases.</p>",
            "createdAt": "2023-02-03T22:53:29Z"
          },
          {
            "author": {
              "name": "cerize",
              "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
              "url": "https://github.com/cerize"
            },
            "body": "<p dir=\"auto\">thanks for the clarification <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jacobsfletch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jacobsfletch\">@jacobsfletch</a>! Do you know if it's in the roadmap any change that would allow to target the 'unpublish' action?</p>",
            "createdAt": "2023-02-06T16:51:31Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">You could add a <code class=\"notranslate\">hidden: true</code> field for new field named <code class=\"notranslate\">wasPublished</code> that you give a <code class=\"notranslate\">beforeChange</code> that conditionally sets the field true <code class=\"notranslate\">if (value || _status === 'published')</code>. Then in a custom validation logic function on the locked in fields you could compare the <code class=\"notranslate\">wasPublished</code> value.</p>\n<p dir=\"auto\">Would that work for your scenario <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cerize/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cerize\">@cerize</a>?</p>",
            "createdAt": "2023-02-06T18:50:09Z"
          },
          {
            "author": {
              "name": "jacobsfletch",
              "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
              "url": "https://github.com/jacobsfletch"
            },
            "body": "<p dir=\"auto\">^^ BOOM! <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cerize/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cerize\">@cerize</a> you should give this a shot.</p>\n<blockquote>\n<p dir=\"auto\">Do you know if it's in the roadmap any change that would allow to target the 'unpublish' action?</p>\n</blockquote>\n<p dir=\"auto\">I believe it's this one: <a aria-label=\"Discussion #1324\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4525184\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1324\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1324/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1324\">#1324</a></p>",
            "createdAt": "2023-02-09T15:27:05Z"
          },
          {
            "author": {
              "name": "cerize",
              "avatar": "https://avatars.githubusercontent.com/u/12276027?u=bf6f213b909109b1968855a4bc231443137d9b6f&v=4",
              "url": "https://github.com/cerize"
            },
            "body": "<p dir=\"auto\">Thanks <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DanRibbens/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DanRibbens\">@DanRibbens</a> and <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jacobsfletch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jacobsfletch\">@jacobsfletch</a> , I will try!</p>",
            "createdAt": "2023-02-09T17:30:45Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "jacobsfletch",
        "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
        "url": "https://github.com/jacobsfletch"
      },
      "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cerize/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cerize\">@cerize</a> Hi! You can use the <code class=\"notranslate\">beforeChange</code> hook to check the document's <code class=\"notranslate\">_status</code>. If it went from <code class=\"notranslate\">published</code> to <code class=\"notranslate\">draft</code> then you can throw an API error. Something like this (untested):</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import APIError from &quot;payload/dist/errors/APIError&quot;;\n\nconst beforeChangeHook: GlobalBeforeChangeHook = async ({\n  data, // incoming data to update or create with\n  req, // full express request\n  originalDoc, // original document\n}) =&gt; {\n  if (originalDoc._status === 'published' &amp;&amp; data._status !== 'published') throw new APIError('You cannot do this!');\n  return data; // Return data to update the document with\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">APIError</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/errors/APIError\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">beforeChangeHook</span>: <span class=\"pl-smi\">GlobalBeforeChangeHook</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  data<span class=\"pl-kos\">,</span> <span class=\"pl-c\">// incoming data to update or create with</span>\n  req<span class=\"pl-kos\">,</span> <span class=\"pl-c\">// full express request</span>\n  originalDoc<span class=\"pl-kos\">,</span> <span class=\"pl-c\">// original document</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">originalDoc</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'published'</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_status</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'published'</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">APIError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'You cannot do this!'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// Return data to update the document with</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Here are the docs for this hook: <a href=\"https://payloadcms.com/docs/hooks/globals#beforechange\" rel=\"nofollow\">https://payloadcms.com/docs/hooks/globals#beforechange</a></p>",
      "createdAt": "2023-02-01T22:10:33Z",
      "chosenAt": "2023-02-09T15:55:59Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Replace Save or Publish Buttons",
    "body": "<p dir=\"auto\">We should make it possible to extend Payload so that users can slot in custom save or publish buttons and tie them to alternate actions as needed —. e.g. <em>Request Review</em> or similar.</p>\n<p dir=\"auto\">Marking as planned and logging here for visibility.</p>\n<p dir=\"auto\">Related:<br>\n<a aria-label=\"Discussion #1009\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4336244\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1009\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1009/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1009\">#1009</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1324",
    "id": "1324",
    "createdAt": "2022-10-31T19:13:53Z",
    "upvotes": 10,
    "commentTotal": 1,
    "author": {
      "name": "zubricks",
      "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
      "url": "https://github.com/zubricks"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">Related: <a aria-label=\"Discussion #1996\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4814786\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1996\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1996/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1996\">#1996</a></p>",
        "createdAt": "2023-02-09T15:27:30Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "ratio field Why must one be selected?",
    "body": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/217503227-44698e7f-fa98-4f67-8f58-b2c7a68fd2c5.png\"><img width=\"935\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217503227-44698e7f-fa98-4f67-8f58-b2c7a68fd2c5.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/217503306-fc5667be-dad1-4849-b759-360542fe2893.png\"><img width=\"425\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217503306-fc5667be-dad1-4849-b759-360542fe2893.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">There are cases where neither is selected. This situation cannot be achieved with ratio</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2039",
    "id": "2039",
    "createdAt": "2023-02-08T10:26:48Z",
    "upvotes": 1,
    "commentTotal": 4,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": {
          "name": "zhounewz",
          "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
          "url": "https://github.com/zhounewz"
        },
        "body": "<p dir=\"auto\">It can only be realized by select, but it is inconvenient</p>",
        "createdAt": "2023-02-08T10:27:26Z",
        "replies": [
          {
            "author": {
              "name": "JessChowdhury",
              "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
              "url": "https://github.com/JessChowdhury"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zhounewz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhounewz\">@zhounewz</a> change <code class=\"notranslate\">require</code> to <code class=\"notranslate\">required</code> and give that a shot.</p>",
            "createdAt": "2023-02-08T10:31:57Z"
          },
          {
            "author": {
              "name": "JessChowdhury",
              "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
              "url": "https://github.com/JessChowdhury"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zhounewz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhounewz\">@zhounewz</a> also if your options only need to be true and false, you could use a checkbox field here.</p>",
            "createdAt": "2023-02-08T10:32:52Z"
          }
        ]
      },
      {
        "author": {
          "name": "zhounewz",
          "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
          "url": "https://github.com/zhounewz"
        },
        "body": "<p dir=\"auto\">Changing from require to required didn't work.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/217550395-dad5b363-a8bf-4ffd-a040-e14ff2e33c57.png\"><img width=\"359\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/217550395-dad5b363-a8bf-4ffd-a040-e14ff2e33c57.png\" style=\"max-width: 100%;\"></a><br>\nThere are 3 options for me, unselected, true or false.</p>",
        "createdAt": "2023-02-08T13:59:07Z",
        "replies": [
          {
            "author": {
              "name": "JessChowdhury",
              "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
              "url": "https://github.com/JessChowdhury"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zhounewz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhounewz\">@zhounewz</a> what version of payload are you on?</p>",
            "createdAt": "2023-02-08T14:16:56Z"
          }
        ]
      },
      {
        "author": {
          "name": "zhounewz",
          "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
          "url": "https://github.com/zhounewz"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JessChowdhury/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JessChowdhury\">@JessChowdhury</a>  \"payload\": \"1.2.5\"</p>",
        "createdAt": "2023-02-09T01:41:18Z",
        "replies": null
      },
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">The required validation on radios was fixed in a more recent version. Upgrading Payload will help, but not completely fix your problem.</p>\n<p dir=\"auto\">Radio inputs in the browser don't work the way you want.  There is no way to deselect a value without adding a clear button. You need a third option for 'null' in your list it seems.</p>",
        "createdAt": "2023-02-09T02:06:08Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "DanRibbens",
        "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
        "url": "https://github.com/DanRibbens"
      },
      "body": "<p dir=\"auto\">The required validation on radios was fixed in a more recent version. Upgrading Payload will help, but not completely fix your problem.</p>\n<p dir=\"auto\">Radio inputs in the browser don't work the way you want.  There is no way to deselect a value without adding a clear button. You need a third option for 'null' in your list it seems.</p>",
      "createdAt": "2023-02-09T02:06:08Z",
      "chosenAt": "2023-02-09T16:34:26Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Is it possible to show/hide tabs depending on a condition?",
    "body": "<p dir=\"auto\">Currently, according to the type definition, a tab should support the <code class=\"notranslate\">admin</code> property, but it get's ignored and I couldn't find it in the documentation.</p>\n<p dir=\"auto\">I'm trying to build a table block, that allows the creation of tables.</p>\n<p dir=\"auto\">My idea was the following:<br>\nSpecify a <code class=\"notranslate\">numberOfColumns</code> field that allows numbers between 2 and 10.<br>\nDepending on that number, 2-10 tabs would show up below for each \"row\" in an array of \"rows\" to allow filling the cells.</p>\n<p dir=\"auto\">Is this possible? Do you have any other ideas how to realise a table block with the given fields or what a custom component would look like to achieve this?</p>\n<p dir=\"auto\">Thanks</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1664",
    "id": "1664",
    "createdAt": "2022-12-14T15:18:00Z",
    "upvotes": 2,
    "commentTotal": 1,
    "author": {
      "name": "christian-reichart",
      "avatar": "https://avatars.githubusercontent.com/u/9932248?u=853b1ea4b57e7cbeb5cea9a422df4d61dcee0ece&v=4",
      "url": "https://github.com/christian-reichart"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/christian-reichart/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/christian-reichart\">@christian-reichart</a> conditional tabs is on our roadmap here: <a aria-label=\"Discussion #1840\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4742155\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1840\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1840/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1840\">#1840</a></p>",
        "createdAt": "2023-02-08T17:37:43Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "JessChowdhury",
        "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
        "url": "https://github.com/JessChowdhury"
      },
      "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/christian-reichart/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/christian-reichart\">@christian-reichart</a> conditional tabs is on our roadmap here: <a aria-label=\"Discussion #1840\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4742155\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1840\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1840/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1840\">#1840</a></p>",
      "createdAt": "2023-02-08T17:37:43Z",
      "chosenAt": "2023-02-09T15:33:18Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "add custom css",
    "body": "<p dir=\"auto\">Hello there,</p>\n<p dir=\"auto\">I've tried to add my custom css according to the <a href=\"https://payloadcms.com/docs/admin/customizing-css#customizing-css-and-scss\" rel=\"nofollow\">docs</a>.<br>\nBut in the end the stylesheet isn't included (neither as inline nor as external). Does it work for you? Is there anything I need to consider?<br>\nIn the docs it looks very simple...</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1514",
    "id": "1514",
    "createdAt": "2022-11-27T13:55:47Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "unonweb",
      "avatar": "https://avatars.githubusercontent.com/u/79059627?v=4",
      "url": "https://github.com/unonweb"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/unonweb/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/unonweb\">@unonweb</a>,</p>\n<p dir=\"auto\">This could be a cache issue - could you try and run <code class=\"notranslate\">rm -rf node_modules/.cache</code> then restart your server and let me know how that goes.</p>",
        "createdAt": "2022-12-16T18:47:25Z",
        "replies": null
      },
      {
        "author": {
          "name": "mvdve",
          "avatar": "https://avatars.githubusercontent.com/u/10288383?v=4",
          "url": "https://github.com/mvdve"
        },
        "body": "<p dir=\"auto\">Cache was indeed the issue.</p>",
        "createdAt": "2023-02-08T17:04:41Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "JessChowdhury",
        "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
        "url": "https://github.com/JessChowdhury"
      },
      "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/unonweb/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/unonweb\">@unonweb</a>,</p>\n<p dir=\"auto\">This could be a cache issue - could you try and run <code class=\"notranslate\">rm -rf node_modules/.cache</code> then restart your server and let me know how that goes.</p>",
      "createdAt": "2022-12-16T18:47:25Z",
      "chosenAt": "2023-02-08T17:16:53Z",
      "chosenBy": "JessChowdhury"
    }
  },
  {
    "title": "Graphql custom route",
    "body": "<p dir=\"auto\">Is it possible to change the route generation mechanism for graphql? I don't want my graphql url to start with <code class=\"notranslate\">/api</code>.<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/payloadcms/payload/blob/4a49640c3fc22ee74a2666cb90588b03de68644d/src/graphql/initPlayground.ts#L4-L15\">payload/src/graphql/initPlayground.ts</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 4 to 15\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/payloadcms/payload/commit/4a49640c3fc22ee74a2666cb90588b03de68644d\">4a49640</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L4\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"4\"></td>\n          <td id=\"LC4\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">function</span> <span class=\"pl-en\">initPlayground</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span>: <span class=\"pl-smi\">Payload</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\"><span class=\"pl-k\">void</span></span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L5\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"5\"></td>\n          <td id=\"LC5\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">disable</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-c1\">!</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">disablePlaygroundInProduction</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NODE_ENV</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'production'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">NODE_ENV</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'production'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L6\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"6\"></td>\n          <td id=\"LC6\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">router</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQLPlayground</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">graphQLPlayground</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L7\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"7\"></td>\n          <td id=\"LC7\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c1\">endpoint</span>: <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">api</span><span class=\"pl-kos\">}</span></span><span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L8\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"8\"></td>\n          <td id=\"LC8\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c\">// eslint-disable-next-line @typescript-eslint/ban-ts-comment</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L9\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"9\"></td>\n          <td id=\"LC9\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c\">// <span class=\"pl-k\">@ts</span>-ignore ISettings interface has all properties required for some reason</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L10\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"10\"></td>\n          <td id=\"LC10\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-c1\">settings</span>: <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L11\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"11\"></td>\n          <td id=\"LC11\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-s\">'request.credentials'</span>: <span class=\"pl-s\">'include'</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L12\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"12\"></td>\n          <td id=\"LC12\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L13\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"13\"></td>\n          <td id=\"LC13\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L14\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"14\"></td>\n          <td id=\"LC14\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-kos\">}</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L15\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"15\"></td>\n          <td id=\"LC15\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-kos\">}</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2022",
    "id": "2022",
    "createdAt": "2023-02-06T12:58:34Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "guladima",
      "avatar": "https://avatars.githubusercontent.com/u/11425189?v=4",
      "url": "https://github.com/guladima"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">That isn't currently configurable directly. I haven't seen this asked before, but if this is a common thing we could consider how it might be done in the config.</p>\n<p dir=\"auto\">Alternatively, it may be possible to disable Payload's own graphQL using <code class=\"notranslate\">graphQL.disable: true</code> in your config and set it up separately in your app by importing payload's graphql handler and adding it to your express router under your own path.</p>\n<p dir=\"auto\">Payload sets up routes for the playground and graphql endpoints here:<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/payloadcms/payload/blob/4a49640c3fc22ee74a2666cb90588b03de68644d/src/initHTTP.ts#L56-L70\">payload/src/initHTTP.ts</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 56 to 70\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/payloadcms/payload/commit/4a49640c3fc22ee74a2666cb90588b03de68644d\">4a49640</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">disable</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">router</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">use</span><span class=\"pl-kos\">(</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\"><span class=\"pl-k\">void</span></span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L60\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"60\"></td>\n          <td id=\"LC60\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">method</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'OPTIONS'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sendStatus</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">204</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L62\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"62\"></td>\n          <td id=\"LC62\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L63\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"63\"></td>\n          <td id=\"LC63\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L64\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"64\"></td>\n          <td id=\"LC64\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-kos\">}</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L65\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"65\"></td>\n          <td id=\"LC65\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L66\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"66\"></td>\n          <td id=\"LC66\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-en\">identifyAPI</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'GraphQL'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L67\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"67\"></td>\n          <td id=\"LC67\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span>: <span class=\"pl-smi\">PayloadRequest</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span>: <span class=\"pl-smi\">Response</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">graphQLHandler</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L68\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"68\"></td>\n          <td id=\"LC68\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">initGraphQLPlayground</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L70\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"70\"></td>\n          <td id=\"LC70\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-kos\">}</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">Disabling graphql will also skip registering of the schema, which you'll want to call also. I believe it could be done onInit in which you could pass it <code class=\"notranslate\">payload</code> instead of <code class=\"notranslate\">this</code>.<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/payloadcms/payload/blob/4a49640c3fc22ee74a2666cb90588b03de68644d/src/payload.ts#L194-L196\">payload/src/payload.ts</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 194 to 196\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/payloadcms/payload/commit/4a49640c3fc22ee74a2666cb90588b03de68644d\">4a49640</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L194\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"194\"></td>\n          <td id=\"LC194\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">disable</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L195\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"195\"></td>\n          <td id=\"LC195\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">registerSchema</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L196\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"196\"></td>\n          <td id=\"LC196\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-kos\">}</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">Since we don't export some of these files directly, you'll have to import them from 'payload/dist'.</p>\n<p dir=\"auto\">I haven't tried to do this and honestly, it probably isn't worth the effort unless this is a hard requirement for your project.</p>\n<p dir=\"auto\">I hope this helps, cheers!</p>",
        "createdAt": "2023-02-07T15:03:42Z",
        "replies": null
      },
      {
        "author": {
          "name": "guladima",
          "avatar": "https://avatars.githubusercontent.com/u/11425189?v=4",
          "url": "https://github.com/guladima"
        },
        "body": "<p dir=\"auto\">Finally i solve my problem.</p>\n<p dir=\"auto\">Here's my working solution:</p>\n<h3 dir=\"auto\">server.ts</h3>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import express, { NextFunction, Response } from &quot;express&quot;;\nimport payload from &quot;payload&quot;;\nimport graphQLPlayground from &quot;graphql-playground-middleware-express&quot;;\nimport registerSchema from &quot;payload/dist/graphql/registerSchema&quot;;\nimport identifyAPI from &quot;payload/dist/express/middleware/identifyAPI&quot;;\nimport graphQLHandler from &quot;payload/dist/graphql/graphQLHandler&quot;;\nimport { PayloadRequest } from &quot;payload/types&quot;;\n\nrequire(&quot;dotenv&quot;).config();\nconst app = express();\n\nconst start = async () =&gt; {\n  await payload.init({\n    secret: process.env.PAYLOAD_SECRET,\n    mongoURL: process.env.MONGODB_URI,\n    express: app,\n    onInit: async () =&gt; {\n      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);\n      payload.logger.info(`Payload API URL: ${payload.getAPIURL()}`);\n    },\n  });\n\n  app.use(\n    payload.config.routes.graphQL,\n    (req, res, next) =&gt; {\n      if (req.method === &quot;OPTIONS&quot;) {\n        res.sendStatus(204);\n      } else {\n        next();\n      }\n    },\n    (\n      req: PayloadRequest &amp; { payload: { schemaRegistered?: boolean } },\n      _res: Response,\n      next: NextFunction\n    ) =&gt; {\n      if (!req.payload.schemaRegistered) {\n        registerSchema(req.payload);\n        req.payload.schemaRegistered = true;\n      }\n\n      next();\n    },\n    identifyAPI(&quot;GraphQL&quot;),\n    (req: PayloadRequest, res: Response) =&gt; graphQLHandler(req, res)(req, res)\n  );\n\n  app.get(\n    payload.config.routes.graphQLPlayground,\n    graphQLPlayground({\n      endpoint: payload.config.routes.graphQL,\n      settings: {\n        &quot;request.credentials&quot;: &quot;include&quot;,\n      },\n    })\n  );\n\n  app.listen(3000);\n};\n\nstart();\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">express</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">NextFunction</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">Response</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"express\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">payload</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">graphQLPlayground</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"graphql-playground-middleware-express\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">registerSchema</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/graphql/registerSchema\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">identifyAPI</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/express/middleware/identifyAPI\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">graphQLHandler</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/graphql/graphQLHandler\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">PayloadRequest</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/types\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"dotenv\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">config</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">app</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">express</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">start</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">secret</span>: <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PAYLOAD_SECRET</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">mongoURL</span>: <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MONGODB_URI</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">express</span>: <span class=\"pl-s1\">app</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">onInit</span>: <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">info</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Payload Admin URL: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getAdminURL</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">info</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Payload API URL: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getAPIURL</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">use</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">method</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"OPTIONS\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sendStatus</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">204</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">(</span>\n      <span class=\"pl-s1\">req</span>: <span class=\"pl-smi\">PayloadRequest</span> <span class=\"pl-c1\">&amp;</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">payload</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">schemaRegistered</span>?: <span class=\"pl-smi\">boolean</span> <span class=\"pl-kos\">}</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s1\">_res</span>: <span class=\"pl-smi\">Response</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s1\">next</span>: <span class=\"pl-smi\">NextFunction</span>\n    <span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">schemaRegistered</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">registerSchema</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">payload</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">schemaRegistered</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">identifyAPI</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"GraphQL\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span>: <span class=\"pl-smi\">PayloadRequest</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span>: <span class=\"pl-smi\">Response</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">graphQLHandler</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQLPlayground</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">graphQLPlayground</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">endpoint</span>: <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">settings</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">\"request.credentials\"</span>: <span class=\"pl-s\">\"include\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">listen</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">start</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<h3 dir=\"auto\">payload.config.ts</h3>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"routes: {\n  admin: &quot;/admin&quot;,\n  api: &quot;/api&quot;,\n  graphQL: &quot;/graphql&quot;,\n  graphQLPlayground: &quot;/graphql-playground&quot;,\n},\ngraphQL: {\n  disable: true,\n  schemaOutputFile: path.resolve(__dirname, &quot;generated-schema.graphql&quot;),\n},\"><pre class=\"notranslate\"><span class=\"pl-s1\">routes</span>: <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">admin</span>: <span class=\"pl-s\">\"/admin\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">api</span>: <span class=\"pl-s\">\"/api\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">graphQL</span>: <span class=\"pl-s\">\"/graphql\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">graphQLPlayground</span>: <span class=\"pl-s\">\"/graphql-playground\"</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-s1\">graphQL</span>: <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">disable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">schemaOutputFile</span>: <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">__dirname</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"generated-schema.graphql\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span></pre></div>",
        "createdAt": "2023-02-08T14:12:23Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "guladima",
        "avatar": "https://avatars.githubusercontent.com/u/11425189?v=4",
        "url": "https://github.com/guladima"
      },
      "body": "<p dir=\"auto\">Finally i solve my problem.</p>\n<p dir=\"auto\">Here's my working solution:</p>\n<h3 dir=\"auto\">server.ts</h3>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import express, { NextFunction, Response } from &quot;express&quot;;\nimport payload from &quot;payload&quot;;\nimport graphQLPlayground from &quot;graphql-playground-middleware-express&quot;;\nimport registerSchema from &quot;payload/dist/graphql/registerSchema&quot;;\nimport identifyAPI from &quot;payload/dist/express/middleware/identifyAPI&quot;;\nimport graphQLHandler from &quot;payload/dist/graphql/graphQLHandler&quot;;\nimport { PayloadRequest } from &quot;payload/types&quot;;\n\nrequire(&quot;dotenv&quot;).config();\nconst app = express();\n\nconst start = async () =&gt; {\n  await payload.init({\n    secret: process.env.PAYLOAD_SECRET,\n    mongoURL: process.env.MONGODB_URI,\n    express: app,\n    onInit: async () =&gt; {\n      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);\n      payload.logger.info(`Payload API URL: ${payload.getAPIURL()}`);\n    },\n  });\n\n  app.use(\n    payload.config.routes.graphQL,\n    (req, res, next) =&gt; {\n      if (req.method === &quot;OPTIONS&quot;) {\n        res.sendStatus(204);\n      } else {\n        next();\n      }\n    },\n    (\n      req: PayloadRequest &amp; { payload: { schemaRegistered?: boolean } },\n      _res: Response,\n      next: NextFunction\n    ) =&gt; {\n      if (!req.payload.schemaRegistered) {\n        registerSchema(req.payload);\n        req.payload.schemaRegistered = true;\n      }\n\n      next();\n    },\n    identifyAPI(&quot;GraphQL&quot;),\n    (req: PayloadRequest, res: Response) =&gt; graphQLHandler(req, res)(req, res)\n  );\n\n  app.get(\n    payload.config.routes.graphQLPlayground,\n    graphQLPlayground({\n      endpoint: payload.config.routes.graphQL,\n      settings: {\n        &quot;request.credentials&quot;: &quot;include&quot;,\n      },\n    })\n  );\n\n  app.listen(3000);\n};\n\nstart();\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">express</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">NextFunction</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">Response</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"express\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">payload</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">graphQLPlayground</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"graphql-playground-middleware-express\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">registerSchema</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/graphql/registerSchema\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">identifyAPI</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/express/middleware/identifyAPI\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">graphQLHandler</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/dist/graphql/graphQLHandler\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">PayloadRequest</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"payload/types\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"dotenv\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">config</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">app</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">express</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">start</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">await</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">secret</span>: <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PAYLOAD_SECRET</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">mongoURL</span>: <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MONGODB_URI</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">express</span>: <span class=\"pl-s1\">app</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">onInit</span>: <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">info</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Payload Admin URL: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getAdminURL</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">info</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Payload API URL: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getAPIURL</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">use</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">method</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"OPTIONS\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sendStatus</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">204</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">(</span>\n      <span class=\"pl-s1\">req</span>: <span class=\"pl-smi\">PayloadRequest</span> <span class=\"pl-c1\">&amp;</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">payload</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">schemaRegistered</span>?: <span class=\"pl-smi\">boolean</span> <span class=\"pl-kos\">}</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s1\">_res</span>: <span class=\"pl-smi\">Response</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s1\">next</span>: <span class=\"pl-smi\">NextFunction</span>\n    <span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">schemaRegistered</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">registerSchema</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">payload</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">schemaRegistered</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">identifyAPI</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"GraphQL\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span>: <span class=\"pl-smi\">PayloadRequest</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span>: <span class=\"pl-smi\">Response</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">graphQLHandler</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQLPlayground</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">graphQLPlayground</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">endpoint</span>: <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">config</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">routes</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">graphQL</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">settings</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">\"request.credentials\"</span>: <span class=\"pl-s\">\"include\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">listen</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">start</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<h3 dir=\"auto\">payload.config.ts</h3>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"routes: {\n  admin: &quot;/admin&quot;,\n  api: &quot;/api&quot;,\n  graphQL: &quot;/graphql&quot;,\n  graphQLPlayground: &quot;/graphql-playground&quot;,\n},\ngraphQL: {\n  disable: true,\n  schemaOutputFile: path.resolve(__dirname, &quot;generated-schema.graphql&quot;),\n},\"><pre class=\"notranslate\"><span class=\"pl-s1\">routes</span>: <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">admin</span>: <span class=\"pl-s\">\"/admin\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">api</span>: <span class=\"pl-s\">\"/api\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">graphQL</span>: <span class=\"pl-s\">\"/graphql\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">graphQLPlayground</span>: <span class=\"pl-s\">\"/graphql-playground\"</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-s1\">graphQL</span>: <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">disable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">schemaOutputFile</span>: <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">__dirname</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"generated-schema.graphql\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span></pre></div>",
      "createdAt": "2023-02-08T14:12:23Z",
      "chosenAt": "2023-02-08T15:40:24Z",
      "chosenBy": "guladima"
    }
  },
  {
    "title": "Allow Email functionality to be completely disabled",
    "body": "<p dir=\"auto\">Currently, if an email transport isn't specified a mock email handler is used. We should provide a way to disable email functionality completely for testing and security purposes.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1703",
    "id": "1703",
    "createdAt": "2022-12-19T04:38:23Z",
    "upvotes": 3,
    "commentTotal": 2,
    "author": {
      "name": "denolfe",
      "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
      "url": "https://github.com/denolfe"
    },
    "comments": [
      {
        "author": {
          "name": "iakshay",
          "avatar": "https://avatars.githubusercontent.com/u/1104602?v=4",
          "url": "https://github.com/iakshay"
        },
        "body": "<p dir=\"auto\">Would be nice not to create mock credentials on every test run, currently I have to use <code class=\"notranslate\">msw</code> to prevent API request going to <code class=\"notranslate\">api.nodemailer.com</code> <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png\">😄</g-emoji></p>",
        "createdAt": "2022-12-21T16:32:04Z",
        "replies": null
      },
      {
        "author": {
          "name": "wkillerud",
          "avatar": "https://avatars.githubusercontent.com/u/1223410?u=dfb04cb2a9c9c60489dfaeae765b1d18c08abf47&v=4",
          "url": "https://github.com/wkillerud"
        },
        "body": "<p dir=\"auto\">I have a scenario where this feature would have been useful. In my case I want to run Payload in a setting where it doesn't have direct access to the Internet. The database, media storage and server all run in this controlled network setting. For production I'll add an email transport to the setup, but for the dev/test environment at least I'm fine without it.</p>\n<p dir=\"auto\">For me, Payload failed to start since the server didn't have network access to register the mock email.</p>\n<p dir=\"auto\">I ended up patching in <a href=\"https://github.com/payloadcms/payload/compare/master...wkillerud:payload:feat/disable-email?expand=1\">this diff</a> locally, and it seems to be running OK from my limited testing on a fresh install.</p>\n<p dir=\"auto\">If you'd like I can open a PR with the above diff and some documentation. Some feedback on what you'd like to see covered by tests would be helpful :)</p>",
        "createdAt": "2023-02-08T11:57:14Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Extending type for GrahQL",
    "body": "<p dir=\"auto\">Hello all,</p>\n<p dir=\"auto\">I read about the \"Adding your own Queries and Mutations\" but I didn't find any explanation about extending an existing type.<br>\nFor example, I have collection called product where I have shopifyId field.<br>\nI would like to be able to update the product query to able to have a node \"shopify\"</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  products {\n    shopifyId\n    shopify {\n      price\n    }\n  }\n}\"><pre lang=\"graqhql\" class=\"notranslate\"><code class=\"notranslate\">{\n  products {\n    shopifyId\n    shopify {\n      price\n    }\n  }\n}\n</code></pre></div>\n<p dir=\"auto\">Do you have way?</p>\n<p dir=\"auto\">I was thinking to override the schema, I found the <a href=\"https://github.com/payloadcms/payload/blob/145e1db05db0e71149ba74e95764970dfdfd8b6b/src/graphql/registerSchema.ts#L75\">code</a> but we should provide a way to merge the schema using for example <a href=\"https://the-guild.dev/graphql/tools/docs/schema-merging\" rel=\"nofollow\">@graphql-tools/merge</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2036",
    "id": "2036",
    "createdAt": "2023-02-07T20:38:10Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "b-barry",
      "avatar": "https://avatars.githubusercontent.com/u/3358788?u=dbf460474df3382f575e67cfad41ba0387d6401b&v=4",
      "url": "https://github.com/b-barry"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/b-barry/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/b-barry\">@b-barry</a> — you should not directly modify the auto-generated GraphQL types, but what you're doing should be possible by adding a field to your config itself. You can then set <code class=\"notranslate\">admin.disabled: true</code> on the field to have it hide from the admin UI entirely. And then you could fill the field's value dynamically with hooks / similar, therefore treating it as a \"virtual field\". We have a demo of this coming out shortly, so keep an eye out!</p>",
        "createdAt": "2023-02-07T20:55:00Z",
        "replies": [
          {
            "author": {
              "name": "b-barry",
              "avatar": "https://avatars.githubusercontent.com/u/3358788?u=dbf460474df3382f575e67cfad41ba0387d6401b&v=4",
              "url": "https://github.com/b-barry"
            },
            "body": "<p dir=\"auto\">Thanks for the quick response. About the hidden field, do you plan to save it the database ?<br>\nI prefer not to be sure to have the latest data</p>",
            "createdAt": "2023-02-07T21:42:31Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">You don’t need to save the field to the database, and you can populate it dynamically with hooks. That’s actually what I was intending and is a pattern that we use ourselves quite a bit. It works well and accomplishes exactly what you’re looking to do <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
            "createdAt": "2023-02-07T22:37:01Z"
          },
          {
            "author": {
              "name": "b-barry",
              "avatar": "https://avatars.githubusercontent.com/u/3358788?u=dbf460474df3382f575e67cfad41ba0387d6401b&v=4",
              "url": "https://github.com/b-barry"
            },
            "body": "<p dir=\"auto\">Super ! I am looking forward for your example.</p>\n<p dir=\"auto\">Thanks again for the response</p>",
            "createdAt": "2023-02-08T05:56:27Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "jmikrut",
        "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
        "url": "https://github.com/jmikrut"
      },
      "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/b-barry/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/b-barry\">@b-barry</a> — you should not directly modify the auto-generated GraphQL types, but what you're doing should be possible by adding a field to your config itself. You can then set <code class=\"notranslate\">admin.disabled: true</code> on the field to have it hide from the admin UI entirely. And then you could fill the field's value dynamically with hooks / similar, therefore treating it as a \"virtual field\". We have a demo of this coming out shortly, so keep an eye out!</p>",
      "createdAt": "2023-02-07T20:55:00Z",
      "chosenAt": "2023-02-17T18:27:47Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Payload doesn't start up",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n\n<p dir=\"auto\">Trying to start the project after using <code class=\"notranslate\">npx create-payload-app</code> inside a docker image (node:18-alpine) is impossible. The project does not start.</p>\n<p dir=\"auto\">this is the docs that I'm using <a href=\"https://payloadcms.com/docs/getting-started/installation\" rel=\"nofollow\">https://payloadcms.com/docs/getting-started/installation</a></p>\n<p dir=\"auto\">Is there something I'm doing wrong?, thanks for your help guys.</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n\n<ol dir=\"auto\">\n<li>Initialize docker container (node:18-alpine)</li>\n<li>Run <code class=\"notranslate\">npx create-payload-app</code></li>\n<li>Install completes successfully</li>\n<li>Run <code class=\"notranslate\">yarn dev</code></li>\n<li>Project doesn't start.</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n\n<p dir=\"auto\">** Log using nodemon: **</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/home/node/app # npx create-payload-app\nNeed to install the following packages:\n  create-payload-app@0.3.24\nOk to proceed? (y) y\n\n  Welcome to Payload. Let's create a project! \n\n✔ Project name? … payload-cms\n✔ Choose project template › blog\n✔ Enter MongoDB connection … mongodb://secret:secretpass@mongodb:27017/payload?authSource=admin \n\n  Creating a new Payload app in /home/node/app/payload-cms\n\n✔ Project directory created\n✔ Dependencies installed\n✔ .env file created\n✔ Payload project successfully created\n\n  ★ Launch Application:\n\n    - cd ./payload-cms\n    - yarn dev\n\n  ★ Documentation:\n\n    - Getting Started: https://payloadcms.com/docs/getting-started/what-is-payload\n    - Configuration: https://payloadcms.com/docs/configuration/overview\n\n\nnpm notice \nnpm notice New minor version of npm available! 9.3.1 -&gt; 9.4.1\nnpm notice Changelog: https://github.com/npm/cli/releases/tag/v9.4.1\nnpm notice Run npm install -g npm@9.4.1 to update!\nnpm notice \n/home/node/app # cd ./payload-cms\n/home/node/app/trnds-cms # yarn dev\nyarn run v1.22.19\n$ cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts nodemon\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: ts\n[nodemon] starting `ts-node src/server.ts`\n[nodemon] app crashed - waiting for file changes before starting...\"><pre class=\"notranslate\"><code class=\"notranslate\">/home/node/app # npx create-payload-app\nNeed to install the following packages:\n  create-payload-app@0.3.24\nOk to proceed? (y) y\n\n  Welcome to Payload. Let's create a project! \n\n✔ Project name? … payload-cms\n✔ Choose project template › blog\n✔ Enter MongoDB connection … mongodb://secret:secretpass@mongodb:27017/payload?authSource=admin \n\n  Creating a new Payload app in /home/node/app/payload-cms\n\n✔ Project directory created\n✔ Dependencies installed\n✔ .env file created\n✔ Payload project successfully created\n\n  ★ Launch Application:\n\n    - cd ./payload-cms\n    - yarn dev\n\n  ★ Documentation:\n\n    - Getting Started: https://payloadcms.com/docs/getting-started/what-is-payload\n    - Configuration: https://payloadcms.com/docs/configuration/overview\n\n\nnpm notice \nnpm notice New minor version of npm available! 9.3.1 -&gt; 9.4.1\nnpm notice Changelog: https://github.com/npm/cli/releases/tag/v9.4.1\nnpm notice Run npm install -g npm@9.4.1 to update!\nnpm notice \n/home/node/app # cd ./payload-cms\n/home/node/app/trnds-cms # yarn dev\nyarn run v1.22.19\n$ cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts nodemon\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: ts\n[nodemon] starting `ts-node src/server.ts`\n[nodemon] app crashed - waiting for file changes before starting...\n</code></pre></div>\n<p dir=\"auto\"><strong>log using: ts-node with npx</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/home/node/app/payload-cms # npx ts-node ./src/server.ts\nIllegal instruction\"><pre class=\"notranslate\"><code class=\"notranslate\">/home/node/app/payload-cms # npx ts-node ./src/server.ts\nIllegal instruction\n</code></pre></div>\n<p dir=\"auto\"><strong>Log using: ts-node without npx</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/home/node/app/payload-cms # ts-node ./src/server.ts\nIllegal instruction\"><pre class=\"notranslate\"><code class=\"notranslate\">/home/node/app/payload-cms # ts-node ./src/server.ts\nIllegal instruction\n</code></pre></div>\n\n<h4 dir=\"auto\">src/server.ts</h4>\n<p dir=\"auto\">After remove payload.init from <code class=\"notranslate\">server.ts</code> the project starts. Which makes me think that the error could be related to the payload npm package. <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">🤔</g-emoji></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import express from 'express';\nimport payload from 'payload';\n\nrequire('dotenv').config();\nconst app = express();\n\n// Redirect root to Admin panel\napp.get('/', (_, res) =&gt; {\n  res.redirect('/admin');\n});\n\nconst start = async () =&gt; {\n  // Initialize Payload\n  // await payload.init({\n  //   secret: process.env.PAYLOAD_SECRET,\n  //   mongoURL: process.env.MONGODB_URI,\n  //   express: app,\n  //   onInit: async () =&gt; {\n  //     payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`)\n  //   },\n  // })\n\n  // Add your own express routes here\n\n  app.listen(3000);\n}\n\nstart();\n\n\"><pre class=\"notranslate\"><code class=\"notranslate\">import express from 'express';\nimport payload from 'payload';\n\nrequire('dotenv').config();\nconst app = express();\n\n// Redirect root to Admin panel\napp.get('/', (_, res) =&gt; {\n  res.redirect('/admin');\n});\n\nconst start = async () =&gt; {\n  // Initialize Payload\n  // await payload.init({\n  //   secret: process.env.PAYLOAD_SECRET,\n  //   mongoURL: process.env.MONGODB_URI,\n  //   express: app,\n  //   onInit: async () =&gt; {\n  //     payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`)\n  //   },\n  // })\n\n  // Add your own express routes here\n\n  app.listen(3000);\n}\n\nstart();\n\n\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2033",
    "id": "2033",
    "createdAt": "2023-02-06T23:47:42Z",
    "upvotes": 1,
    "commentTotal": 3,
    "author": {
      "name": "mauroencinas",
      "avatar": "https://avatars.githubusercontent.com/u/32255583?v=4",
      "url": "https://github.com/mauroencinas"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mauroencinas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mauroencinas\">@mauroencinas</a> — this should be doable. I'd try and start your process manually, outside of <code class=\"notranslate\">nodemon</code>, to see if you can get a better error log. Run <code class=\"notranslate\">ts-node src/server.ts</code> and see what you get. Let us know!</p>",
        "createdAt": "2023-02-07T00:45:19Z",
        "replies": null
      },
      {
        "author": {
          "name": "mauroencinas",
          "avatar": "https://avatars.githubusercontent.com/u/32255583?v=4",
          "url": "https://github.com/mauroencinas"
        },
        "body": "<blockquote>\n<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mauroencinas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mauroencinas\">@mauroencinas</a> — this should be doable. I'd try and start your process manually, outside of <code class=\"notranslate\">nodemon</code>, to see if you can get a better error log. Run <code class=\"notranslate\">ts-node src/server.ts</code> and see what you get. Let us know!</p>\n</blockquote>\n<p dir=\"auto\">Thank you very much <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> , you are very kind for your recommendation, I tried to do what you told me, and the result is <code class=\"notranslate\">Illegal Instruction</code>, I tried the command with and without npx</p>",
        "createdAt": "2023-02-07T01:06:32Z",
        "replies": null
      },
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">OK. this is then likely not an issue with Payload and something that you should research regarding your Node 18 Docker image. I bet it has something to do with one of Payload's dependencies. Can you attempt to use another Docker image?</p>\n<p dir=\"auto\">I will convert this to a discussion as there is likely nothing that Payload can be done to fix this, although I'm happy to continue to help!</p>",
        "createdAt": "2023-02-07T15:29:07Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Custom controlled relationship field",
    "body": "<p dir=\"auto\">Hello!</p>\n<p dir=\"auto\">I want to create controlled relationship field with buttons to fill in the data quickly. As I understand I need to use useField() hook and etc.</p>\n<p dir=\"auto\">But...I can't render this code:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n      name: &quot;value&quot;,\n      type: &quot;relationship&quot;,\n      relationTo: &quot;countries&quot;,\n      hasMany: true,\n      admin: {\n        components: {\n          Field: (props) =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField\n                name={props.name}\n                relationTo={props.relationTo}\n                hasMany={props.hasMany}\n              /&gt;\n            );\n          },\n        },\n      },\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n      name: \"value\",\n      type: \"relationship\",\n      relationTo: \"countries\",\n      hasMany: true,\n      admin: {\n        components: {\n          Field: (props) =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField\n                name={props.name}\n                relationTo={props.relationTo}\n                hasMany={props.hasMany}\n              /&gt;\n            );\n          },\n        },\n      },\n    }\n</code></pre></div>\n<p dir=\"auto\">Just getting this error (\"<strong>No suitable field was found for \"Value\"</strong>\"):<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/614922/214333619-43f8a581-42f5-4e0a-b09f-cc8064051321.png\"><img src=\"https://user-images.githubusercontent.com/614922/214333619-43f8a581-42f5-4e0a-b09f-cc8064051321.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">If I change field type to UI:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n      name: &quot;value&quot;,\n      type: &quot;ui&quot;,\n      admin: {\n        components: {\n          Field: () =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField name=&quot;value&quot; relationTo=&quot;countries&quot; hasMany /&gt;\n            );\n          },\n        },\n      },\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">{\n      name: \"value\",\n      type: \"ui\",\n      admin: {\n        components: {\n          Field: () =&gt; {\n            return (\n              /* here will be buttons to quickly control field's value */\n              &lt;RelationshipField name=\"value\" relationTo=\"countries\" hasMany /&gt;\n            );\n          },\n        },\n      },\n    }\n</code></pre></div>\n<p dir=\"auto\">I can properly render it without errors, but ofc the value isn't stored at DB after update:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/614922/214334387-482e4cf5-73db-4e5f-8af1-2b550f2d101c.png\"><img src=\"https://user-images.githubusercontent.com/614922/214334387-482e4cf5-73db-4e5f-8af1-2b550f2d101c.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Can you please help me with this problem? Thanks in advance!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1944",
    "id": "1944",
    "createdAt": "2023-01-24T15:23:58Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "Kikky",
      "avatar": "https://avatars.githubusercontent.com/u/614922?v=4",
      "url": "https://github.com/Kikky"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Kikky/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Kikky\">@Kikky</a> what you need to do here is set the field type to <code class=\"notranslate\">text</code> and render your custom relationship field as a custom component, similar to your second example but like this:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  name: &quot;value&quot;,\n  type: &quot;text&quot;,\n  admin: {\n    components: {\n      Field: () =&gt; {\n         // render anything you want here, including the Payload relationship component\n         // interact with form state as needed using form hooks\n         // then, save your relationship ID as a string to this text field using field hooks\n      }\n    },\n  },\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"value\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"text\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">admin</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">components</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">Field</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n         <span class=\"pl-c\">// render anything you want here, including the Payload relationship component</span>\n         <span class=\"pl-c\">// interact with form state as needed using form hooks</span>\n         <span class=\"pl-c\">// then, save your relationship ID as a string to this text field using field hooks</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Give this a shot and let me know how it goes <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
        "createdAt": "2023-02-03T20:38:38Z",
        "replies": [
          {
            "author": {
              "name": "Kikky",
              "avatar": "https://avatars.githubusercontent.com/u/614922?v=4",
              "url": "https://github.com/Kikky"
            },
            "body": "<blockquote>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/ then, save your relationship ID as a\"><pre class=\"notranslate\"><span class=\"pl-c1\">/</span> then, save your relationship ID as a</pre></div>\n</blockquote>\n<p dir=\"auto\">Thanks for your reply! But I have hasMany={true} on this field and this means that I have to store its value (an array of ids) as a string and parse it after reading from DB...and also I can't get related fields via GraphQL.</p>\n<p dir=\"auto\">I want to keep data format in DB and advantages of relationship field, but to add some UI with functuionality.</p>",
            "createdAt": "2023-02-07T11:39:33Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Add the table list component to the relationship field",
    "body": "<p dir=\"auto\">Having the option to display documents in a relationship field in the table list component would be incredibly useful for fields with a large number of relationships, allowing for easy viewing and management (when bulk operations are added) of the contained information.</p>\n<p dir=\"auto\">Now, relationship fields that contain relationships from multiple collections that have different datasets could get messy, so it should be only allowed to be used on relationship fields that pull from one collection, or where the collections share an arbitrary minimum number of fields other than <code class=\"notranslate\">_id</code>. Some relationship fields this could be used on would be wholesale and retail orders, user role based profiles, and products in different categories that share a common parent category.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    {\n      name: 'relationshipField',\n      type: 'relationship',\n      relationTo: 'collectionSlug',\n      required: true,\n      hasMany: true,\n      admin:{\n        **display:'table/relationship',**\n    },\"><pre class=\"notranslate\"><code class=\"notranslate\">    {\n      name: 'relationshipField',\n      type: 'relationship',\n      relationTo: 'collectionSlug',\n      required: true,\n      hasMany: true,\n      admin:{\n        **display:'table/relationship',**\n    },\n</code></pre></div>\n<p dir=\"auto\">The default values of the <code class=\"notranslate\">admin:display</code> option would dynamically change based on the <code class=\"notranslate\">hasMany</code> flag and the type value of the <code class=\"notranslate\">relationTo</code> field. If <code class=\"notranslate\">hasMany</code> is set to <code class=\"notranslate\">true</code>, and <code class=\"notranslate\">relationTo</code> is a <code class=\"notranslate\">string</code> then it should default to the table list, all others should default to the current relationship field. If <code class=\"notranslate\">hasMany</code> is set to <code class=\"notranslate\">true</code> but <code class=\"notranslate\">relationTo</code> is an array, having display set to <code class=\"notranslate\">table</code> should throw an error if the data structure of the collections doesn't match at least X fields other than <code class=\"notranslate\">_id</code>.</p>\n<p dir=\"auto\">If <code class=\"notranslate\">hasMany</code> is set to <code class=\"notranslate\">true</code> and <code class=\"notranslate\">relationTo</code> is an array, the columns that can be shown in the table should be limited to only the fields the two collections have in common.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2023",
    "id": "2023",
    "createdAt": "2023-02-06T16:37:48Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "ToneseekerMusical",
      "avatar": "https://avatars.githubusercontent.com/u/105748910?v=4",
      "url": "https://github.com/ToneseekerMusical"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Allow Rest queries to use Pagination true or false option [Performance] !",
    "body": "<p dir=\"auto\">hi,<br>\ncurrently pagination is always on for rest queries, for queries like these using qs package <a href=\"https://payloadcms.com/docs/queries/overview\" rel=\"nofollow\">https://payloadcms.com/docs/queries/overview</a><br>\ni request that we should be able to send a query with pagination flag on / off like below, this should not run countDocuments.</p>\n<p dir=\"auto\">doing this we can improve the performance multifold for rest queries</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" const stringifiedQuery = qs.stringify(\n    { where: someQuery, limit: 5, pagination: false },\n    { addQueryPrefix: true },\n  )\"><pre class=\"notranslate\"><code class=\"notranslate\"> const stringifiedQuery = qs.stringify(\n    { where: someQuery, limit: 5, pagination: false },\n    { addQueryPrefix: true },\n  )\n</code></pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2019",
    "id": "2019",
    "createdAt": "2023-02-05T21:28:27Z",
    "upvotes": 2,
    "commentTotal": 0,
    "author": {
      "name": "geminigeek",
      "avatar": "https://avatars.githubusercontent.com/u/3751322?v=4",
      "url": "https://github.com/geminigeek"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Expose Access Control to control UI elements in Custom Web App",
    "body": "<p dir=\"auto\">The Access Control that payload provides is excellent. And It is only consumed by the Admin UI.</p>\n<p dir=\"auto\">What if i want to consume it on my web app. similar to library like CASL.js or Casbin.js</p>\n<p dir=\"auto\">I don’t want to write access control twice what users can and cannot do.</p>\n<p dir=\"auto\">Define All the Access Control in Payload config and some how access these control policies in the front end eco-system to dynamic show/hide ui element depending on the user access similar to Admin UI of Payload CMS.</p>\n<p dir=\"auto\">Using Payload CMS as backend and use the same config to define what the users of the site can do in the front end.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2017",
    "id": "2017",
    "createdAt": "2023-02-05T07:47:29Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "mohammedmushtaq3",
      "avatar": "https://avatars.githubusercontent.com/u/58843133?u=5c376ec480fb3d8bb94dea3be2e51d1a8885a2cd&v=4",
      "url": "https://github.com/mohammedmushtaq3"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Loading UI Enhancements",
    "body": "<p dir=\"auto\">At the moment, when uploading a file, there is no visual feedback for how long the upload will take, while the screen is locked on the file-upload modal. This is not a pleasant UX.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/10504064/192564510-00d42f8c-819a-43f5-b9be-11558f5d0836.png\"><img src=\"https://user-images.githubusercontent.com/10504064/192564510-00d42f8c-819a-43f5-b9be-11558f5d0836.png\" alt=\"afbeelding\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">I propose to not lock the screen to the model, but to go straight back to the entry-page and make use of those bars at the bottom of the page (like <g-emoji class=\"g-emoji\" alias=\"point_down\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f447.png\">👇</g-emoji>) to communicate the upload-progress.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/10504064/192565003-6841775f-4fe3-4958-98f9-c42d26ba6d23.png\"><img src=\"https://user-images.githubusercontent.com/10504064/192565003-6841775f-4fe3-4958-98f9-c42d26ba6d23.png\" alt=\"afbeelding\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">If you try to leave the page before the file is uploaded, you could give a warning.<br>\nIf you want to prevent bottleneck from uploading too many files at once, you could start queuing them if the amount goes over a certain threshold.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1180",
    "id": "1180",
    "createdAt": "2022-09-27T15:13:42Z",
    "upvotes": 7,
    "commentTotal": 3,
    "author": {
      "name": "bigmistqke",
      "avatar": "https://avatars.githubusercontent.com/u/10504064?u=86bbaba2d5167f72ab97edcbc6933f875b15919e&v=4",
      "url": "https://github.com/bigmistqke"
    },
    "comments": [
      {
        "author": {
          "name": "qivox",
          "avatar": "https://avatars.githubusercontent.com/u/106614307?u=58aa1f55f6870e824e8d1770ea258f175166813b&v=4",
          "url": "https://github.com/qivox"
        },
        "body": "<p dir=\"auto\">Generally having more loading indicators on the admin panel would be great. It sometimes feels a bit clunky changing routes or saving content for example.</p>",
        "createdAt": "2022-09-28T10:56:31Z",
        "replies": null
      },
      {
        "author": {
          "name": "zubricks",
          "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
          "url": "https://github.com/zubricks"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bigmistqke/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bigmistqke\">@bigmistqke</a> progress bar for uploads is 100% on our radar, and we'll be marking this feature as <code class=\"notranslate\">planned</code> right now.</p>",
        "createdAt": "2022-10-28T18:10:10Z",
        "replies": null
      },
      {
        "author": {
          "name": "rjdjohnston",
          "avatar": "https://avatars.githubusercontent.com/u/293686?v=4",
          "url": "https://github.com/rjdjohnston"
        },
        "body": "<p dir=\"auto\">+1</p>",
        "createdAt": "2023-02-04T16:36:15Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Oauth BeforeLogin hook redirects to `Already Logged In`",
    "body": "<p dir=\"auto\">Hey!</p>\n<p dir=\"auto\">I am not that sure if this is a bug on the side of plugin code or payload, but maybe you will have some hints.</p>\n<p dir=\"auto\">In the plugin code, after successful oAuth I <code class=\"notranslate\">setToken</code> from <code class=\"notranslate\">useAuth</code> hook and then I use <code class=\"notranslate\">useNavigate</code> to navigate to <code class=\"notranslate\">admin</code> page.</p>\n<p dir=\"auto\">What I get is the screen below:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/92296835/199944719-9ed36beb-a892-4051-b7cb-c5a6fdae1016.png\"><img src=\"https://user-images.githubusercontent.com/92296835/199944719-9ed36beb-a892-4051-b7cb-c5a6fdae1016.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">clicking <code class=\"notranslate\">Back to Dashboard</code> works okay, so I am logged in and whole process was successful. However, for some reason the initial redirect kind of recognizes that I am logged in, but still implies that I am trying to do that again.</p>\n<p dir=\"auto\">If you have an idea if this might me my plugin-specific behaviour, or some Payload feature clashing with the hook, I would be very keen to get any type of feedback!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1347",
    "id": "1347",
    "createdAt": "2022-11-04T09:56:47Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "adam-mrozik",
      "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
      "url": "https://github.com/adam-mrozik"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">Were you able to figure out what was going on in your plugin? I don't think it is a Payload specific issue.</p>\n<p dir=\"auto\">What you might be up against is that the user object isn't being updated in Payload. There isn't method on the auth provider to do this. I think what typically would happen is that you have a full redirect or page load to update the user coming from the 3rd party auth provider.</p>\n<p dir=\"auto\">I hope that helps!</p>",
        "createdAt": "2023-02-03T16:08:19Z",
        "replies": [
          {
            "author": {
              "name": "adam-mrozik",
              "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
              "url": "https://github.com/adam-mrozik"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DanRibbens/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DanRibbens\">@DanRibbens</a> , partially - i just workaround it by reloading the page after successful login , which seems to work ok enough.</p>",
            "createdAt": "2023-02-04T12:41:34Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "DanRibbens",
        "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
        "url": "https://github.com/DanRibbens"
      },
      "body": "<p dir=\"auto\">Were you able to figure out what was going on in your plugin? I don't think it is a Payload specific issue.</p>\n<p dir=\"auto\">What you might be up against is that the user object isn't being updated in Payload. There isn't method on the auth provider to do this. I think what typically would happen is that you have a full redirect or page load to update the user coming from the 3rd party auth provider.</p>\n<p dir=\"auto\">I hope that helps!</p>",
      "createdAt": "2023-02-03T16:08:19Z",
      "chosenAt": "2023-02-09T15:52:26Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Collection BeforeChange Hook - acess to auto-generated ID",
    "body": "<p dir=\"auto\">Hi,<br>\nI would ask if there is a smart way to access payload generated <code class=\"notranslate\">ID</code> for collection in <code class=\"notranslate\">CollectionBeforeChangeHook</code>?</p>\n<p dir=\"auto\">Because right now, imagine the situation:</p>\n<ul dir=\"auto\">\n<li>Collection <code class=\"notranslate\">Users</code> has relation to collection <code class=\"notranslate\">BankAccount</code> and in opposite way relation also exist. It is one to one always.</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Users{\n userId: &lt;payloadGenerated&gt;\n bankAccountId: &lt;idFromBankCollection&gt;\n}\n\nBankAccount{\n bankAccoutnId: &lt;payloadGenerated&gt;\n owner: &lt;idFromUserCollection&gt;\n}\"><pre class=\"notranslate\"><span class=\"pl-v\">Users</span><span class=\"pl-kos\">{</span>\n <span class=\"pl-s1\">userId</span>: <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">payloadGenerated</span><span class=\"pl-c1\">&gt;</span>\n bankAccountId: <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">idFromBankCollection</span><span class=\"pl-c1\">&gt;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">BankAccount</span><span class=\"pl-kos\">{</span>\n <span class=\"pl-s1\">bankAccoutnId</span>: <span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">payloadGenerated</span><span class=\"pl-c1\">&gt;</span>\n <span class=\"pl-s1\">owner</span>: <span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">idFromUserCollection</span><span class=\"pl-c1\">&gt;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">For that case, I need two hooks:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">CollectionBeforeChange</code> on <code class=\"notranslate\">Users</code> to create as local API <code class=\"notranslate\">BankAccount document</code> and populate in <code class=\"notranslate\">Users</code> <code class=\"notranslate\">bankAccountId</code>.</li>\n<li><code class=\"notranslate\">CollectionAfterChange</code> on <code class=\"notranslate\">Users</code> to find and update as local API <code class=\"notranslate\">BankAccount document</code> with <code class=\"notranslate\">userId</code>.</li>\n</ul>\n<p dir=\"auto\">That is because in <code class=\"notranslate\">CollectionBeforeChangeHook</code> there is no pre-generated access to ID for not created yet User document. So is there a way to do it in a smarter way? Write own generation for ID on Users, and then use just one hook? But then I need own validations for checking if id is already existing?</p>\n<p dir=\"auto\">Maybe someone has better idea how to proceed with such cases? Or should I avoid bi-directional relations, and simple embedding them on users?</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1962",
    "id": "1962",
    "createdAt": "2023-01-28T12:28:18Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "dawidmachon",
      "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
      "url": "https://github.com/dawidmachon"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dawidmachon/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dawidmachon\">@dawidmachon</a> you're right in that if the operation is <code class=\"notranslate\">create</code>, there is not yet an ID to use. Your solution looks fine to me, does it work? Just to sum it up:</p>\n<ol dir=\"auto\">\n<li>Before a user is created, create a bank account and attach the <code class=\"notranslate\">bankAccountId</code> to the user</li>\n<li>After a user is created, lookup their bank account and update the <code class=\"notranslate\">owner</code> with their <code class=\"notranslate\">userId</code></li>\n</ol>\n<p dir=\"auto\">This will work for that initial connection but updates on either end of the relationship will also need to be wired in—and this may lead to infinite loops. There are ways around this, like maintaining a hidden <code class=\"notranslate\">skipHooks</code> field on the collection, I've done something similar to this in our <a href=\"https://github.com/payloadcms/plugin-stripe/blob/13ed91f0406341cd534e3c15555fe3f3224a7b61/src/hooks/syncExistingWithStripe.ts#L34\">Stripe plugin</a>. Others have run into this same need, though, and there's a community-supported plugin if you want to check it out: <a href=\"https://github.com/TimHal/pcms-backpop\">https://github.com/TimHal/pcms-backpop</a>. I have not tested this myself but it might work for you <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
        "createdAt": "2023-02-03T20:31:30Z",
        "replies": [
          {
            "author": {
              "name": "dawidmachon",
              "avatar": "https://avatars.githubusercontent.com/u/44931854?v=4",
              "url": "https://github.com/dawidmachon"
            },
            "body": "<p dir=\"auto\">great answer. Thanks a lot for your response! Great warning for infinite loops.<br>\nIt's working, but I was curious if there is a 'smarter' way to do this. ;) Thanks for plugin!</p>",
            "createdAt": "2023-02-03T23:06:50Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "jacobsfletch",
        "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
        "url": "https://github.com/jacobsfletch"
      },
      "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dawidmachon/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dawidmachon\">@dawidmachon</a> you're right in that if the operation is <code class=\"notranslate\">create</code>, there is not yet an ID to use. Your solution looks fine to me, does it work? Just to sum it up:</p>\n<ol dir=\"auto\">\n<li>Before a user is created, create a bank account and attach the <code class=\"notranslate\">bankAccountId</code> to the user</li>\n<li>After a user is created, lookup their bank account and update the <code class=\"notranslate\">owner</code> with their <code class=\"notranslate\">userId</code></li>\n</ol>\n<p dir=\"auto\">This will work for that initial connection but updates on either end of the relationship will also need to be wired in—and this may lead to infinite loops. There are ways around this, like maintaining a hidden <code class=\"notranslate\">skipHooks</code> field on the collection, I've done something similar to this in our <a href=\"https://github.com/payloadcms/plugin-stripe/blob/13ed91f0406341cd534e3c15555fe3f3224a7b61/src/hooks/syncExistingWithStripe.ts#L34\">Stripe plugin</a>. Others have run into this same need, though, and there's a community-supported plugin if you want to check it out: <a href=\"https://github.com/TimHal/pcms-backpop\">https://github.com/TimHal/pcms-backpop</a>. I have not tested this myself but it might work for you <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
      "createdAt": "2023-02-03T20:31:30Z",
      "chosenAt": "2023-02-03T23:06:52Z",
      "chosenBy": "dawidmachon"
    }
  },
  {
    "title": "BUG! cannot update draft",
    "body": "<h3 dir=\"auto\">The introduction to modifying the draft in the document is too simple, only adding a parameter of draft=true, can you provide a complete code example of modifying the draft?</h3>\n<h3 dir=\"auto\">After the update operation, the document changed from draft state to published, which is not what I expected, I just want to update the fields</h3>\n<p dir=\"auto\"><a href=\"https://payloadcms.com/docs/versions/drafts#database-changes\" rel=\"nofollow\">draft doc</a></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"await payload.update({\n  draft: true,\n  collection: 'articles',\n  id: xxx,\n  data: {\n    migratedFromContentful: false\n  },\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">await payload.update({\n  draft: true,\n  collection: 'articles',\n  id: xxx,\n  data: {\n    migratedFromContentful: false\n  },\n});\n</code></pre></div>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/195586694-a59acc6f-9bb8-48bf-a75c-4b42f8c962b8.png\"><img width=\"1026\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/195586694-a59acc6f-9bb8-48bf-a75c-4b42f8c962b8.png\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1251",
    "id": "1251",
    "createdAt": "2022-10-13T11:40:53Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zhounewz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhounewz\">@zhounewz</a> is this still an issue for you? Your request looks right to me, I see that you're setting <code class=\"notranslate\">draft: true</code> just as the docs indicate. What version of Payload are you on? Try bumping to latest and let me know if this persists.</p>",
        "createdAt": "2023-02-03T21:02:36Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Can the entry generated by the Duplicate operation be specified as draft state?",
    "body": "<p dir=\"auto\">Can the entry generated by the Duplicate operation be specified as draft state?</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/196084656-cd7fc768-51d0-4374-bd0e-54237954ae84.png\"><img width=\"406\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/196084656-cd7fc768-51d0-4374-bd0e-54237954ae84.png\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1268",
    "id": "1268",
    "createdAt": "2022-10-17T03:43:00Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zhounewz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhounewz\">@zhounewz</a>, this is now possible using the <code class=\"notranslate\">beforeDuplicate</code> <a href=\"https://payloadcms.com/docs/configuration/collections#admin-hooks\" rel=\"nofollow\">admin hook</a>.</p>\n<p dir=\"auto\">Here is an example of how this would look in your case:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const Posts: CollectionConfig = {\n  slug: 'posts',\n  admin: {\n    hooks: {\n      beforeDuplicate: ({ data }) =&gt; {\n        return {\n          ...data,\n          _status: 'draft',\n        };\n      },\n    },\n  },\n  versions: {\n    drafts: true,\n  },\n  fields: [\n    // ...\n  ],\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-smi\">Posts</span>: <span class=\"pl-smi\">CollectionConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">admin</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">hooks</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">beforeDuplicate</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> data <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n          ...<span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">_status</span>: <span class=\"pl-s\">'draft'</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">versions</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">drafts</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-c\">// ...</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Cheers!</p>",
        "createdAt": "2023-02-03T18:54:25Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "DanRibbens",
        "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
        "url": "https://github.com/DanRibbens"
      },
      "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zhounewz/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zhounewz\">@zhounewz</a>, this is now possible using the <code class=\"notranslate\">beforeDuplicate</code> <a href=\"https://payloadcms.com/docs/configuration/collections#admin-hooks\" rel=\"nofollow\">admin hook</a>.</p>\n<p dir=\"auto\">Here is an example of how this would look in your case:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const Posts: CollectionConfig = {\n  slug: 'posts',\n  admin: {\n    hooks: {\n      beforeDuplicate: ({ data }) =&gt; {\n        return {\n          ...data,\n          _status: 'draft',\n        };\n      },\n    },\n  },\n  versions: {\n    drafts: true,\n  },\n  fields: [\n    // ...\n  ],\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-smi\">Posts</span>: <span class=\"pl-smi\">CollectionConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">admin</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">hooks</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">beforeDuplicate</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> data <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n          ...<span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">_status</span>: <span class=\"pl-s\">'draft'</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">versions</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">drafts</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-c\">// ...</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Cheers!</p>",
      "createdAt": "2023-02-03T18:54:25Z",
      "chosenAt": "2023-02-06T23:17:23Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Question: Is there a recommended approach to split deployments?",
    "body": "<p dir=\"auto\">Hi all,</p>\n<p dir=\"auto\">Is there a recommended approach to split deployments, i.e. a separate deployment for Admin and API?</p>\n<p dir=\"auto\"><strong>Approaches we've considered</strong>:</p>\n<ul dir=\"auto\">\n<li>Use the <code class=\"notranslate\">disable</code> properties for Admin and GraphQL (but we weren't sure how to disable the REST API...)</li>\n<li>Disabling <a href=\"https://payloadcms.com/docs/access-control/overview\" rel=\"nofollow\">top level access</a> on internal deployment</li>\n</ul>\n<p dir=\"auto\"><strong>Use case</strong>:<br>\nMy team wants to externally expose the Admin panel, but keep the API internal—because our app hits a service that pulls from the CMS internally (+ Cloud CDN caching).</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1220",
    "id": "1220",
    "createdAt": "2022-10-07T15:16:13Z",
    "upvotes": 2,
    "commentTotal": 1,
    "author": {
      "name": "andwrobs",
      "avatar": "https://avatars.githubusercontent.com/u/101012384?u=716f55d08cbb33242adb1ebadfad47def9e98881&v=4",
      "url": "https://github.com/andwrobs"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Yes, you can—Payload's admin UI gets built to the <code class=\"notranslate\">build</code> folder, and if you place all of those files on a separate host, you can deploy them separately. Just make sure you have the proper <code class=\"notranslate\">serverURL</code> set, pointing at the backend API location, when you build the admin panel files. <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
        "createdAt": "2023-02-03T16:25:20Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "jmikrut",
        "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
        "url": "https://github.com/jmikrut"
      },
      "body": "<p dir=\"auto\">Yes, you can—Payload's admin UI gets built to the <code class=\"notranslate\">build</code> folder, and if you place all of those files on a separate host, you can deploy them separately. Just make sure you have the proper <code class=\"notranslate\">serverURL</code> set, pointing at the backend API location, when you build the admin panel files. <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
      "createdAt": "2023-02-03T16:25:20Z",
      "chosenAt": "2023-02-03T16:25:22Z",
      "chosenBy": "jmikrut"
    }
  },
  {
    "title": "Can you specify the scope of other Documents, because I don't want to have articles embedded in articles",
    "body": "<h3 dir=\"auto\">Can you specify the scope of other Documents, because I don't want to have articles embedded in articles</h3>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/196903042-040d91bd-8faf-49f2-8122-5ca32642eb93.png\"><img width=\"814\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/196903042-040d91bd-8faf-49f2-8122-5ca32642eb93.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16400882/196903096-93ff4c03-5467-4480-a6d8-36d071ac1e4c.png\"><img width=\"840\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16400882/196903096-93ff4c03-5467-4480-a6d8-36d071ac1e4c.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a href=\"https://payloadcms.com/docs/fields/rich-text#relationship-element\" rel=\"nofollow\">https://payloadcms.com/docs/fields/rich-text#relationship-element</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1281",
    "id": "1281",
    "createdAt": "2022-10-20T09:12:14Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "zhounewz",
      "avatar": "https://avatars.githubusercontent.com/u/16400882?u=0b9839b373d35997a96ca00f71550153d6c8d945&v=4",
      "url": "https://github.com/zhounewz"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Yes, you can use the <code class=\"notranslate\">admin.enableRichTextRelationship</code> property. Set it to false for any collection you don't want to be able to link to.</p>\n<p dir=\"auto\">Right now, rich text uploads offer a bit more granularity here, as you can specifically whitelist collections to be able to select from on a field-by-field basis. But in the future we should be able to add more granularity to do this with rich text relationships too. <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
        "createdAt": "2023-02-03T16:24:17Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "jmikrut",
        "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
        "url": "https://github.com/jmikrut"
      },
      "body": "<p dir=\"auto\">Yes, you can use the <code class=\"notranslate\">admin.enableRichTextRelationship</code> property. Set it to false for any collection you don't want to be able to link to.</p>\n<p dir=\"auto\">Right now, rich text uploads offer a bit more granularity here, as you can specifically whitelist collections to be able to select from on a field-by-field basis. But in the future we should be able to add more granularity to do this with rich text relationships too. <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>",
      "createdAt": "2023-02-03T16:24:17Z",
      "chosenAt": "2023-02-03T16:24:19Z",
      "chosenBy": "jmikrut"
    }
  },
  {
    "title": "How to construct \"not like\" logic with graphql api?",
    "body": "<p dir=\"auto\">Currently, I only see these operators in the query filter.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/5801015/197687694-bd77de56-af68-4fd2-91d5-24c8b3c48ca9.png\"><img width=\"910\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5801015/197687694-bd77de56-af68-4fd2-91d5-24c8b3c48ca9.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">I'm expecting sth like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"slug: {\n  not: {\n    contains: &quot;demo&quot;\n  }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">slug: {\n  not: {\n    contains: \"demo\"\n  }\n}\n</code></pre></div>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/5801015/197688044-23a5ebc9-8fbc-4a56-a3b7-562c548e7be0.png\"><img width=\"874\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5801015/197688044-23a5ebc9-8fbc-4a56-a3b7-562c548e7be0.png\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1294",
    "id": "1294",
    "createdAt": "2022-10-25T05:13:16Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Stupidism/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Stupidism\">@Stupidism</a> — we don't currently have an operator that could represent <code class=\"notranslate\">not like</code> but it could definitely be built. If you're up for making a PR, we would happily accept it!</p>",
        "createdAt": "2023-02-03T16:21:32Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "jmikrut",
        "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
        "url": "https://github.com/jmikrut"
      },
      "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Stupidism/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Stupidism\">@Stupidism</a> — we don't currently have an operator that could represent <code class=\"notranslate\">not like</code> but it could definitely be built. If you're up for making a PR, we would happily accept it!</p>",
      "createdAt": "2023-02-03T16:21:32Z",
      "chosenAt": "2023-02-09T16:32:02Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Relationship field and array limit - Errors: 429 (Too Many Requests) and 431 (Request Header Fields Too Large)",
    "body": "<p dir=\"auto\">Hello,</p>\n<p dir=\"auto\">Is there a limit to how many item can be in a Relationship and Array fields?</p>\n<p dir=\"auto\">For 260+ items in a relationship field I am getting the <strong>431 (Request Header Fields Too Large)</strong> error.</p>\n<p dir=\"auto\">And also, if I create an array component with a relationship field as the only field, I am getting the <strong>429 (Too Many Requests)</strong> error.</p>\n<p dir=\"auto\">Is there a way to have 300+ items within a relationship field or in the array component with a single relationship field?</p>\n<p dir=\"auto\">Thank you,<br>\nVitaly</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1977",
    "id": "1977",
    "createdAt": "2023-01-30T20:09:07Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "vstarush",
      "avatar": "https://avatars.githubusercontent.com/u/10617969?v=4",
      "url": "https://github.com/vstarush"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/vstarush/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vstarush\">@vstarush</a>,</p>\n<p dir=\"auto\">I haven't tested with as many as you're saying so I haven't seen this before. Payload doesn't impose any limits, so what you're seeing must be a browser / http limitation.</p>\n<p dir=\"auto\">What is the endpoint is hitting this header size limit error? Can you share what the request looks like from your browser network tab and we can troubleshoot and possibly optimize how the request is made.</p>\n<p dir=\"auto\">Also sharing your payload config or a reproduction repo can also help me understand what you're trying to model and we can come up with a workaround.</p>\n<p dir=\"auto\">Thanks!</p>",
        "createdAt": "2023-02-03T16:16:02Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Static options are ignored using plugin-cloud-storage",
    "body": "<p dir=\"auto\">Hi! First of all: thank you very much for this great product!</p>\n<p dir=\"auto\">I am using the <code class=\"notranslate\">plugin-cloud-storage</code> (+ gcp adapter) plugin and I noticed that the static options of my <code class=\"notranslate\">Media</code> model are being ignored. Any idea? (I'm trying to enable the cache headers)</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1486",
    "id": "1486",
    "createdAt": "2022-11-22T16:06:29Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "krthr",
      "avatar": "https://avatars.githubusercontent.com/u/18665740?u=004b6812260918c5e365cc040fcea97ddfa1382b&v=4",
      "url": "https://github.com/krthr"
    },
    "comments": [
      {
        "author": {
          "name": "denolfe",
          "avatar": "https://avatars.githubusercontent.com/u/65888?v=4",
          "url": "https://github.com/denolfe"
        },
        "body": "<p dir=\"auto\">Can you provide your media config?</p>",
        "createdAt": "2023-02-03T15:22:00Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Better ordering of groups of globals & collections",
    "body": "<p dir=\"auto\">Really appreciate the recently added feature to set a custom <code class=\"notranslate\">group</code> values on collections and globals! This alone already allows organizing collections &amp; globals into more meaningful &amp; user-friendly groups.</p>\n<p dir=\"auto\">The last piece missing for us to make the overall organization perfect is the sorting order across collections &amp; globals. It looks like the order of groups is currently defined by the order in which collections &amp; globals as passed into the payload config. Where this falls short is if we want e.g. a group of globals at the top.</p>\n<p dir=\"auto\">A practical example:</p>\n<ul dir=\"auto\">\n<li>Layout\n<ul dir=\"auto\">\n<li>Header <em>(global)</em></li>\n<li>Footer <em>(global)</em></li>\n<li>Homepage <em>(global)</em></li>\n</ul>\n</li>\n<li>Catalogs\n<ul dir=\"auto\">\n<li>Catalog Type A <em>(collection)</em></li>\n<li>Catalog Type B <em>(collection)</em></li>\n</ul>\n</li>\n<li>Content\n<ul dir=\"auto\">\n<li>Some Other Global <em>(global)</em></li>\n<li>Some Other Collection <em>(collection)</em></li>\n</ul>\n</li>\n<li>…</li>\n</ul>\n<p dir=\"auto\">This currently does not seem supported, outside of creating a custom navbar component just for this.</p>\n<p dir=\"auto\">Some potential approaches how this could be achieved:</p>\n<ul dir=\"auto\">\n<li>A new global payload config entry, e.g. <code class=\"notranslate\">admin.groups</code> or <code class=\"notranslate\">admin.knownGroups</code> of type <code class=\"notranslate\">string[]</code>\n<ul dir=\"auto\">\n<li>this would specify the primary order of groups; if a group ends up with no collections, it can be skipped.</li>\n<li>if collections are listed with a group not in the list, they get appended</li>\n<li>might be the easiest add, but it does not allow for granular intra-group ordering (e.g. a group with a global, a collection, and then another global, in this order)</li>\n</ul>\n</li>\n<li>A new entry on collections &amp; globals, e.g. <code class=\"notranslate\">admin.sort</code> or <code class=\"notranslate\">admin.order</code> of type <code class=\"notranslate\">number</code>\n<ul dir=\"auto\">\n<li>would allow for perfect, granular control over sorting orders across all types</li>\n<li>would also be a bit ugly to maintain, as weights are spread across collections &amp; globals</li>\n</ul>\n</li>\n<li>Migrating from separate <code class=\"notranslate\">collections</code> vs <code class=\"notranslate\">globals</code> arrays on the payload config into a single  entry, e.g. <code class=\"notranslate\">schemas</code>\n<ul dir=\"auto\">\n<li>this array would then define the order of all collections/entries in a single place</li>\n<li>does break the current schema, but could be done in a backwards-compatible way</li>\n<li>would require some extra <code class=\"notranslate\">global</code> flag on collections vs globals to differentiate the two</li>\n<li>would definitely muddy the water for the payload config while backwards compatibility is maintained</li>\n</ul>\n</li>\n</ul>",
    "url": "https://github.com/payloadcms/payload/discussions/1277",
    "id": "1277",
    "createdAt": "2022-10-19T13:13:57Z",
    "upvotes": 4,
    "commentTotal": 2,
    "author": {
      "name": "echocrow",
      "avatar": "https://avatars.githubusercontent.com/u/5488190?u=2d7f2f58b5cc9d5848cd0e0226f70512ceea6bd8&v=4",
      "url": "https://github.com/echocrow"
    },
    "comments": [
      {
        "author": {
          "name": "echocrow",
          "avatar": "https://avatars.githubusercontent.com/u/5488190?u=2d7f2f58b5cc9d5848cd0e0226f70512ceea6bd8&v=4",
          "url": "https://github.com/echocrow"
        },
        "body": "<p dir=\"auto\">Happy to help out with this btw! But would like some guidance on the approach first.</p>\n<p dir=\"auto\">Assuming no refactors along the lines of merging collections and globals are planned, I reckon a simple <code class=\"notranslate\">admin.groups</code> <code class=\"notranslate\">string[]</code> property on the config might be a simple, incremental feature, and potentially a good first issue?</p>",
        "createdAt": "2022-10-30T18:49:52Z",
        "replies": [
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/echocrow/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/echocrow\">@echocrow</a> I remember thinking about this exact limitation being possible when writing the groups feature and dismissing it in my head as an unlikely edge case. Haha! This discussion appeared much quicker than I expected.</p>\n<p dir=\"auto\">How about this?</p>\n<p dir=\"auto\">Let's add a new property at the top of the config in <code class=\"notranslate\">admin.sortGroups</code>. This will be a function that is called with the default order that Payload currently does but allows you to return your desired order instead.</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"buildConfig({\n  admin: {\n\tsortGroups: (groups: string[]]): string[] =&gt; {\n\t\t// you could write a function to sort and return the or hard-code your desired order\n\t\treturn ['Layout', 'Catalogs', 'Content' //...];\n    }\n  },\n  collections: [ //...],\n  globals: [//...]\n});\"><pre class=\"notranslate\"><span class=\"pl-s1\">buildConfig</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">admin</span>: <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-c1\">sortGroups</span>: <span class=\"pl-kos\">(</span><span class=\"pl-s1\">groups</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>: string<span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-c\">// you could write a function to sort and return the or hard-code your desired order</span>\n\t\treturn<span class=\"pl-kos\"></span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">'Layout'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Catalogs'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Content'</span> <span class=\"pl-c\">//...];</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s1\">collections</span>: <span class=\"pl-kos\">[</span> <span class=\"pl-c\">//...],</span>\n  <span class=\"pl-s1\">globals</span>: <span class=\"pl-kos\">[</span><span class=\"pl-c\">//...]</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">I'd consider not showing the groups if they don't come back from the function, but this would be a strange workaround for hiding collections, curious what others think about this. Maybe allow <code class=\"notranslate\">group: false</code> to be set on the collections or globals to hide them from the nav as another feature that addresses it more direct?</p>\n<p dir=\"auto\">This way we're not introducing any deprecation changes, the global and collection config types are not complicated and there is not an arbitrary sort number to maintain. For the 99% of people already using this feature they can continue to rely on Payload's default way of handling it. Then the others that have your issue (global only group coming first) has a way to override it however way they want in code.</p>\n<p dir=\"auto\">I'm open to feedback on how to imporove this idea. Full transparency, this is not a high priority for our team at the moment.</p>",
            "createdAt": "2022-10-30T20:25:42Z"
          },
          {
            "author": {
              "name": "echocrow",
              "avatar": "https://avatars.githubusercontent.com/u/5488190?u=2d7f2f58b5cc9d5848cd0e0226f70512ceea6bd8&v=4",
              "url": "https://github.com/echocrow"
            },
            "body": "<blockquote>\n<p dir=\"auto\">Haha! This discussion appeared much quicker than I expected.</p>\n</blockquote>\n<p dir=\"auto\">guilty as charged <g-emoji class=\"g-emoji\" alias=\"sweat_smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f605.png\">😅</g-emoji></p>\n<blockquote>\n<p dir=\"auto\">I'd consider not showing the groups if they don't come back from the function, but this would be a strange workaround for hiding collections, curious what others think about this. Maybe allow group: false to be set on the collections or globals to hide them from the nav as another feature that addresses it more direct?</p>\n</blockquote>\n<p dir=\"auto\">agreed that this seems like a strange workaround. a more explicit <code class=\"notranslate\">group: false</code> or <code class=\"notranslate\">hidden: true</code> on the respective collection would seem more declarative</p>\n<blockquote>\n<p dir=\"auto\">Let's add a new property at the top of the config in admin.sortGroups. This will be a function that is called with the default order that Payload currently does but allows you to return your desired order instead.</p>\n</blockquote>\n<p dir=\"auto\">this works, but might be a bit more verbose than necessary? especially if, at the end, groups <em>not</em> returned or explicitly listed should still be listed.</p>\n<p dir=\"auto\">are there other benefits to making this a function, rather than a <code class=\"notranslate\">string[]</code>? e.g.</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"buildConfig({\n  collections: [ //...],\n  globals: [//...],\n  admin: {\n    groups: ['Layout', 'Catalogs', 'Content', /*...*/],\n  },\n});\"><pre class=\"notranslate\"><span class=\"pl-s1\">buildConfig</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">collections</span>: <span class=\"pl-kos\">[</span> <span class=\"pl-c\">//...],</span>\n  <span class=\"pl-s1\">globals</span>: <span class=\"pl-kos\">[</span><span class=\"pl-c\">//...],</span>\n  <span class=\"pl-s1\">admin</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">groups</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'Layout'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Catalogs'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Content'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">/*...*/</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">that said, a function could provide the exact same, and potentially offer more flexibility around sorting if, for whatever reason, necessary?<br>\npersonally a fan of keeping things simple though; support for a function could also be added later, while still supporting a string array too (i.e. expanding this config to <code class=\"notranslate\">string[] | (groups: string[]) =&gt; string[]</code>)</p>\n<p dir=\"auto\">with the <code class=\"notranslate\">string[]</code> approach (or maybe even the function), the following steps could handle the normal cases and the edge cases of \"missing\"/unlisted groups:</p>\n<ol dir=\"auto\">\n<li>use <code class=\"notranslate\">config.admin.groups</code> as starting ground (default to empty array)</li>\n<li>for each collection:\n<ol dir=\"auto\">\n<li>get the group (default to <code class=\"notranslate\">Collections</code> - or whatever the current collection default is)</li>\n<li>append to groups list if not already present</li>\n</ol>\n</li>\n<li>for each global:\n<ol dir=\"auto\">\n<li>get the group (default to <code class=\"notranslate\">Globals</code> - or whatever the current global default is)</li>\n<li>append to groups list if not already present</li>\n</ol>\n</li>\n<li>remove empty groups (probably no reason for them to stick around?)</li>\n</ol>\n<blockquote>\n<p dir=\"auto\">Full transparency, this is not a high priority for our team at the moment.</p>\n</blockquote>\n<p dir=\"auto\">yeah I assumed as much, given this is probably a niche case. that said, i'd be happy to work on a PR if there is a change this feature may get accepted</p>",
            "createdAt": "2022-10-31T16:58:35Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\">Yeah I guess I don't feel too strongly about function vs string[] or both.</p>\n<p dir=\"auto\">We can just concat any missed groups on the end, whether it is a function or not. That would be super simple.</p>\n<p dir=\"auto\">Agreed, <code class=\"notranslate\">admin.hidden: boolean</code> makes the most sense on hidding collections from the admin UI.</p>\n<p dir=\"auto\">I'd like to get consensus on the feature from other devs too before we consider before starting on a PR.</p>\n<p dir=\"auto\">Thanks, stay tuned!</p>",
            "createdAt": "2022-10-31T17:46:21Z"
          }
        ]
      },
      {
        "author": {
          "name": "ChrisGV04",
          "avatar": "https://avatars.githubusercontent.com/u/47041342?u=76f483c754eb2506445bb063e3c07c3b5935d384&v=4",
          "url": "https://github.com/ChrisGV04"
        },
        "body": "<p dir=\"auto\">This would be really useful to order the collections and globals in a meaningful way. It's kind of odd in some cases where we can't order the items in a group to match the logical way we would expect to find them in.</p>\n<p dir=\"auto\">Is there any news on this topic?</p>",
        "createdAt": "2023-01-17T22:48:23Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "support superjson transformer",
    "body": "<p dir=\"auto\">When serializing data sent from payload, it would be great to add a custom transformer, like <a href=\"https://github.com/blitz-js/superjson\"><code class=\"notranslate\">superjson</code></a>. Is this currently possible?</p>\n<p dir=\"auto\">I think it's possible to pass <code class=\"notranslate\">superjson</code> and the <a href=\"https://expressjs.com/en/api.html\" rel=\"nofollow\">revive argument to JSON.parse</a>, but I'm not sure if payload exposes the stringify method.</p>\n<p dir=\"auto\">Thank you</p>",
    "url": "https://github.com/payloadcms/payload/discussions/2008",
    "id": "2008",
    "createdAt": "2023-02-02T21:39:01Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "charkour",
      "avatar": "https://avatars.githubusercontent.com/u/33156025?u=9a8734e319690ab1a56112fa9414693f5b6adad3&v=4",
      "url": "https://github.com/charkour"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "generate:types hangs forever after successly writing into output file",
    "body": "<p dir=\"auto\">It just hangs forever</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n&gt; nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types for Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts\"><pre class=\"notranslate\">PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n<span class=\"pl-k\">&gt;</span> nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types <span class=\"pl-k\">for</span> Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts</pre></div>\n<p dir=\"auto\">I don't know the reason this happened yet. Maybe it's because I'm using ts-node.</p>\n<h1 dir=\"auto\">Workaround</h1>\n<ol dir=\"auto\">\n<li>Open the binary file :</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"code node_modules/payload/dist/bin/generateTypes.js\"><pre class=\"notranslate\"><code class=\"notranslate\">code node_modules/payload/dist/bin/generateTypes.js\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Add an exit command:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\"><pre class=\"notranslate\">        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Use <code class=\"notranslate\">patch-package</code> to persist the change</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npx patch-package payload\"><pre class=\"notranslate\"><code class=\"notranslate\">npx patch-package payload\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>You will get patch file for payload like this:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js\nindex 357e56d..f805a31 100644\n--- a/node_modules/payload/dist/bin/generateTypes.js\n+++ b/node_modules/payload/dist/bin/generateTypes.js\n@@ -393,6 +393,7 @@ function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\n     });\n }\n exports.generateTypes = generateTypes;\"><pre class=\"notranslate\"><span class=\"pl-c1\">diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js</span>\nindex 357e56d..f805a31 100644\n<span class=\"pl-md\">--- a/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mi1\">+++ b/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mdr\">@@ -393,6 +393,7 @@</span> function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span>\n     });\n }\n exports.generateTypes = generateTypes;</pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2003",
    "id": "2003",
    "createdAt": "2023-02-02T16:56:05Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "generate:types hangs forever after successly writing into output file",
    "body": "<p dir=\"auto\">It just hangs forever</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n&gt; nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types for Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts\"><pre class=\"notranslate\">PAYLOAD_CONFIG_PATH=apps/xxx/src/payload.config.ts ts-node --project apps/xxx/tsconfig.app.json -r tsconfig-paths/register ./node_modules/payload/dist/bin/index.js generate:types\n\n<span class=\"pl-k\">&gt;</span> nx run payload-types:generate\n\n[16:48:39] INFO (payload): Compiling TS types <span class=\"pl-k\">for</span> Collections and Globals...\n[16:48:39] INFO (payload): Types written to libs/payload-types/src/generated/payload-types.ts</pre></div>\n<p dir=\"auto\">I don't know the reason this happened yet. Maybe it's because I'm using ts-node.</p>\n<h1 dir=\"auto\">Workaround</h1>\n<ol dir=\"auto\">\n<li>Open the binary file :</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"code node_modules/payload/dist/bin/generateTypes.js\"><pre class=\"notranslate\"><code class=\"notranslate\">code node_modules/payload/dist/bin/generateTypes.js\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Add an exit command:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\"><pre class=\"notranslate\">        fs_1.default.writeFileSync(outputFile, compiled);\n        logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Use <code class=\"notranslate\">patch-package</code> to persist the change</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npx patch-package payload\"><pre class=\"notranslate\"><code class=\"notranslate\">npx patch-package payload\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>You will get patch file for payload like this:</li>\n</ol>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js\nindex 357e56d..f805a31 100644\n--- a/node_modules/payload/dist/bin/generateTypes.js\n+++ b/node_modules/payload/dist/bin/generateTypes.js\n@@ -393,6 +393,7 @@ function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n+        process.exit(0);\n     });\n }\n exports.generateTypes = generateTypes;\"><pre class=\"notranslate\"><span class=\"pl-c1\">diff --git a/node_modules/payload/dist/bin/generateTypes.js b/node_modules/payload/dist/bin/generateTypes.js</span>\nindex 357e56d..f805a31 100644\n<span class=\"pl-md\">--- a/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mi1\">+++ b/node_modules/payload/dist/bin/generateTypes.js</span>\n<span class=\"pl-mdr\">@@ -393,6 +393,7 @@</span> function generateTypes() {\n     }).then((compiled) =&gt; {\n         fs_1.default.writeFileSync(outputFile, compiled);\n         logger.info(`Types written to ${outputFile}`);\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        process.exit(0);</span>\n     });\n }\n exports.generateTypes = generateTypes;</pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/2002",
    "id": "2002",
    "createdAt": "2023-02-02T16:56:04Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "Stupidism",
      "avatar": "https://avatars.githubusercontent.com/u/5801015?u=c802946f2083746bf933ce14965fffba46b39219&v=4",
      "url": "https://github.com/Stupidism"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Support Postgres for DB over MongoDB",
    "body": "<p dir=\"auto\">Postgres also support JSON data type<br>\nPostgres architecture is easy to deploy and maintain instead of clusters.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/654",
    "id": "654",
    "createdAt": "2022-06-14T15:11:07Z",
    "upvotes": 9,
    "commentTotal": 1,
    "author": {
      "name": "kaushalyap",
      "avatar": "https://avatars.githubusercontent.com/u/24698778?v=4",
      "url": "https://github.com/kaushalyap"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/kaushalyap/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kaushalyap\">@kaushalyap</a> — this is on our radar actually:</p>\n<p dir=\"auto\"><a aria-label=\"Discussion #287\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3513774\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/287\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/287/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/287\">#287</a></p>\n<p dir=\"auto\">We are not committing to a timeframe, because it will involve some infrastructural changes, and it would require us to start thinking about things like migrations—but it is certainly on the radar.</p>\n<p dir=\"auto\">I will try and report back here if / when we have any updates for you!</p>",
        "createdAt": "2022-06-14T20:00:29Z",
        "replies": [
          {
            "author": {
              "name": "charkour",
              "avatar": "https://avatars.githubusercontent.com/u/33156025?u=9a8734e319690ab1a56112fa9414693f5b6adad3&v=4",
              "url": "https://github.com/charkour"
            },
            "body": "<p dir=\"auto\">The choice of Mongo over a SQL-based DB was the biggest downside of choosing Payload. Adding PSQL support would be a game-changer since our schema heavily relies on relations.</p>\n<p dir=\"auto\">Adding SQL support means we could also use Planetscale which would allow our team an easy way to mitigate downtime during DB schema migrations.</p>",
            "createdAt": "2023-02-02T14:59:44Z"
          },
          {
            "author": {
              "name": "DanRibbens",
              "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
              "url": "https://github.com/DanRibbens"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/charkour/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/charkour\">@charkour</a>, you're lin luck!<br>\nThis is planned in another discussion, see roadmap item: <a aria-label=\"Discussion #287\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3513774\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/287\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/287/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/287\">#287</a></p>",
            "createdAt": "2023-02-02T15:03:23Z"
          },
          {
            "author": {
              "name": "charkour",
              "avatar": "https://avatars.githubusercontent.com/u/33156025?u=9a8734e319690ab1a56112fa9414693f5b6adad3&v=4",
              "url": "https://github.com/charkour"
            },
            "body": "<p dir=\"auto\">Thanks <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DanRibbens/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DanRibbens\">@DanRibbens</a>! Was just reading through that as well haha</p>",
            "createdAt": "2023-02-02T15:04:53Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Could `upload.staticURL` be an absolute URL?",
    "body": "<p dir=\"auto\">As per code <a href=\"https://github.com/payloadcms/payload/blob/master/src/uploads/getBaseFields.ts\">here</a> and <a href=\"https://github.com/payloadcms/payload/blob/master/src/admin/hooks/useThumbnail.ts\">here</a> the <code class=\"notranslate\">staticURL</code> property is a segment of the final URL.</p>\n<p dir=\"auto\">This means that I cannot declare (in any way) a <code class=\"notranslate\">distribution</code>  URL (maybe behind CDN) where to make my media publicly available.</p>\n<p dir=\"auto\">For example, if I set the staticURL to <a href=\"https://my-media-dam.com\" rel=\"nofollow\">https://my-media-dam.com</a> the result will be <code class=\"notranslate\">http://localhost:3000https://my-media-dam.com/my-media-1.jpg</code> instead of <code class=\"notranslate\">https://my-media-dam.com/my-media-1.jpg</code></p>",
    "url": "https://github.com/payloadcms/payload/discussions/2001",
    "id": "2001",
    "createdAt": "2023-02-02T14:31:16Z",
    "upvotes": 1,
    "commentTotal": 0,
    "author": {
      "name": "finkinfridom",
      "avatar": "https://avatars.githubusercontent.com/u/6241121?u=4eb3163bccdda63312cce209a93e74364f624ad7&v=4",
      "url": "https://github.com/finkinfridom"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Upload collection should allow providing a description/hint message for the upload field",
    "body": "<p dir=\"auto\">We use several <code class=\"notranslate\">upload</code>- based collections, one of which has a long list of available <code class=\"notranslate\">mimeTypes</code>.<br>\nUnfortunately, the users cannot know in advance which are the allowed types and we cannot provide a meaningful description of them.<br>\nCould be an option to have an <code class=\"notranslate\">hintText</code> or <code class=\"notranslate\">description</code> into <code class=\"notranslate\">admin.upload</code> object?</p>\n<p dir=\"auto\">Thanks</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1998",
    "id": "1998",
    "createdAt": "2023-02-02T10:08:35Z",
    "upvotes": 2,
    "commentTotal": 0,
    "author": {
      "name": "finkinfridom",
      "avatar": "https://avatars.githubusercontent.com/u/6241121?u=4eb3163bccdda63312cce209a93e74364f624ad7&v=4",
      "url": "https://github.com/finkinfridom"
    },
    "comments": [],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "flattenFields doesn't work if field with sub-fields has a Name",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n\n<p dir=\"auto\">If collection config have fields with type:</p>\n<ul dir=\"auto\">\n<li>array</li>\n<li>row</li>\n<li>group</li>\n<li>collapsible</li>\n</ul>\n<p dir=\"auto\">And they have a name, flattenFields will skip sub-fields</p>\n<h2 dir=\"auto\">Steps to Reproduce</h2>\n\n<ol dir=\"auto\">\n<li>Create a colection config with array or group field</li>\n<li>Add name to the field</li>\n<li>Check the result of flattenFields</li>\n</ol>\n<h2 dir=\"auto\">Other Details</h2>\n<p dir=\"auto\">Caused by this <a href=\"https://github.com/payloadcms/payload/blob/master/src/utilities/flattenTopLevelFields.ts#L13\">check</a>, it'd be better to first check if field have a sub-fields despite having a name, then if it doesn't check for a name and return new array</p>\n\n",
    "url": "https://github.com/payloadcms/payload/discussions/1971",
    "id": "1971",
    "createdAt": "2023-01-30T14:24:18Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "HoneySpace",
      "avatar": "https://avatars.githubusercontent.com/u/51043116?v=4",
      "url": "https://github.com/HoneySpace"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/HoneySpace/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/HoneySpace\">@HoneySpace</a> — this is actually working as intended, although the function could be misleading. It does not flatten ALL fields, it only flattens the fields that exist within a non-named field.</p>\n<p dir=\"auto\">What are you looking to do? Can I help? Gonna convert this to a discussion to keep it going.</p>",
        "createdAt": "2023-01-30T15:10:06Z",
        "replies": [
          {
            "author": {
              "name": "HoneySpace",
              "avatar": "https://avatars.githubusercontent.com/u/51043116?v=4",
              "url": "https://github.com/HoneySpace"
            },
            "body": "<p dir=\"auto\">Well, I was actualy trying to extend search cappabilities, since Payload API supporst search in nested fields, all I needed was to change how fields get seleceted for building query</p>\n<p dir=\"auto\">I changed flatten fucntion so it flatten all fields and added extra function to crawl through first-level fields to add collection fields to relationship fields<br>\nNow I have very flexable search controled just by listSearchableFields</p>",
            "createdAt": "2023-02-01T14:57:09Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Improved typescript experience",
    "body": "<p dir=\"auto\">Payload has been a typescript project since it launched and there have been large improvements over time. Now we want to address more typescript sticking points to make working with Payload even better.</p>\n<p dir=\"auto\">Below are some of the items we are interested in:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">create</code> and <code class=\"notranslate\">update</code> local operations do not validate incoming data according to the passed generic type</li>\n<li><code class=\"notranslate\">collection</code> slug is not typed</li>\n<li>The Payload base class does not have types for what collections are available, etc.</li>\n<li>Can we remove the need for generating types and maybe write out a declaration file dynamically that includes all of those types? If not:</li>\n<li>Improve generated types - Right now all of our local APIs are generics, but what if we could assume the types from the passed collection string?</li>\n<li>Generated relationship field <code class=\"notranslate\">string | RelationshipType</code> is not ideal. There are cases where you know that the doc is populated, so we should enforce <code class=\"notranslate\">RelationshipType</code> and disregard <code class=\"notranslate\">string</code></li>\n</ul>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/echocrow/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/echocrow\">@echocrow</a> offered up some great detail for some of these in <a aria-label=\"Discussion #1319\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4522241\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1319\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1319/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1319\">#1319</a>.</p>\n<p dir=\"auto\">Related:</p>\n<ul dir=\"auto\">\n<li><a aria-label=\"Discussion #1851\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4747786\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1851\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1851/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1851\">#1851</a></li>\n</ul>",
    "url": "https://github.com/payloadcms/payload/discussions/1563",
    "id": "1563",
    "createdAt": "2022-12-01T16:12:47Z",
    "upvotes": 16,
    "commentTotal": 4,
    "author": {
      "name": "DanRibbens",
      "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
      "url": "https://github.com/DanRibbens"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Update - progress is going well! New patterns are being defined in the WIP PR below:</p>\n<p dir=\"auto\"><a aria-label=\"Pull request #1854\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1529769830\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/1854\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/1854/hovercard\" href=\"https://github.com/payloadcms/payload/pull/1854\">#1854</a></p>\n<p dir=\"auto\">One of the next things on the radar (if anyone in the community is up for helping) is to create a set of TypeScript utilities that can take in an auto-generated collection / global type and \"flatten\" relationships into only an ID.</p>\n<p dir=\"auto\">Right now, our exported types are as safe as possible when it comes to relationship fields.</p>\n<p dir=\"auto\">For example, let's take the following configs:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const categories: CollectionConfig = {\n  slug: 'categories',\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n      required: true,\n    }\n  ]\n}\n\nconst posts: CollectionConfig = {\n  slug: 'posts',\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n      required: 'true',\n    },\n    {\n      name: 'category',\n      type: 'relationship',\n      relationTo: 'categories',\n      required: true,\n    }\n  ]\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">categories</span>: <span class=\"pl-smi\">CollectionConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">'categories'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'title'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'text'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">posts</span>: <span class=\"pl-smi\">CollectionConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'title'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'text'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">required</span>: <span class=\"pl-s\">'true'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'category'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">'relationship'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">relationTo</span>: <span class=\"pl-s\">'categories'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Auto-generating types for these collections will result in the following:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"export interface Category {\n  title: string\n}\n\nexport interface Post {\n  title: string\n  category: string | Category // could be populated, could not be\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">export</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Category</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">title</span>: <span class=\"pl-smi\">string</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Post</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">title</span>: <span class=\"pl-smi\">string</span>\n  <span class=\"pl-c1\">category</span>: <span class=\"pl-smi\">string</span> <span class=\"pl-c1\">|</span> <span class=\"pl-smi\">Category</span> <span class=\"pl-c\">// could be populated, could not be</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">You'll see that the <code class=\"notranslate\">category</code> property of <code class=\"notranslate\">Post</code> is set up to be typed for being populated OR not being populated.</p>\n<h4 dir=\"auto\">The task at hand</h4>\n<p dir=\"auto\">It would be great to have a TS utility that takes an auto-generated interface and flatten any unions into only the interfaces, or only the \"basic\" types of <code class=\"notranslate\">string</code> or <code class=\"notranslate\">number</code>.</p>\n<p dir=\"auto\">This would be handy for typing the <code class=\"notranslate\">data</code> argument of local API functions like <code class=\"notranslate\">payload.update</code>, <code class=\"notranslate\">payload.create</code>, etc.</p>\n<p dir=\"auto\">Here's the intended API:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type PostData = CreateData&lt;Post&gt;\n\n// PostData would be transformed into:\n\n// {\n//   title: string\n//   category: string\n// }\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-smi\">PostData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">CreateData</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Post</span><span class=\"pl-kos\">&gt;</span>\n\n<span class=\"pl-c\">// PostData would be transformed into:</span>\n\n<span class=\"pl-c\">// {</span>\n<span class=\"pl-c\">//   title: string</span>\n<span class=\"pl-c\">//   category: string</span>\n<span class=\"pl-c\">// }</span></pre></div>\n<p dir=\"auto\">Additionally, we could create a utility that would dynamically specify population depth, as such:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type PostData = WithDepth&lt;Post, 2&gt;\n\n// PostData would be transformed into:\n\n// {\n//   title: string\n//   category: WithDepth&lt;Category, 1&gt;\n// }\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-smi\">PostData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">WithDepth</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Post</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">&gt;</span>\n\n<span class=\"pl-c\">// PostData would be transformed into:</span>\n\n<span class=\"pl-c\">// {</span>\n<span class=\"pl-c\">//   title: string</span>\n<span class=\"pl-c\">//   category: WithDepth&lt;Category, 1&gt;</span>\n<span class=\"pl-c\">// }</span></pre></div>\n<p dir=\"auto\">We are going to be looking into building this stuff over the next few weeks but would love a hand from anyone willing to contribute!</p>",
        "createdAt": "2023-01-13T16:48:44Z",
        "replies": [
          {
            "author": {
              "name": "echocrow",
              "avatar": "https://avatars.githubusercontent.com/u/5488190?u=2d7f2f58b5cc9d5848cd0e0226f70512ceea6bd8&v=4",
              "url": "https://github.com/echocrow"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> took a quick new stab at this.</p>\n<p dir=\"auto\">The following repo does what you were asking for, but little more:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://stackblitz.com/edit/payload-cms-relation-types-01?file=index.ts&amp;view=editor\" rel=\"nofollow\">https://stackblitz.com/edit/payload-cms-relation-types-01?file=index.ts&amp;view=editor</a></li>\n</ul>\n<p dir=\"auto\">Note that this is not yet a complete solution for all edge cases, such as one-to-many relationships (<code class=\"notranslate\">string[] | OtherCollection[]</code>), or \"complex\" non-relation types (e.g. <code class=\"notranslate\">string | number</code>). I believe those edge cases can be resolved with a bit more tinkering though.</p>\n<p dir=\"auto\">Specifically discriminating relationship from complex types (e.g. <code class=\"notranslate\">string | MyCollection</code> vs <code class=\"notranslate\">string | number</code>) might be easier if we can utilize a property known to existing on all collections &amp; globals, but not on number/bool/etc., e.g. <code class=\"notranslate\">id</code> from <code class=\"notranslate\">TypeWithID</code>.</p>\n<p dir=\"auto\">That said, the logic would probably be significantly simpler and less error-prone if the source interface used generics to lazy-resolve relations; something like</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"interface Post&lt;Depth&gt; {\n  title: string\n  category: Ref&lt;Category, Depth&gt;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Post</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">Depth</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">title</span>: <span class=\"pl-smi\">string</span>\n  <span class=\"pl-c1\">category</span>: <span class=\"pl-smi\">Ref</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Category</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">Depth</span><span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">whereas <code class=\"notranslate\">Ref&lt;T, R&gt;</code> could resolve to <code class=\"notranslate\">string</code>, <code class=\"notranslate\">T</code>, or <code class=\"notranslate\">string | T</code>, based on <code class=\"notranslate\">Depth</code>, covering all the same cases for <code class=\"notranslate\">CreateData</code>, <code class=\"notranslate\">WithDepth</code>, and the undetermined state.</p>\n<p dir=\"auto\">This approach <em>could</em> also take the <code class=\"notranslate\">maxDepth</code> property into consideration. I'm not sure if honoring this <code class=\"notranslate\">ref</code> type setting would otherwise be feasible.</p>\n<p dir=\"auto\">That said, I don't know if that alternative direction is an option as this point in time.</p>",
            "createdAt": "2023-01-14T13:07:28Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Ummmm this is AMAZING.</p>\n<p dir=\"auto\">I took a brief pass at what you've got in the Stackblitz post above and it's epic.</p>\n<p dir=\"auto\">As for adjusting our generated interfaces, that could be a tricky one, as we are pretty much at the mercy of what <code class=\"notranslate\">[json-schema-to-typescript](https://github.com/bcherny/json-schema-to-typescript)</code> supports there. It's worth a look though.</p>\n<p dir=\"auto\">I will follow up here shortly - got some big things on the radar and this will be awesome to implement!</p>",
            "createdAt": "2023-01-16T14:36:55Z"
          },
          {
            "author": {
              "name": "echocrow",
              "avatar": "https://avatars.githubusercontent.com/u/5488190?u=2d7f2f58b5cc9d5848cd0e0226f70512ceea6bd8&v=4",
              "url": "https://github.com/echocrow"
            },
            "body": "<p dir=\"auto\">Glad to hear this is useful!</p>\n<p dir=\"auto\">(I made a quick edit, simplifying the <code class=\"notranslate\">DropString&lt;...&gt;</code> to a built-in <code class=\"notranslate\">Exclude&lt;..., string&gt;</code>; couldn't let that slip once I realized TS already got this covered.)</p>\n<p dir=\"auto\">Happy to further help out with this, could be a fun TS <a href=\"https://github.com/type-challenges/type-challenges\"><em>Type Challenge</em></a>.</p>\n<p dir=\"auto\">Re <code class=\"notranslate\">json-schema-to-typescript</code>: I've hit that limitation there too; IIRC it does not support generics. Back then I worked around that via some basic (albeit hacky) string manipulation - at the end of the day, it's just text.</p>\n<p dir=\"auto\">Another workaround might be to switch to a more specialized library: Instead of building an abstract JSON schema just to then generate TS types, a library focused specifically on generating declarations could offer wider feature support, e.g. <a href=\"https://github.com/RyanCavanaugh/dts-dom\"><code class=\"notranslate\">dts-dom</code></a>.</p>",
            "createdAt": "2023-01-16T23:44:46Z"
          }
        ]
      },
      {
        "author": {
          "name": "Elliot67",
          "avatar": "https://avatars.githubusercontent.com/u/45725915?v=4",
          "url": "https://github.com/Elliot67"
        },
        "body": "<p dir=\"auto\">Don't know if it's useful for you, but since my project is using building blocks, I achieved some sort of type safety with the followings :</p>\n<h3 dir=\"auto\">Getting the type of a single block</h3>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// Where Homepage is a generated payload interface from a global page containing a block\n// field called `blocks` where every possible blocks are defined\nexport type BlockTypePicker&lt;T&gt; = Extract&lt;Homepage['blocks'][number], { blockType: T }&gt;;\"><pre class=\"notranslate\"><span class=\"pl-c\">// Where Homepage is a generated payload interface from a global page containing a block</span>\n<span class=\"pl-c\">// field called `blocks` where every possible blocks are defined</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">type</span> <span class=\"pl-smi\">BlockTypePicker</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">Extract</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Homepage</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">'blocks'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">[</span><span class=\"pl-smi\">number</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">blockType</span>: <span class=\"pl-smi\">T</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span></pre></div>\n<h3 dir=\"auto\">Force the relation of a field on that block</h3>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"export type RemoveStringType&lt;T&gt; = T extends string ? never : T;\n\n// Remove type string of a relation property (MK) in an object (T)\nexport type ForceRelationObj&lt;T extends Record&lt;any, any&gt;, MK extends keyof T&gt; = {\n  [K in keyof T]: K extends MK\n    ? T[MK] extends Array&lt;unknown&gt;\n      ? RemoveStringType&lt;T[MK][number]&gt;[]\n      : RemoveStringType&lt;T[MK]&gt;\n    : T[K];\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">export</span> <span class=\"pl-k\">type</span> <span class=\"pl-smi\">RemoveStringType</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">T</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">string</span> ? <span class=\"pl-smi\">never</span> : <span class=\"pl-smi\">T</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// Remove type string of a relation property (MK) in an object (T)</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">type</span> <span class=\"pl-smi\">ForceRelationObj</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">T</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Record</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">any</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">any</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">MK</span> <span class=\"pl-k\">extends</span> <span class=\"pl-k\">keyof</span> <span class=\"pl-smi\">T</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-kos\">[</span><span class=\"pl-smi\">K</span> <span class=\"pl-k\">in</span> <span class=\"pl-k\">keyof</span> <span class=\"pl-smi\">T</span><span class=\"pl-kos\">]</span>: <span class=\"pl-smi\">K</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">MK</span>\n    ? <span class=\"pl-smi\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-smi\">MK</span><span class=\"pl-kos\">]</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Array</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">unknown</span><span class=\"pl-kos\">&gt;</span>\n      ? <span class=\"pl-smi\">RemoveStringType</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-smi\">MK</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">[</span><span class=\"pl-smi\">number</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n      : <span class=\"pl-smi\">RemoveStringType</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-smi\">MK</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">&gt;</span>\n    : <span class=\"pl-smi\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-smi\">K</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Which can be used like that</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type MyObject = {\n  media: Media | string;\n  title: string;\n};\n\ntype BetterTypedObject = ForceRelationObj&lt;MyObject , 'media'&gt;;\n// {\n//   media: Media;\n//   title: string;\n// }\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-smi\">MyObject</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">media</span>: <span class=\"pl-smi\">Media</span> <span class=\"pl-c1\">|</span> <span class=\"pl-smi\">string</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">title</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">BetterTypedObject</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">ForceRelationObj</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">MyObject</span> <span class=\"pl-kos\">,</span> <span class=\"pl-s\">'media'</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// {</span>\n<span class=\"pl-c\">//   media: Media;</span>\n<span class=\"pl-c\">//   title: string;</span>\n<span class=\"pl-c\">// }</span></pre></div>\n<p dir=\"auto\">And when combining the utilities together, you get a fully typed block</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type FullyTypedBlock = ForceRelationObj&lt;BlockTypePicker&lt;'hero-banner'&gt;, 'thumbnail'&gt;\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-smi\">FullyTypedBlock</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">ForceRelationObj</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">BlockTypePicker</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-s\">'hero-banner'</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'thumbnail'</span><span class=\"pl-kos\">&gt;</span></pre></div>\n<p dir=\"auto\">In my case I have to specify the field name <code class=\"notranslate\">thumbnail</code>, but it should be possible to change the  <code class=\"notranslate\">K extends MK</code> condition to an array of fields, or even something that detects payload relations.</p>",
        "createdAt": "2023-01-13T23:04:30Z",
        "replies": null
      },
      {
        "author": {
          "name": "MoSattler",
          "avatar": "https://avatars.githubusercontent.com/u/64152453?u=4dafc2ad4cd58260de33dd7145b782a8a9fd8883&v=4",
          "url": "https://github.com/MoSattler"
        },
        "body": "<p dir=\"auto\">Super excited about this! thank you all so much!</p>",
        "createdAt": "2023-01-26T15:58:06Z",
        "replies": null
      },
      {
        "author": {
          "name": "xHomu",
          "avatar": "https://avatars.githubusercontent.com/u/84349818?u=fe1e11d856f85a409e154f2bd0b7ba228247f22d&v=4",
          "url": "https://github.com/xHomu"
        },
        "body": "<p dir=\"auto\">Local API type inferences are GOAT!</p>",
        "createdAt": "2023-02-01T02:45:59Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "required fields not being represented properly in the graphql schema",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">required fields not being represented properly in the graphql schema</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const Landing: GlobalConfig = {\n  slug: &quot;landing&quot;,\n  versions: true,\n  access: {\n    read: (() =&gt; true )\n  },\n  fields: [\n    {\n      name: &quot;title&quot;,\n      type: &quot;text&quot;,\n      required: true,\n      localized: true,\n    },\n  ],\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-smi\">Landing</span>: <span class=\"pl-smi\">GlobalConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">\"landing\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">versions</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">access</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">read</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-c1\">true</span> <span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"title\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"text\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">localized</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h2 dir=\"auto\">Expected Behavior</h2>\n<div class=\"highlight highlight-source-graphql notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type Landing {\n  title: String!\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-c1\">Landing</span> {\n  <span class=\"pl-v\">title</span>: <span class=\"pl-c1\">String</span><span class=\"pl-k\">!</span>\n}</pre></div>\n\n<h2 dir=\"auto\">Current Behavior</h2>\n<div class=\"highlight highlight-source-graphql notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type Landing {\n  title: String\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-c1\">Landing</span> {\n  <span class=\"pl-v\">title</span>: <span class=\"pl-c1\">String</span>\n}</pre></div>",
    "url": "https://github.com/payloadcms/payload/discussions/764",
    "id": "764",
    "createdAt": "2022-07-06T22:05:22Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "chaoky",
      "avatar": "https://avatars.githubusercontent.com/u/9826702?v=4",
      "url": "https://github.com/chaoky"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/chaoky/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/chaoky\">@chaoky</a> — good catch!</p>\n<p dir=\"auto\">This is actually working as intended because your field has <code class=\"notranslate\">localized: true</code>. You can query documents in a locale where this field is not yet set, and no fallback locale, which means that the field may not have data present.</p>\n<p dir=\"auto\">If you do not have <code class=\"notranslate\">localized: true</code>, GraphQL will show this field as required properly.</p>\n<p dir=\"auto\">Does this make sense? I am going to convert this into a discussion as I don't think there's much we can do here. Let me know what you think.</p>",
        "createdAt": "2022-07-17T20:20:50Z",
        "replies": [
          {
            "author": {
              "name": "chaoky",
              "avatar": "https://avatars.githubusercontent.com/u/9826702?v=4",
              "url": "https://github.com/chaoky"
            },
            "body": "<p dir=\"auto\">this does make sense, thank you</p>",
            "createdAt": "2022-07-22T16:10:55Z"
          },
          {
            "author": {
              "name": "acomagu",
              "avatar": "https://avatars.githubusercontent.com/u/1362750?v=4",
              "url": "https://github.com/acomagu"
            },
            "body": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> Are required fields non-null if fallback locale is set?</p>\n<p dir=\"auto\">The current implementation does not seem to check if the fallback locale is set, can this be improved?</p>",
            "createdAt": "2023-02-01T00:33:26Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Well, regardless of <code class=\"notranslate\">fallback</code> being enabled or not, the following is possible:</p>\n<ul dir=\"auto\">\n<li>Create a document in some locale</li>\n<li>Query in GraphQL, getting that document in one of your other locales</li>\n<li>Boom, GraphQL gets pissed and everything goes bluey</li>\n</ul>\n<p dir=\"auto\">This is why we have this type of thing in place. Of noting, the same thing applies to having any type of field-based access control, any type of conditional logic, etc. There are lots of cases in Payload where the field might be <em><strong>required</strong></em> but not actually tell GraphQL or TS type generation that the field is required.</p>\n<p dir=\"auto\">Does that make sense?</p>",
            "createdAt": "2023-02-01T00:57:22Z"
          }
        ]
      },
      {
        "author": {
          "name": "chaoky",
          "avatar": "https://avatars.githubusercontent.com/u/9826702?v=4",
          "url": "https://github.com/chaoky"
        },
        "body": "<p dir=\"auto\">another possible issue is</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  slug: &quot;landing&quot;,\n  fields: [\n    {\n      name: &quot;cards&quot;,\n      type: &quot;blocks&quot;,\n      blocks: [cards],\n      required: true,\n    },\n  ],\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">slug</span>: <span class=\"pl-s\">\"landing\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"cards\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"blocks\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">blocks</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s1\">cards</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">required</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">outputting</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type Landing {\n  cards: [Landing_Cards]\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">type Landing {\n  cards: [Landing_Cards]\n}\n</code></pre></div>\n<p dir=\"auto\">instead of</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type Foo {\n  cards: [Landing_Cards!]!\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">type Foo {\n  cards: [Landing_Cards!]!\n}\n</code></pre></div>",
        "createdAt": "2022-07-22T16:14:59Z",
        "replies": [
          {
            "author": {
              "name": "chaoky",
              "avatar": "https://avatars.githubusercontent.com/u/9826702?v=4",
              "url": "https://github.com/chaoky"
            },
            "body": "<p dir=\"auto\">I could work on this or some way to work around it</p>",
            "createdAt": "2022-07-22T16:21:35Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">Oh wow, good call! Thank you!</p>\n<p dir=\"auto\">This could be a quick one. <a href=\"https://github.com/payloadcms/payload/blob/master/src/graphql/schema/buildObjectType.ts#L455\">Check here</a>.</p>\n<p dir=\"auto\">If you want to give it a shot, that would be great!</p>",
            "createdAt": "2022-07-22T16:26:05Z"
          },
          {
            "author": {
              "name": "chaoky",
              "avatar": "https://avatars.githubusercontent.com/u/9826702?v=4",
              "url": "https://github.com/chaoky"
            },
            "body": "<p dir=\"auto\">small question <a aria-label=\"Pull request #799\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1315420475\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/issues/799\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/payloadcms/payload/pull/799/hovercard?comment_id=1192939321&amp;comment_type=issue_comment\" href=\"https://github.com/payloadcms/payload/pull/799#issuecomment-1192939321\">#799 (comment)</a></p>",
            "createdAt": "2022-07-22T21:14:14Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Improve extensibility of Admin UI search of collection list",
    "body": "<p dir=\"auto\">Prompted from this discussion on <a href=\"https://discord.com/channels/967097582721572934/1068093957499793418\" rel=\"nofollow\">Discord</a>.</p>\n<p dir=\"auto\">The problem is that under certain conditions the built-in search in Payload doesn't run optimally. One option is to have direct extensibility to allow 3rd party search tool handle it.</p>\n<p dir=\"auto\">Another detail to explore is allowing text search indexes that could improve the performance without integrating with another search service.</p>\n<p dir=\"auto\">I looked into improving the MongoBB search functionality but the <code class=\"notranslate\">search</code> index type and <code class=\"notranslate\">$search</code> aggregation isn't supported in all such as with DocumentDB and Cosmos.</p>\n<p dir=\"auto\">In addition to extending the above, some improvements to built-in search:</p>\n<ul dir=\"auto\">\n<li>Cancel outstanding stale search queries on change</li>\n<li>Provide loading feedback when querying in the UI</li>\n<li>Investigate built-in search performance issues of large collections (100k+)</li>\n</ul>",
    "url": "https://github.com/payloadcms/payload/discussions/1974",
    "id": "1974",
    "createdAt": "2023-01-30T16:15:24Z",
    "upvotes": 3,
    "commentTotal": 2,
    "author": {
      "name": "DanRibbens",
      "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
      "url": "https://github.com/DanRibbens"
    },
    "comments": [
      {
        "author": {
          "name": "bcksl",
          "avatar": "https://avatars.githubusercontent.com/u/121328003?v=4",
          "url": "https://github.com/bcksl"
        },
        "body": "<h1 dir=\"auto\"><code class=\"notranslate\">search</code> and <code class=\"notranslate\">$search</code></h1>\n<p dir=\"auto\">For those using a supported implementation, this would be a great addition. Have you considering doing this by adding a <code class=\"notranslate\">search</code> clause to Payload Queries? If so, that functionality could be enabled, and used by the search query builder in the admin panel with a config toggle. Would also suggest having a <code class=\"notranslate\">searchable: boolean</code> or flag on <code class=\"notranslate\">Field</code> that allows users to instruct Payload to add a <code class=\"notranslate\">search</code> index for that field, in the same vein as <code class=\"notranslate\">unique</code> and <code class=\"notranslate\">index</code>.</p>\n<h1 dir=\"auto\">Hooks</h1>\n<p dir=\"auto\">To support a variety of different backends, search hooks should support:</p>\n<ol dir=\"auto\">\n<li>A toggle for whether Payload needs to fetch the returned document ids from the database ( see <a href=\"#partial-document-support\">Partial document support</a>).</li>\n<li>A toggle for whether or not Payload needs to apply access control logic to the list or if it has already been considered.</li>\n<li>A hook to reindex a document when it has been modified (see <a href=\"#reindexing\">Reindexing</a>).</li>\n</ol>\n<p dir=\"auto\">The hooks could also interface with the <code class=\"notranslate\">searchable</code> toggle on <code class=\"notranslate\">Field</code> to enable search.</p>\n<p dir=\"auto\">If it's desirable to support multiple search backends, <code class=\"notranslate\">searchable</code> could optionally take an object something like the following, where <code class=\"notranslate\">indexOptions</code> and <code class=\"notranslate\">searchOptions</code> are objects that get passed to their respective hooks whenever used for that field.</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  strategy: string,\n  indexOptions: any,\n  searchOptions: any,\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">strategy</span>: <span class=\"pl-s1\">string</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">indexOptions</span>: <span class=\"pl-s1\">any</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">searchOptions</span>: <span class=\"pl-s1\">any</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Implementing multiple backends may not be considered worthwhile, because it brings a whole host of problems, like combining search results from disparate search providers. It would be simplest to mandate a single search provider, and have the search API be something like:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// `fields` is the record containing the field names (flattened paths for nested fields)\n// and their respective `searchOptions` from above\ntype SearchHook = ({\n  req: PayloadRequest,\n  fields: Record&lt;string, any&gt;,\n  query: string\n}) =&gt; Results | Promise&lt;Results&gt;\"><pre class=\"notranslate\"><span class=\"pl-c\">// `fields` is the record containing the field names (flattened paths for nested fields)</span>\n<span class=\"pl-c\">// and their respective `searchOptions` from above</span>\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">SearchHook</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">req</span>: <span class=\"pl-smi\">PayloadRequest</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">fields</span>: <span class=\"pl-smi\">Record</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">string</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">any</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">query</span>: <span class=\"pl-smi\">string</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">Results</span> <span class=\"pl-c1\">|</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Results</span><span class=\"pl-kos\">&gt;</span></pre></div>\n<p dir=\"auto\">The search hook <strong>must</strong> be parameterized over <code class=\"notranslate\">req</code> to enable search implementations to provide their own access control, for example using faceted indexes.</p>\n<h1 dir=\"auto\">Partial document support</h1>\n<p dir=\"auto\">Many search providers are also functionally document databases, meaning it would be performant to allow a search to directly return documents from the search engine. Consider adding a flag to the <code class=\"notranslate\">search</code> query which would override the hook default preference to either force Payload to fetch complete documents from the db from the returned ids, or return the documents as fetched by the search query. This relates to item (1) from the beginning of <a href=\"#hooks\">Hooks</a>, as the result of any search query can be generally specified to be a list of partial documents <strong>which must <em>at least</em> contain an id</strong>.</p>\n<p dir=\"auto\">As these documents will most likely retain the shape of the original, if not all the fields, access control may still be applied to the result.</p>\n<h1 dir=\"auto\">Reindexing</h1>\n<p dir=\"auto\">It would be very useful to be able to instruct Payload to rebuild the search index for an entire collection, either by calling the index hook again for all documents, or optionally providing an additional hook for bulk (re-)indexing of documents. This makes it a lot easier to add an index for a field after the field has been in use, among other things. Consider adding a subcommand to the CLI like <code class=\"notranslate\">payload search:reindex</code>, HTTP routes/GraphQL mutations/Local APIs, and components to the admin panel to accomplish same, with associated access control specifiers. Providing informative progress indication for the admin UI is reasonably straightforward, since even bulk reindexing can be chunked.</p>",
        "createdAt": "2023-01-31T05:45:35Z",
        "replies": null
      },
      {
        "author": {
          "name": "geminigeek",
          "avatar": "https://avatars.githubusercontent.com/u/3751322?v=4",
          "url": "https://github.com/geminigeek"
        },
        "body": "<p dir=\"auto\">hi,</p>\n<p dir=\"auto\">i suggest expose a custom endpoint for search and let the custom endpoint do search or whatever is required , show error in UI if the result is not in required format , also kindly look into exposing a debouche for search as you type, or disable it and use button to initiate search, i suggested a similar use case few months back <a aria-label=\"Discussion #1030\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"4348150\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/1030\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1030/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/1030\">#1030</a></p>",
        "createdAt": "2023-01-31T23:00:21Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "PAYLOAD_PUBLIC not propagating to collections?",
    "body": "<p dir=\"auto\">Hey!</p>\n<p dir=\"auto\">Quick question from my side, perhaps I am doing something wrong here.</p>\n<p dir=\"auto\">I have an env var called <code class=\"notranslate\">PAYLOAD_PUBLIC_FRONTEND_URL</code>. I use it in one of my collections for the preview functionality:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    preview: (doc, { locale }) =&gt; {\n            if (doc?.slug) {\n              payload.logger.info(`${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`)\n              return `${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`;\n            }\n\n            return null;\n        },\"><pre class=\"notranslate\"><code class=\"notranslate\">    preview: (doc, { locale }) =&gt; {\n            if (doc?.slug) {\n              payload.logger.info(`${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`)\n              return `${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}/${locale}/post/${doc.slug}`;\n            }\n\n            return null;\n        },\n</code></pre></div>\n<p dir=\"auto\">When I run my app locally, environment variable gets propagated, but on PRODUCTION it is undefined. What is even weirder is that other environment vars I pass to my docker container work. What is yet even weirder is that the same variable in payload.init() gets logged with the actual value.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"payload\n  .init({\n    secret: process.env.CMS_SECRET,\n    mongoURL: process.env.MONGODB_URI,\n    express: server,\n    onInit: async () =&gt; {\n      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);\n      payload.logger.info(`Frontend server URL: ${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}`);\"><pre class=\"notranslate\"><code class=\"notranslate\">payload\n  .init({\n    secret: process.env.CMS_SECRET,\n    mongoURL: process.env.MONGODB_URI,\n    express: server,\n    onInit: async () =&gt; {\n      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);\n      payload.logger.info(`Frontend server URL: ${process.env.PAYLOAD_PUBLIC_FRONTEND_URL}`);\n</code></pre></div>\n<p dir=\"auto\">Is there something that might be preventing collections to access process, but not <code class=\"notranslate\">payload.init</code>? I feel I might be missing something here</p>\n<p dir=\"auto\">Thanks for any kind of feedback!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1283",
    "id": "1283",
    "createdAt": "2022-10-20T16:41:29Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "adam-mrozik",
      "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
      "url": "https://github.com/adam-mrozik"
    },
    "comments": [
      {
        "author": {
          "name": "adam-mrozik",
          "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
          "url": "https://github.com/adam-mrozik"
        },
        "body": "<p dir=\"auto\">Addition:</p>\n<p dir=\"auto\">It works correctly if I supply this variable during docker-build. But this seems widely inconsistent, as it works in server.ts without it</p>",
        "createdAt": "2022-10-20T17:49:36Z",
        "replies": null
      },
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/adam-mrozik/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adam-mrozik\">@adam-mrozik</a> — I have some thoughts for you.</p>\n<p dir=\"auto\">Are you using <code class=\"notranslate\">dotenv</code>? Make sure that your <code class=\"notranslate\">dotenv</code> correctly points to your <code class=\"notranslate\">.env</code> file in both dev and production. Often times we've seen it where, for whatever reason, the folder structure differs from <code class=\"notranslate\">/src</code> to <code class=\"notranslate\">/dist</code> if using TS, and then <code class=\"notranslate\">dotenv</code> can no longer find your <code class=\"notranslate\">.env</code> file.</p>\n<p dir=\"auto\"><code class=\"notranslate\">dotenv</code> unfortunately won't error if it can't find the <code class=\"notranslate\">.env</code>....It just simply won't bind any variables.</p>\n<p dir=\"auto\">You can circumvent this problem by specifying a <code class=\"notranslate\">path</code> to <code class=\"notranslate\">dotenv</code> that you are SURE points to your <code class=\"notranslate\">.env</code> file in production cases.</p>",
        "createdAt": "2022-10-20T18:04:26Z",
        "replies": [
          {
            "author": {
              "name": "adam-mrozik",
              "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
              "url": "https://github.com/adam-mrozik"
            },
            "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> , thanks for the answer!<br>\nTo be honest, I thought having them just as environment variables would be sufficient. I do not copy any <code class=\"notranslate\">.env</code> file into production at all, I just have them all as bash variables. And it works perfectly in <code class=\"notranslate\">server.ts</code></p>\n<p dir=\"auto\">When I provide this variable as ENV during docker build, it works properly as well. So I assume <code class=\"notranslate\">.env</code> is an alternative, not something required</p>",
            "createdAt": "2022-10-21T08:52:14Z"
          },
          {
            "author": {
              "name": "adam-mrozik",
              "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
              "url": "https://github.com/adam-mrozik"
            },
            "body": "<p dir=\"auto\">I even created one file env.ts in root that just reads all the variables:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const ENV = {\nPAYLOAD_PUBLIC_FRONTEND_URL: process.env.PAYLOAD_PUBLIC_FRONTEND_URL, ...}\n\nexport default ENV;\"><pre class=\"notranslate\"><code class=\"notranslate\">const ENV = {\nPAYLOAD_PUBLIC_FRONTEND_URL: process.env.PAYLOAD_PUBLIC_FRONTEND_URL, ...}\n\nexport default ENV;\n</code></pre></div>\n<p dir=\"auto\">And, everything gets propagated from this file, Secret, mongoDB, etc... even when I went into the container, manually edited this file to log <code class=\"notranslate\">console.log(ENV.PAYLOAD_PUBLIC_FRONTEND_URL)</code> and did <code class=\"notranslate\">node env.js</code> on that file, it showed my URL. But for some reason, it fails when used inside a preview function.</p>\n<p dir=\"auto\">Variables are present in the env of my running container:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/92296835/197176973-89ee631f-a901-4790-a0a2-5beaaa76e989.png\"><img src=\"https://user-images.githubusercontent.com/92296835/197176973-89ee631f-a901-4790-a0a2-5beaaa76e989.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Again, the only thing that helps is if I add this variable as an env during the build time. Cannot get my head around what is happenning with that one in particular</p>",
            "createdAt": "2022-10-21T10:39:39Z"
          },
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">OK so here's what's happening.</p>\n<p dir=\"auto\"><strong>In the context of the server, environment variables are actual real-life variables that can be read from memory.</strong></p>\n<p dir=\"auto\">But the server's memory is in no way shared with the browser. So when you are using <code class=\"notranslate\">process.env.XXX</code> in the browser, that is a totally different \"construct\" that is generally built out as a global variable for you just for reasons of consistency.</p>\n<p dir=\"auto\">It's done by Webpack. And Webpack literally <em>writes your env variables</em> into your browser JS bundle <em>on build</em>. That's why we specify that any <strong>public</strong> variables (aka safe for anyone to read) should be strongly prefixed, clearly, with <code class=\"notranslate\">PAYLOAD_PUBLIC_</code>.</p>\n<p dir=\"auto\">But, with a full understanding of the above, you probably now see that those variables <em>must</em> be present while your bundle builds, because Webpack needs to write them directly into the JS bundle that it produces. This goes the same for any bundling framework - not just Webpack. So if you don't have your environment variable present while building Payload, then it will not be present in the browser.</p>\n<p dir=\"auto\">Does that make sense?</p>",
            "createdAt": "2022-10-21T13:10:52Z"
          },
          {
            "author": {
              "name": "adam-mrozik",
              "avatar": "https://avatars.githubusercontent.com/u/92296835?v=4",
              "url": "https://github.com/adam-mrozik"
            },
            "body": "<p dir=\"auto\">Yeah, makes sense! Thanks for the explanation!</p>",
            "createdAt": "2022-10-27T12:32:30Z"
          },
          {
            "author": {
              "name": "dotellie",
              "avatar": "https://avatars.githubusercontent.com/u/4590037?u=a458f7cf1dd34c8e98854d4ba41e2f5efbd1d918&v=4",
              "url": "https://github.com/dotellie"
            },
            "body": "<p dir=\"auto\">Okay this caught me off guard I have to admit. Not that I haven't dealt with this kind of stuff before (in fact I remember fixing this exact problem at a previous workplace) but I guess it just surprised me that Payload hasn't implemented dynamic environment injection at runtime. Not having this makes configuration a bit of a pain in the sense that the Docker image isn't actually portable in the end when it's built. I might actually want to take a stab at fixing this I think if that's something that more than just me want. <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jmikrut/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmikrut\">@jmikrut</a> what do you think?</p>",
            "createdAt": "2023-01-31T20:34:23Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "jmikrut",
        "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
        "url": "https://github.com/jmikrut"
      },
      "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/adam-mrozik/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adam-mrozik\">@adam-mrozik</a> — I have some thoughts for you.</p>\n<p dir=\"auto\">Are you using <code class=\"notranslate\">dotenv</code>? Make sure that your <code class=\"notranslate\">dotenv</code> correctly points to your <code class=\"notranslate\">.env</code> file in both dev and production. Often times we've seen it where, for whatever reason, the folder structure differs from <code class=\"notranslate\">/src</code> to <code class=\"notranslate\">/dist</code> if using TS, and then <code class=\"notranslate\">dotenv</code> can no longer find your <code class=\"notranslate\">.env</code> file.</p>\n<p dir=\"auto\"><code class=\"notranslate\">dotenv</code> unfortunately won't error if it can't find the <code class=\"notranslate\">.env</code>....It just simply won't bind any variables.</p>\n<p dir=\"auto\">You can circumvent this problem by specifying a <code class=\"notranslate\">path</code> to <code class=\"notranslate\">dotenv</code> that you are SURE points to your <code class=\"notranslate\">.env</code> file in production cases.</p>",
      "createdAt": "2022-10-20T18:04:26Z",
      "chosenAt": "2022-10-27T12:31:59Z",
      "chosenBy": "adam-mrozik"
    }
  },
  {
    "title": "Error:  Cannot find module 'C:\\Users\\......\\payload-cms\\server.js'",
    "body": "<h1 dir=\"auto\">Bug Report</h1>\n<p dir=\"auto\">I followed the quickstart instructions on <a href=\"https://payloadcms.com/docs/getting-started/installation\" rel=\"nofollow\">https://payloadcms.com/docs/getting-started/installation</a><br>\n` npx create-payload-app</p>\n<p dir=\"auto\">cd payload-cms</p>\n<p dir=\"auto\">npm install</p>\n<p dir=\"auto\">node server.js`</p>\n<p dir=\"auto\">where the directory name is payload-cms</p>\n<p dir=\"auto\">but get an error:</p>\n<p dir=\"auto\">`$ node server.js<br>\nnode:internal/modules/cjs/loader:936<br>\nthrow err;<br>\n^</p>\n<p dir=\"auto\">Error: Cannot find module 'C:\\Users.............\\payload-cms\\server.js'<br>\n←[90m    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:933:15)←[39m<br>\n←[90m    at Function.Module._load (node:internal/modules/cjs/loader:778:27)←[39m<br>\n←[90m    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)←[39m<br>\n←[90m    at node:internal/main/run_main_module:17:47←[39m {<br>\ncode: ←[32m'MODULE_NOT_FOUND'←[39m,<br>\nrequireStack: []<br>\n}<br>\n`</p>\n<p dir=\"auto\">node version: v16.16.0</p>\n<p dir=\"auto\">I am on Windows, using powershell or gitbash</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1983",
    "id": "1983",
    "createdAt": "2023-01-30T19:38:20Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "sdomville",
      "avatar": "https://avatars.githubusercontent.com/u/21313034?v=4",
      "url": "https://github.com/sdomville"
    },
    "comments": [
      {
        "author": {
          "name": "jmikrut",
          "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
          "url": "https://github.com/jmikrut"
        },
        "body": "<p dir=\"auto\">I think you're probably mixing up instructions from <code class=\"notranslate\">npx create-payload-app</code> and manual install. If you've used <code class=\"notranslate\">npx create-payload-app</code>, you will not need to run <code class=\"notranslate\">node server.js</code>, and rather, you should run <code class=\"notranslate\">npm run dev</code> or <code class=\"notranslate\">yarn dev</code>.</p>\n<p dir=\"auto\">The Node error you're seeing is because Node can't find your <code class=\"notranslate\">server.js</code> file. It will look in the folder that you're currently in. So for example, <code class=\"notranslate\">npx create-payload-app</code> will create a <code class=\"notranslate\">/src</code> directory, and your server will actually be in that folder instead—which will explain why Node can't find it in the root folder. Running <code class=\"notranslate\">yarn dev</code> or <code class=\"notranslate\">npm run dev</code> should resolve this.</p>\n<p dir=\"auto\">This is not an issue with Payload though, per se. So I'll convert this to a discussion, but we're happy to continue to help here!</p>",
        "createdAt": "2023-01-31T13:52:33Z",
        "replies": [
          {
            "author": {
              "name": "sdomville",
              "avatar": "https://avatars.githubusercontent.com/u/21313034?v=4",
              "url": "https://github.com/sdomville"
            },
            "body": "<p dir=\"auto\">Oh yes I was confused then and I am sure it's because the headers are all the same style. I would make everything under \"from scratch\" to be a subheader, if it helps others. Thank you!!</p>",
            "createdAt": "2023-01-31T15:49:25Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "jmikrut",
        "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
        "url": "https://github.com/jmikrut"
      },
      "body": "<p dir=\"auto\">I think you're probably mixing up instructions from <code class=\"notranslate\">npx create-payload-app</code> and manual install. If you've used <code class=\"notranslate\">npx create-payload-app</code>, you will not need to run <code class=\"notranslate\">node server.js</code>, and rather, you should run <code class=\"notranslate\">npm run dev</code> or <code class=\"notranslate\">yarn dev</code>.</p>\n<p dir=\"auto\">The Node error you're seeing is because Node can't find your <code class=\"notranslate\">server.js</code> file. It will look in the folder that you're currently in. So for example, <code class=\"notranslate\">npx create-payload-app</code> will create a <code class=\"notranslate\">/src</code> directory, and your server will actually be in that folder instead—which will explain why Node can't find it in the root folder. Running <code class=\"notranslate\">yarn dev</code> or <code class=\"notranslate\">npm run dev</code> should resolve this.</p>\n<p dir=\"auto\">This is not an issue with Payload though, per se. So I'll convert this to a discussion, but we're happy to continue to help here!</p>",
      "createdAt": "2023-01-31T13:52:33Z",
      "chosenAt": "2023-02-09T15:35:29Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Is there an Array string in Payload CMS?",
    "body": "<p dir=\"auto\">Hi, I tried to read the documentation, but I couldn't find it. Is there something to save array string to database?<br>\nI just want save array of strings<br>\nEx: <code class=\"notranslate\">[\"a\",\"b\",\"c\"]</code><br>\nI don't want save array of objects like this, just need array of strings here<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/15695252/210272435-2b0022c9-de6e-40ba-99a9-8430686ec1b3.png\"><img src=\"https://user-images.githubusercontent.com/15695252/210272435-2b0022c9-de6e-40ba-99a9-8430686ec1b3.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1791",
    "id": "1791",
    "createdAt": "2023-01-02T19:35:27Z",
    "upvotes": 2,
    "commentTotal": 2,
    "author": {
      "name": "IRediTOTO",
      "avatar": "https://avatars.githubusercontent.com/u/15695252?u=1db36b69ca11c742388f9de00dad6e489916e95e&v=4",
      "url": "https://github.com/IRediTOTO"
    },
    "comments": [
      {
        "author": {
          "name": "JessChowdhury",
          "avatar": "https://avatars.githubusercontent.com/u/67977755?u=08788f09f2505f810283c828fbff42eed6e8c37d&v=4",
          "url": "https://github.com/JessChowdhury"
        },
        "body": "<p dir=\"auto\">Hi <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/IRediTOTO/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/IRediTOTO\">@IRediTOTO</a>, this isn't currently supported but would definitely be useful in many cases. This question was also discussed on discord <a href=\"https://discord.com/channels/967097582721572934/1050348908729073685/1050348908729073685\" rel=\"nofollow\">here</a>. A potential workaround solution would be to:</p>\n<ol dir=\"auto\">\n<li>Create a hidden <code class=\"notranslate\">preferences</code> field</li>\n<li>On save, map the original array and return as an array of strings</li>\n<li>Pass this new array to your hidden field</li>\n</ol>\n<p dir=\"auto\">There might be more appropriate workarounds too if you want to share more information on what you're looking to achieve, let us know if you need further help here!</p>",
        "createdAt": "2023-01-10T11:31:54Z",
        "replies": [
          {
            "author": {
              "name": "IRediTOTO",
              "avatar": "https://avatars.githubusercontent.com/u/15695252?u=1db36b69ca11c742388f9de00dad6e489916e95e&v=4",
              "url": "https://github.com/IRediTOTO"
            },
            "body": "<p dir=\"auto\">Thank you for replied me and let me know. Ok fine, but I will wait for a that feature like that. This pretty basic, I think any Payload newbie will ask himself: where is the array??? :D</p>",
            "createdAt": "2023-01-10T19:20:42Z"
          },
          {
            "author": {
              "name": "gaboluque",
              "avatar": "https://avatars.githubusercontent.com/u/12043752?u=fe1841dc7414098c3a9a89cacea153ec66d7fba7&v=4",
              "url": "https://github.com/gaboluque"
            },
            "body": "<p dir=\"auto\">Payload newbie here, I think this could be really useful.</p>",
            "createdAt": "2023-01-31T00:47:45Z"
          },
          {
            "author": {
              "name": "jacobsfletch",
              "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
              "url": "https://github.com/jacobsfletch"
            },
            "body": "<p dir=\"auto\">The <code class=\"notranslate\">json</code> field might work for you: <a href=\"https://payloadcms.com/docs/fields/json#json-field\" rel=\"nofollow\">https://payloadcms.com/docs/fields/json#json-field</a></p>",
            "createdAt": "2023-01-31T01:42:08Z"
          }
        ]
      },
      {
        "author": {
          "name": "jacobsfletch",
          "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
          "url": "https://github.com/jacobsfletch"
        },
        "body": "<p dir=\"auto\">The<code class=\"notranslate\">json</code> field might work for you: <a href=\"https://payloadcms.com/docs/fields/json#json-field\" rel=\"nofollow\">https://payloadcms.com/docs/fields/json#json-field</a></p>",
        "createdAt": "2023-01-31T01:43:35Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "jacobsfletch",
        "avatar": "https://avatars.githubusercontent.com/u/15735305?u=66f38c58ddbb2f01cee44ef09a602cd8ffe4cd5d&v=4",
        "url": "https://github.com/jacobsfletch"
      },
      "body": "<p dir=\"auto\">The<code class=\"notranslate\">json</code> field might work for you: <a href=\"https://payloadcms.com/docs/fields/json#json-field\" rel=\"nofollow\">https://payloadcms.com/docs/fields/json#json-field</a></p>",
      "createdAt": "2023-01-31T01:43:35Z",
      "chosenAt": "2023-02-09T16:31:01Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Global config for Access Control the Local API",
    "body": "<p dir=\"auto\">Following the discussion on Discord, it seems that some people may find it useful to have the default for <code class=\"notranslate\">overrideAccess</code> configurable in the global config of Payload instead of manually doing it per use.</p>\n<p dir=\"auto\">Source in documentation: <a href=\"https://payloadcms.com/docs/local-api/overview\" rel=\"nofollow\">https://payloadcms.com/docs/local-api/overview</a></p>\n<p dir=\"auto\">I'd like to open a PR for this if it makes sense, it seems simple enough for my first PR to get accustomed with the core logic of Payload.</p>\n<p dir=\"auto\">I'd make a new config item for the Local API:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"export type LocalApiConfig = {\n  /** Configures the default access control for the local API. Defaults to 'true'  */\n  overrideAccess?: boolean;\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">export</span> <span class=\"pl-k\">type</span> <span class=\"pl-smi\">LocalApiConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">/** Configures the default access control for the local API. Defaults to 'true'  */</span>\n  <span class=\"pl-c1\">overrideAccess</span>?: <span class=\"pl-smi\">boolean</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">And then in the <code class=\"notranslate\">find-</code> functions I'd add a check for the global config with a default to true.</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1965",
    "id": "1965",
    "createdAt": "2023-01-29T06:48:45Z",
    "upvotes": 4,
    "commentTotal": 1,
    "author": {
      "name": "paulpopus",
      "avatar": "https://avatars.githubusercontent.com/u/35137243?v=4",
      "url": "https://github.com/paulpopus"
    },
    "comments": [
      {
        "author": {
          "name": "xHomu",
          "avatar": "https://avatars.githubusercontent.com/u/84349818?u=fe1e11d856f85a409e154f2bd0b7ba228247f22d&v=4",
          "url": "https://github.com/xHomu"
        },
        "body": "<p dir=\"auto\">Going through the docs, it wasn't obvious that the default Local API behavior ignores access controls altogether.</p>\n<p dir=\"auto\">It's very easy to accidentally forget the prop, and thus exposing data that we didn't intent to. I understand that it might be too late to change overrideAccess to false by default, so global config for Local API would be much appreciated!</p>",
        "createdAt": "2023-01-30T23:56:20Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  },
  {
    "title": "Using different type of editor",
    "body": "<p dir=\"auto\">Hey Guys,</p>\n<p dir=\"auto\">I just wanna ask if there is a possibility that I can use <a href=\"https://ckeditor.com/\" rel=\"nofollow\">ckeditor</a> instead of <a href=\"https://www.slatejs.org/\" rel=\"nofollow\">slatejs</a></p>",
    "url": "https://github.com/payloadcms/payload/discussions/1956",
    "id": "1956",
    "createdAt": "2023-01-26T07:45:15Z",
    "upvotes": 1,
    "commentTotal": 1,
    "author": {
      "name": "mark-15",
      "avatar": "https://avatars.githubusercontent.com/u/5755012?v=4",
      "url": "https://github.com/mark-15"
    },
    "comments": [
      {
        "author": {
          "name": "zubricks",
          "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
          "url": "https://github.com/zubricks"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mark-15/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mark-15\">@mark-15</a> anything is possible, though we don't officially support anything other than slate. We have a community member that built a <a href=\"https://github.com/payloadcms/payload/discussions/1772\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1772/hovercard\">plugin for Lexical,</a> but nothing for ckeditor at this time.</p>",
        "createdAt": "2023-01-30T22:04:46Z",
        "replies": [
          {
            "author": {
              "name": "jmikrut",
              "avatar": "https://avatars.githubusercontent.com/u/6651896?u=6e09e00f94f77c5857f92ec3a135d65386002623&v=4",
              "url": "https://github.com/jmikrut"
            },
            "body": "<p dir=\"auto\">To expand on this, using ckeditor would actually be quite easy. Because it stores its contents as a string, you would just need to make a custom Field component for any given text field.</p>\n<p dir=\"auto\">Then, within that custom field component, you would render ckeditor accordingly. Would be easy!</p>",
            "createdAt": "2023-01-30T22:27:50Z"
          }
        ]
      }
    ],
    "answer": {
      "author": {
        "name": "zubricks",
        "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
        "url": "https://github.com/zubricks"
      },
      "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mark-15/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mark-15\">@mark-15</a> anything is possible, though we don't officially support anything other than slate. We have a community member that built a <a href=\"https://github.com/payloadcms/payload/discussions/1772\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/1772/hovercard\">plugin for Lexical,</a> but nothing for ckeditor at this time.</p>",
      "createdAt": "2023-01-30T22:04:46Z",
      "chosenAt": "2023-01-30T22:04:49Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Support MySQL or PostgreSQL?",
    "body": "<p dir=\"auto\">Hello there,</p>\n<p dir=\"auto\">Is there a way to use MySQL/PostgreSQL as a database choice? I am interested in using <a href=\"https://planetscale.com/\" rel=\"nofollow\">https://planetscale.com/</a> as a database.</p>\n<p dir=\"auto\">Thank you</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1941",
    "id": "1941",
    "createdAt": "2023-01-23T21:40:56Z",
    "upvotes": 1,
    "commentTotal": 2,
    "author": {
      "name": "hhimanshu",
      "avatar": "https://avatars.githubusercontent.com/u/6589036?u=b70e5e0fdb180b058cabddd3480a795d977e06f1&v=4",
      "url": "https://github.com/hhimanshu"
    },
    "comments": [
      {
        "author": {
          "name": "Cpaczek",
          "avatar": "https://avatars.githubusercontent.com/u/25715982?u=a0ee4e742d4f1825d0958ef192a113d98171823a&v=4",
          "url": "https://github.com/Cpaczek"
        },
        "body": "<p dir=\"auto\">No</p>",
        "createdAt": "2023-01-23T21:48:15Z",
        "replies": null
      },
      {
        "author": {
          "name": "zubricks",
          "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
          "url": "https://github.com/zubricks"
        },
        "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hhimanshu/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hhimanshu\">@hhimanshu</a> not at the moment, but that is a item on our roadmap (multiple database support). -&gt; <a aria-label=\"Discussion #287\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3513774\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/287\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/287/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/287\">#287</a></p>",
        "createdAt": "2023-01-30T21:47:04Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {
        "name": "zubricks",
        "avatar": "https://avatars.githubusercontent.com/u/26472106?u=0685baa5428b38d80caa347a8c467b90ade7f88f&v=4",
        "url": "https://github.com/zubricks"
      },
      "body": "<p dir=\"auto\">Hey <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hhimanshu/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hhimanshu\">@hhimanshu</a> not at the moment, but that is a item on our roadmap (multiple database support). -&gt; <a aria-label=\"Discussion #287\" class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3513774\" data-permission-text=\"Title is private\" data-url=\"https://github.com/payloadcms/payload/discussions/287\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/payloadcms/payload/discussions/287/hovercard\" href=\"https://github.com/payloadcms/payload/discussions/287\">#287</a></p>",
      "createdAt": "2023-01-30T21:47:04Z",
      "chosenAt": "2023-01-30T21:47:08Z",
      "chosenBy": "zubricks"
    }
  },
  {
    "title": "Restore deleted posts with retainDeleted set true",
    "body": "<p dir=\"auto\">Hi guys, it would be awsome if there is a trash button to restore deleted posts.<br>\nThank you!</p>",
    "url": "https://github.com/payloadcms/payload/discussions/1968",
    "id": "1968",
    "createdAt": "2023-01-30T09:59:35Z",
    "upvotes": 3,
    "commentTotal": 1,
    "author": {
      "name": "stefanocerri",
      "avatar": "https://avatars.githubusercontent.com/u/22517245?u=fc8a29c37ea1762a9f23e1b92d44ac8f25c4f49d&v=4",
      "url": "https://github.com/stefanocerri"
    },
    "comments": [
      {
        "author": {
          "name": "DanRibbens",
          "avatar": "https://avatars.githubusercontent.com/u/6434612?u=5f70b3b4db315fb8f3619002d95a752759fb8231&v=4",
          "url": "https://github.com/DanRibbens"
        },
        "body": "<p dir=\"auto\">I agree Payload should have a complete concept for soft deleting collections. This is going to have an API aspect as well as the admin UI which you're aluding to it seems.</p>\n<p dir=\"auto\">You could use <code class=\"notranslate\">deleted</code> checkbox  or <code class=\"notranslate\">deletedAt</code> date field in your collection in your project or as a plugin. It would be much better to have this as a built-in feature that is easy to enable and use out of the box.</p>",
        "createdAt": "2023-01-30T21:19:15Z",
        "replies": null
      }
    ],
    "answer": {
      "author": {},
      "chosenAt": null
    }
  }
]